
BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08004cd4  08004cd4  00014cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e10  08004e10  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004e10  08004e10  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e10  08004e10  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e14  08004e14  00014e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000080  08004e98  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08004e98  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011107  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000254a  00000000  00000000  000311b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000918  00000000  00000000  00033708  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000820  00000000  00000000  00034020  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dac1  00000000  00000000  00034840  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b01d  00000000  00000000  00052301  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a4edb  00000000  00000000  0005d31e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001021f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a8  00000000  00000000  00102274  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004cbc 	.word	0x08004cbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08004cbc 	.word	0x08004cbc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000294:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <HAL_Init+0x28>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a07      	ldr	r2, [pc, #28]	; (80002b8 <HAL_Init+0x28>)
 800029a:	f043 0310 	orr.w	r3, r3, #16
 800029e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002a0:	2003      	movs	r0, #3
 80002a2:	f000 f90d 	bl	80004c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f808 	bl	80002bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80002ac:	f003 ff7a 	bl	80041a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002b0:	2300      	movs	r3, #0
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40022000 	.word	0x40022000

080002bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002c4:	4b12      	ldr	r3, [pc, #72]	; (8000310 <HAL_InitTick+0x54>)
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	4b12      	ldr	r3, [pc, #72]	; (8000314 <HAL_InitTick+0x58>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	4619      	mov	r1, r3
 80002ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 f917 	bl	800050e <HAL_SYSTICK_Config>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002e6:	2301      	movs	r3, #1
 80002e8:	e00e      	b.n	8000308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2b0f      	cmp	r3, #15
 80002ee:	d80a      	bhi.n	8000306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002f0:	2200      	movs	r2, #0
 80002f2:	6879      	ldr	r1, [r7, #4]
 80002f4:	f04f 30ff 	mov.w	r0, #4294967295
 80002f8:	f000 f8ed 	bl	80004d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002fc:	4a06      	ldr	r2, [pc, #24]	; (8000318 <HAL_InitTick+0x5c>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000302:	2300      	movs	r3, #0
 8000304:	e000      	b.n	8000308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000306:	2301      	movs	r3, #1
}
 8000308:	4618      	mov	r0, r3
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000018 	.word	0x20000018
 8000314:	20000004 	.word	0x20000004
 8000318:	20000000 	.word	0x20000000

0800031c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <HAL_IncTick+0x20>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	461a      	mov	r2, r3
 8000326:	4b06      	ldr	r3, [pc, #24]	; (8000340 <HAL_IncTick+0x24>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4413      	add	r3, r2
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <HAL_IncTick+0x24>)
 800032e:	6013      	str	r3, [r2, #0]
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	20000004 	.word	0x20000004
 8000340:	200000ac 	.word	0x200000ac

08000344 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  return uwTick;  
 8000348:	4b03      	ldr	r3, [pc, #12]	; (8000358 <HAL_GetTick+0x14>)
 800034a:	681b      	ldr	r3, [r3, #0]
}
 800034c:	4618      	mov	r0, r3
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	200000ac 	.word	0x200000ac

0800035c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	f003 0307 	and.w	r3, r3, #7
 800036a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <NVIC_SetPriorityGrouping+0x44>)
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000372:	68ba      	ldr	r2, [r7, #8]
 8000374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000378:	4013      	ands	r3, r2
 800037a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800038c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800038e:	4a04      	ldr	r2, [pc, #16]	; (80003a0 <NVIC_SetPriorityGrouping+0x44>)
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	60d3      	str	r3, [r2, #12]
}
 8000394:	bf00      	nop
 8000396:	3714      	adds	r7, #20
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	e000ed00 	.word	0xe000ed00

080003a4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003a8:	4b04      	ldr	r3, [pc, #16]	; (80003bc <NVIC_GetPriorityGrouping+0x18>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	0a1b      	lsrs	r3, r3, #8
 80003ae:	f003 0307 	and.w	r3, r3, #7
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	e000ed00 	.word	0xe000ed00

080003c0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	6039      	str	r1, [r7, #0]
 80003ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80003cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	da0b      	bge.n	80003ec <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	b2da      	uxtb	r2, r3
 80003d8:	490c      	ldr	r1, [pc, #48]	; (800040c <NVIC_SetPriority+0x4c>)
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	f003 030f 	and.w	r3, r3, #15
 80003e0:	3b04      	subs	r3, #4
 80003e2:	0112      	lsls	r2, r2, #4
 80003e4:	b2d2      	uxtb	r2, r2
 80003e6:	440b      	add	r3, r1
 80003e8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003ea:	e009      	b.n	8000400 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	4907      	ldr	r1, [pc, #28]	; (8000410 <NVIC_SetPriority+0x50>)
 80003f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003f6:	0112      	lsls	r2, r2, #4
 80003f8:	b2d2      	uxtb	r2, r2
 80003fa:	440b      	add	r3, r1
 80003fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	e000ed00 	.word	0xe000ed00
 8000410:	e000e100 	.word	0xe000e100

08000414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000414:	b480      	push	{r7}
 8000416:	b089      	sub	sp, #36	; 0x24
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f003 0307 	and.w	r3, r3, #7
 8000426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000428:	69fb      	ldr	r3, [r7, #28]
 800042a:	f1c3 0307 	rsb	r3, r3, #7
 800042e:	2b04      	cmp	r3, #4
 8000430:	bf28      	it	cs
 8000432:	2304      	movcs	r3, #4
 8000434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000436:	69fb      	ldr	r3, [r7, #28]
 8000438:	3304      	adds	r3, #4
 800043a:	2b06      	cmp	r3, #6
 800043c:	d902      	bls.n	8000444 <NVIC_EncodePriority+0x30>
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	3b03      	subs	r3, #3
 8000442:	e000      	b.n	8000446 <NVIC_EncodePriority+0x32>
 8000444:	2300      	movs	r3, #0
 8000446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000448:	f04f 32ff 	mov.w	r2, #4294967295
 800044c:	69bb      	ldr	r3, [r7, #24]
 800044e:	fa02 f303 	lsl.w	r3, r2, r3
 8000452:	43da      	mvns	r2, r3
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	401a      	ands	r2, r3
 8000458:	697b      	ldr	r3, [r7, #20]
 800045a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800045c:	f04f 31ff 	mov.w	r1, #4294967295
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	fa01 f303 	lsl.w	r3, r1, r3
 8000466:	43d9      	mvns	r1, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800046c:	4313      	orrs	r3, r2
         );
}
 800046e:	4618      	mov	r0, r3
 8000470:	3724      	adds	r7, #36	; 0x24
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
	...

0800047c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	3b01      	subs	r3, #1
 8000488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800048c:	d301      	bcc.n	8000492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800048e:	2301      	movs	r3, #1
 8000490:	e00f      	b.n	80004b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000492:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <SysTick_Config+0x40>)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	3b01      	subs	r3, #1
 8000498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800049a:	210f      	movs	r1, #15
 800049c:	f04f 30ff 	mov.w	r0, #4294967295
 80004a0:	f7ff ff8e 	bl	80003c0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004a4:	4b05      	ldr	r3, [pc, #20]	; (80004bc <SysTick_Config+0x40>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004aa:	4b04      	ldr	r3, [pc, #16]	; (80004bc <SysTick_Config+0x40>)
 80004ac:	2207      	movs	r2, #7
 80004ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004b0:	2300      	movs	r3, #0
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	e000e010 	.word	0xe000e010

080004c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004c8:	6878      	ldr	r0, [r7, #4]
 80004ca:	f7ff ff47 	bl	800035c <NVIC_SetPriorityGrouping>
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b086      	sub	sp, #24
 80004da:	af00      	add	r7, sp, #0
 80004dc:	4603      	mov	r3, r0
 80004de:	60b9      	str	r1, [r7, #8]
 80004e0:	607a      	str	r2, [r7, #4]
 80004e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004e8:	f7ff ff5c 	bl	80003a4 <NVIC_GetPriorityGrouping>
 80004ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	68b9      	ldr	r1, [r7, #8]
 80004f2:	6978      	ldr	r0, [r7, #20]
 80004f4:	f7ff ff8e 	bl	8000414 <NVIC_EncodePriority>
 80004f8:	4602      	mov	r2, r0
 80004fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004fe:	4611      	mov	r1, r2
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff ff5d 	bl	80003c0 <NVIC_SetPriority>
}
 8000506:	bf00      	nop
 8000508:	3718      	adds	r7, #24
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f7ff ffb0 	bl	800047c <SysTick_Config>
 800051c:	4603      	mov	r3, r0
}
 800051e:	4618      	mov	r0, r3
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and initialize the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d101      	bne.n	800053a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e054      	b.n	80005e4 <HAL_CRC_Init+0xbc>
  }
  
  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	7f5b      	ldrb	r3, [r3, #29]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	2b00      	cmp	r3, #0
 8000542:	d105      	bne.n	8000550 <HAL_CRC_Init+0x28>
  {   
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2200      	movs	r2, #0
 8000548:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f003 fe4e 	bl	80041ec <HAL_CRC_MspInit>
  }
  
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2202      	movs	r2, #2
 8000554:	775a      	strb	r2, [r3, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	791b      	ldrb	r3, [r3, #4]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d10c      	bne.n	8000578 <HAL_CRC_Init+0x50>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a22      	ldr	r2, [pc, #136]	; (80005ec <HAL_CRC_Init+0xc4>)
 8000564:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	689a      	ldr	r2, [r3, #8]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f022 0218 	bic.w	r2, r2, #24
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	e00c      	b.n	8000592 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC IP with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	6899      	ldr	r1, [r3, #8]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	461a      	mov	r2, r3
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f000 f948 	bl	8000818 <HAL_CRCEx_Polynomial_Set>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800058e:	2301      	movs	r3, #1
 8000590:	e028      	b.n	80005e4 <HAL_CRC_Init+0xbc>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	795b      	ldrb	r3, [r3, #5]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d105      	bne.n	80005a6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f04f 32ff 	mov.w	r2, #4294967295
 80005a2:	611a      	str	r2, [r3, #16]
 80005a4:	e004      	b.n	80005b0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	6912      	ldr	r2, [r2, #16]
 80005ae:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	695a      	ldr	r2, [r3, #20]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	430a      	orrs	r2, r1
 80005c4:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	699a      	ldr	r2, [r3, #24]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	430a      	orrs	r2, r1
 80005da:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2201      	movs	r2, #1
 80005e0:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 80005e2:	2300      	movs	r3, #0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	04c11db7 	.word	0x04c11db7

080005f0 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  uint32_t index = 0U; /* CRC input data buffer index */
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
  
  /* Process locked */
  __HAL_LOCK(hcrc); 
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	7f1b      	ldrb	r3, [r3, #28]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d101      	bne.n	8000610 <HAL_CRC_Accumulate+0x20>
 800060c:	2302      	movs	r3, #2
 800060e:	e03a      	b.n	8000686 <HAL_CRC_Accumulate+0x96>
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2201      	movs	r2, #1
 8000614:	771a      	strb	r2, [r3, #28]
    
  /* Change CRC peripheral state */  
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	2202      	movs	r2, #2
 800061a:	775a      	strb	r2, [r3, #29]
  
  switch (hcrc->InputDataFormat)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	6a1b      	ldr	r3, [r3, #32]
 8000620:	2b02      	cmp	r3, #2
 8000622:	d022      	beq.n	800066a <HAL_CRC_Accumulate+0x7a>
 8000624:	2b03      	cmp	r3, #3
 8000626:	d002      	beq.n	800062e <HAL_CRC_Accumulate+0x3e>
 8000628:	2b01      	cmp	r3, #1
 800062a:	d017      	beq.n	800065c <HAL_CRC_Accumulate+0x6c>
    case CRC_INPUTDATA_FORMAT_HALFWORDS: 
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
      break;
      
    default:
      break;          
 800062c:	e024      	b.n	8000678 <HAL_CRC_Accumulate+0x88>
      for(index = 0U; index < BufferLength; index++)
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	e00a      	b.n	800064a <HAL_CRC_Accumulate+0x5a>
        hcrc->Instance->DR = pBuffer[index];
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	68ba      	ldr	r2, [r7, #8]
 800063a:	441a      	add	r2, r3
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	6812      	ldr	r2, [r2, #0]
 8000642:	601a      	str	r2, [r3, #0]
      for(index = 0U; index < BufferLength; index++)
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	3301      	adds	r3, #1
 8000648:	617b      	str	r3, [r7, #20]
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	429a      	cmp	r2, r3
 8000650:	d3f0      	bcc.n	8000634 <HAL_CRC_Accumulate+0x44>
      temp = hcrc->Instance->DR;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	613b      	str	r3, [r7, #16]
      break;
 800065a:	e00d      	b.n	8000678 <HAL_CRC_Accumulate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	68b9      	ldr	r1, [r7, #8]
 8000660:	68f8      	ldr	r0, [r7, #12]
 8000662:	f000 f814 	bl	800068e <CRC_Handle_8>
 8000666:	6138      	str	r0, [r7, #16]
      break;
 8000668:	e006      	b.n	8000678 <HAL_CRC_Accumulate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	68b9      	ldr	r1, [r7, #8]
 800066e:	68f8      	ldr	r0, [r7, #12]
 8000670:	f000 f897 	bl	80007a2 <CRC_Handle_16>
 8000674:	6138      	str	r0, [r7, #16]
      break;
 8000676:	bf00      	nop
  }
  
  /* Change CRC peripheral state */    
  hcrc->State = HAL_CRC_STATE_READY; 
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	2201      	movs	r2, #1
 800067c:	775a      	strb	r2, [r3, #29]
  
  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2200      	movs	r2, #0
 8000682:	771a      	strb	r2, [r3, #28]
  
  /* Return the CRC computed value */ 
  return temp;
 8000684:	693b      	ldr	r3, [r7, #16]
}
 8000686:	4618      	mov	r0, r3
 8000688:	3718      	adds	r7, #24
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800068e:	b480      	push	{r7}
 8000690:	b087      	sub	sp, #28
 8000692:	af00      	add	r7, sp, #0
 8000694:	60f8      	str	r0, [r7, #12]
 8000696:	60b9      	str	r1, [r7, #8]
 8000698:	607a      	str	r2, [r7, #4]
  uint32_t i = 0U; /* input data buffer index */
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0U; i < (BufferLength/4U); i++)
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	e023      	b.n	80006ec <CRC_Handle_8+0x5e>
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4U*i]<<24U) | ((uint32_t)pBuffer[4U*i+1]<<16U) | ((uint32_t)pBuffer[4U*i+2]<<8U) | (uint32_t)pBuffer[4U*i+3];      
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	4413      	add	r3, r2
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	061a      	lsls	r2, r3, #24
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	3301      	adds	r3, #1
 80006b6:	68b9      	ldr	r1, [r7, #8]
 80006b8:	440b      	add	r3, r1
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	041b      	lsls	r3, r3, #16
 80006be:	431a      	orrs	r2, r3
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	3302      	adds	r3, #2
 80006c6:	68b9      	ldr	r1, [r7, #8]
 80006c8:	440b      	add	r3, r1
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	021b      	lsls	r3, r3, #8
 80006ce:	431a      	orrs	r2, r3
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	3303      	adds	r3, #3
 80006d6:	68b9      	ldr	r1, [r7, #8]
 80006d8:	440b      	add	r3, r1
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4619      	mov	r1, r3
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	430a      	orrs	r2, r1
 80006e4:	601a      	str	r2, [r3, #0]
   for(i = 0U; i < (BufferLength/4U); i++)
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	3301      	adds	r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	089b      	lsrs	r3, r3, #2
 80006f0:	697a      	ldr	r2, [r7, #20]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d3d6      	bcc.n	80006a4 <CRC_Handle_8+0x16>
   }
   /* last bytes specific handling */
   if ((BufferLength%4U) != 0U)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f003 0303 	and.w	r3, r3, #3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d047      	beq.n	8000790 <CRC_Handle_8+0x102>
   {
     if  (BufferLength%4U == 1U)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f003 0303 	and.w	r3, r3, #3
 8000706:	2b01      	cmp	r3, #1
 8000708:	d107      	bne.n	800071a <CRC_Handle_8+0x8c>
     {
       *(uint8_t volatile*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	4413      	add	r3, r2
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	6812      	ldr	r2, [r2, #0]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	7013      	strb	r3, [r2, #0]
     }
     if  (BufferLength%4U == 2U)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f003 0303 	and.w	r3, r3, #3
 8000720:	2b02      	cmp	r3, #2
 8000722:	d113      	bne.n	800074c <CRC_Handle_8+0xbe>
     {
       *(uint16_t volatile*) (&hcrc->Instance->DR) = ((uint32_t)pBuffer[4*i]<<8) | (uint32_t)pBuffer[4*i+1];
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	68ba      	ldr	r2, [r7, #8]
 800072a:	4413      	add	r3, r2
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	b29b      	uxth	r3, r3
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	b29a      	uxth	r2, r3
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	3301      	adds	r3, #1
 800073a:	68b9      	ldr	r1, [r7, #8]
 800073c:	440b      	add	r3, r1
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	b29b      	uxth	r3, r3
 8000742:	68f9      	ldr	r1, [r7, #12]
 8000744:	6809      	ldr	r1, [r1, #0]
 8000746:	4313      	orrs	r3, r2
 8000748:	b29b      	uxth	r3, r3
 800074a:	800b      	strh	r3, [r1, #0]
     }
     if  (BufferLength%4U == 3U)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f003 0303 	and.w	r3, r3, #3
 8000752:	2b03      	cmp	r3, #3
 8000754:	d11c      	bne.n	8000790 <CRC_Handle_8+0x102>
     {
       *(uint16_t volatile*) (&hcrc->Instance->DR) = ((uint32_t)pBuffer[4*i]<<8) | (uint32_t)pBuffer[4*i+1];
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	4413      	add	r3, r2
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	b29b      	uxth	r3, r3
 8000762:	021b      	lsls	r3, r3, #8
 8000764:	b29a      	uxth	r2, r3
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	3301      	adds	r3, #1
 800076c:	68b9      	ldr	r1, [r7, #8]
 800076e:	440b      	add	r3, r1
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b29b      	uxth	r3, r3
 8000774:	68f9      	ldr	r1, [r7, #12]
 8000776:	6809      	ldr	r1, [r1, #0]
 8000778:	4313      	orrs	r3, r2
 800077a:	b29b      	uxth	r3, r3
 800077c:	800b      	strh	r3, [r1, #0]
       *(uint8_t volatile*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	3302      	adds	r3, #2
 8000784:	68ba      	ldr	r2, [r7, #8]
 8000786:	4413      	add	r3, r2
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	6812      	ldr	r2, [r2, #0]
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	681b      	ldr	r3, [r3, #0]
}
 8000796:	4618      	mov	r0, r3
 8000798:	371c      	adds	r7, #28
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80007a2:	b480      	push	{r7}
 80007a4:	b087      	sub	sp, #28
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	60f8      	str	r0, [r7, #12]
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
  uint32_t i = 0U;  /* input data buffer index */
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0U; i < (BufferLength/2U); i++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	e013      	b.n	80007e0 <CRC_Handle_16+0x3e>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U*i]<<16U) | (uint32_t)pBuffer[2U*i+1];     
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	68ba      	ldr	r2, [r7, #8]
 80007be:	4413      	add	r3, r2
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	041a      	lsls	r2, r3, #16
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	3302      	adds	r3, #2
 80007ca:	68b9      	ldr	r1, [r7, #8]
 80007cc:	440b      	add	r3, r1
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	430a      	orrs	r2, r1
 80007d8:	601a      	str	r2, [r3, #0]
  for(i = 0U; i < (BufferLength/2U); i++)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	085b      	lsrs	r3, r3, #1
 80007e4:	697a      	ldr	r2, [r7, #20]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d3e6      	bcc.n	80007b8 <CRC_Handle_16+0x16>
  }
  if ((BufferLength%2U) != 0U)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d007      	beq.n	8000804 <CRC_Handle_16+0x62>
  {
       *(uint16_t volatile*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	68ba      	ldr	r2, [r7, #8]
 80007fa:	4413      	add	r3, r2
 80007fc:	68fa      	ldr	r2, [r7, #12]
 80007fe:	6812      	ldr	r2, [r2, #0]
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
}
 800080a:	4618      	mov	r0, r3
 800080c:	371c      	adds	r7, #28
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
	...

08000818 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000818:	b480      	push	{r7}
 800081a:	b087      	sub	sp, #28
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000824:	231f      	movs	r3, #31
 8000826:	617b      	str	r3, [r7, #20]
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0U) && (msb-- > 0U)){}
 8000828:	bf00      	nop
 800082a:	2201      	movs	r2, #1
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	409a      	lsls	r2, r3
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	4013      	ands	r3, r2
 8000834:	2b00      	cmp	r3, #0
 8000836:	d104      	bne.n	8000842 <HAL_CRCEx_Polynomial_Set+0x2a>
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	1e5a      	subs	r2, r3, #1
 800083c:	617a      	str	r2, [r7, #20]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1f3      	bne.n	800082a <HAL_CRCEx_Polynomial_Set+0x12>

  switch (PolyLength)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b18      	cmp	r3, #24
 8000846:	d844      	bhi.n	80008d2 <HAL_CRCEx_Polynomial_Set+0xba>
 8000848:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <HAL_CRCEx_Polynomial_Set+0x38>)
 800084a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084e:	bf00      	nop
 8000850:	080008d3 	.word	0x080008d3
 8000854:	080008d3 	.word	0x080008d3
 8000858:	080008d3 	.word	0x080008d3
 800085c:	080008d3 	.word	0x080008d3
 8000860:	080008d3 	.word	0x080008d3
 8000864:	080008d3 	.word	0x080008d3
 8000868:	080008d3 	.word	0x080008d3
 800086c:	080008d3 	.word	0x080008d3
 8000870:	080008c9 	.word	0x080008c9
 8000874:	080008d3 	.word	0x080008d3
 8000878:	080008d3 	.word	0x080008d3
 800087c:	080008d3 	.word	0x080008d3
 8000880:	080008d3 	.word	0x080008d3
 8000884:	080008d3 	.word	0x080008d3
 8000888:	080008d3 	.word	0x080008d3
 800088c:	080008d3 	.word	0x080008d3
 8000890:	080008bf 	.word	0x080008bf
 8000894:	080008d3 	.word	0x080008d3
 8000898:	080008d3 	.word	0x080008d3
 800089c:	080008d3 	.word	0x080008d3
 80008a0:	080008d3 	.word	0x080008d3
 80008a4:	080008d3 	.word	0x080008d3
 80008a8:	080008d3 	.word	0x080008d3
 80008ac:	080008d3 	.word	0x080008d3
 80008b0:	080008b5 	.word	0x080008b5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B) 
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	2b06      	cmp	r3, #6
 80008b8:	d90d      	bls.n	80008d6 <HAL_CRCEx_Polynomial_Set+0xbe>
      {
        return  HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
 80008bc:	e01f      	b.n	80008fe <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	2b07      	cmp	r3, #7
 80008c2:	d90a      	bls.n	80008da <HAL_CRCEx_Polynomial_Set+0xc2>
      {
        return  HAL_ERROR;
 80008c4:	2301      	movs	r3, #1
 80008c6:	e01a      	b.n	80008fe <HAL_CRCEx_Polynomial_Set+0xe6>
      }      
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	2b0f      	cmp	r3, #15
 80008cc:	d907      	bls.n	80008de <HAL_CRCEx_Polynomial_Set+0xc6>
      {
        return  HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e015      	b.n	80008fe <HAL_CRCEx_Polynomial_Set+0xe6>
      break;
    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break; 
    default:
      break;                  
 80008d2:	bf00      	nop
 80008d4:	e004      	b.n	80008e0 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80008d6:	bf00      	nop
 80008d8:	e002      	b.n	80008e0 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80008da:	bf00      	nop
 80008dc:	e000      	b.n	80008e0 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80008de:	bf00      	nop
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	68ba      	ldr	r2, [r7, #8]
 80008e6:	615a      	str	r2, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	f023 0118 	bic.w	r1, r3, #24
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	430a      	orrs	r2, r1
 80008fa:	609a      	str	r2, [r3, #8]
  
  /* Return function status */
  return HAL_OK;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	371c      	adds	r7, #28
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800090c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800090e:	b087      	sub	sp, #28
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 800091e:	2300      	movs	r3, #0
 8000920:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8000922:	2300      	movs	r3, #0
 8000924:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000926:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <HAL_FLASH_Program+0xd8>)
 8000928:	7e1b      	ldrb	r3, [r3, #24]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d101      	bne.n	8000932 <HAL_FLASH_Program+0x26>
 800092e:	2302      	movs	r3, #2
 8000930:	e054      	b.n	80009dc <HAL_FLASH_Program+0xd0>
 8000932:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <HAL_FLASH_Program+0xd8>)
 8000934:	2201      	movs	r2, #1
 8000936:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000938:	f24c 3050 	movw	r0, #50000	; 0xc350
 800093c:	f000 f8d4 	bl	8000ae8 <FLASH_WaitForLastOperation>
 8000940:	4603      	mov	r3, r0
 8000942:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000944:	7dfb      	ldrb	r3, [r7, #23]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d144      	bne.n	80009d4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d102      	bne.n	8000956 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000950:	2301      	movs	r3, #1
 8000952:	757b      	strb	r3, [r7, #21]
 8000954:	e007      	b.n	8000966 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	2b02      	cmp	r3, #2
 800095a:	d102      	bne.n	8000962 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800095c:	2302      	movs	r3, #2
 800095e:	757b      	strb	r3, [r7, #21]
 8000960:	e001      	b.n	8000966 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000962:	2304      	movs	r3, #4
 8000964:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000966:	2300      	movs	r3, #0
 8000968:	75bb      	strb	r3, [r7, #22]
 800096a:	e02d      	b.n	80009c8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800096c:	7dbb      	ldrb	r3, [r7, #22]
 800096e:	005a      	lsls	r2, r3, #1
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	eb02 0c03 	add.w	ip, r2, r3
 8000976:	7dbb      	ldrb	r3, [r7, #22]
 8000978:	0119      	lsls	r1, r3, #4
 800097a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800097e:	f1c1 0620 	rsb	r6, r1, #32
 8000982:	f1a1 0020 	sub.w	r0, r1, #32
 8000986:	fa22 f401 	lsr.w	r4, r2, r1
 800098a:	fa03 f606 	lsl.w	r6, r3, r6
 800098e:	4334      	orrs	r4, r6
 8000990:	fa23 f000 	lsr.w	r0, r3, r0
 8000994:	4304      	orrs	r4, r0
 8000996:	fa23 f501 	lsr.w	r5, r3, r1
 800099a:	b2a3      	uxth	r3, r4
 800099c:	4619      	mov	r1, r3
 800099e:	4660      	mov	r0, ip
 80009a0:	f000 f886 	bl	8000ab0 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80009a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80009a8:	f000 f89e 	bl	8000ae8 <FLASH_WaitForLastOperation>
 80009ac:	4603      	mov	r3, r0
 80009ae:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <HAL_FLASH_Program+0xdc>)
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <HAL_FLASH_Program+0xdc>)
 80009b6:	f023 0301 	bic.w	r3, r3, #1
 80009ba:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 80009bc:	7dfb      	ldrb	r3, [r7, #23]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d107      	bne.n	80009d2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80009c2:	7dbb      	ldrb	r3, [r7, #22]
 80009c4:	3301      	adds	r3, #1
 80009c6:	75bb      	strb	r3, [r7, #22]
 80009c8:	7dba      	ldrb	r2, [r7, #22]
 80009ca:	7d7b      	ldrb	r3, [r7, #21]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d3cd      	bcc.n	800096c <HAL_FLASH_Program+0x60>
 80009d0:	e000      	b.n	80009d4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80009d2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <HAL_FLASH_Program+0xd8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	761a      	strb	r2, [r3, #24]

  return status;
 80009da:	7dfb      	ldrb	r3, [r7, #23]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	371c      	adds	r7, #28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009e4:	200000b0 	.word	0x200000b0
 80009e8:	40022000 	.word	0x40022000

080009ec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80009f2:	2300      	movs	r3, #0
 80009f4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <HAL_FLASH_Unlock+0x40>)
 80009f8:	691b      	ldr	r3, [r3, #16]
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d00d      	beq.n	8000a1e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <HAL_FLASH_Unlock+0x40>)
 8000a04:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <HAL_FLASH_Unlock+0x44>)
 8000a06:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_FLASH_Unlock+0x40>)
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <HAL_FLASH_Unlock+0x48>)
 8000a0c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a0e:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <HAL_FLASH_Unlock+0x40>)
 8000a10:	691b      	ldr	r3, [r3, #16]
 8000a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	40022000 	.word	0x40022000
 8000a30:	45670123 	.word	0x45670123
 8000a34:	cdef89ab 	.word	0xcdef89ab

08000a38 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_FLASH_Lock+0x1c>)
 8000a3e:	691b      	ldr	r3, [r3, #16]
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <HAL_FLASH_Lock+0x1c>)
 8000a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a46:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	40022000 	.word	0x40022000

08000a58 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_FLASH_OB_Unlock+0x2c>)
 8000a5e:	691b      	ldr	r3, [r3, #16]
 8000a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d107      	bne.n	8000a78 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_FLASH_OB_Unlock+0x2c>)
 8000a6a:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <HAL_FLASH_OB_Unlock+0x30>)
 8000a6c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_FLASH_OB_Unlock+0x2c>)
 8000a70:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <HAL_FLASH_OB_Unlock+0x34>)
 8000a72:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8000a74:	2300      	movs	r3, #0
 8000a76:	e000      	b.n	8000a7a <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8000a78:	2301      	movs	r3, #1
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	40022000 	.word	0x40022000
 8000a88:	45670123 	.word	0x45670123
 8000a8c:	cdef89ab 	.word	0xcdef89ab

08000a90 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_FLASH_OB_Lock+0x1c>)
 8000a96:	691b      	ldr	r3, [r3, #16]
 8000a98:	4a04      	ldr	r2, [pc, #16]	; (8000aac <HAL_FLASH_OB_Lock+0x1c>)
 8000a9a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a9e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	40022000 	.word	0x40022000

08000ab0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <FLASH_Program_HalfWord+0x30>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <FLASH_Program_HalfWord+0x34>)
 8000ac4:	691b      	ldr	r3, [r3, #16]
 8000ac6:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <FLASH_Program_HalfWord+0x34>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	887a      	ldrh	r2, [r7, #2]
 8000ad2:	801a      	strh	r2, [r3, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	200000b0 	.word	0x200000b0
 8000ae4:	40022000 	.word	0x40022000

08000ae8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000af0:	f7ff fc28 	bl	8000344 <HAL_GetTick>
 8000af4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000af6:	e010      	b.n	8000b1a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000afe:	d00c      	beq.n	8000b1a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d007      	beq.n	8000b16 <FLASH_WaitForLastOperation+0x2e>
 8000b06:	f7ff fc1d 	bl	8000344 <HAL_GetTick>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d201      	bcs.n	8000b1a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000b16:	2303      	movs	r3, #3
 8000b18:	e01f      	b.n	8000b5a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <FLASH_WaitForLastOperation+0x7c>)
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d0e8      	beq.n	8000af8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <FLASH_WaitForLastOperation+0x7c>)
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	f003 0320 	and.w	r3, r3, #32
 8000b2e:	2b20      	cmp	r3, #32
 8000b30:	d102      	bne.n	8000b38 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <FLASH_WaitForLastOperation+0x7c>)
 8000b34:	2220      	movs	r2, #32
 8000b36:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <FLASH_WaitForLastOperation+0x7c>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	f003 0310 	and.w	r3, r3, #16
 8000b40:	2b10      	cmp	r3, #16
 8000b42:	d005      	beq.n	8000b50 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <FLASH_WaitForLastOperation+0x7c>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b4c:	2b04      	cmp	r3, #4
 8000b4e:	d103      	bne.n	8000b58 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000b50:	f000 f80a 	bl	8000b68 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	e000      	b.n	8000b5a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40022000 	.word	0x40022000

08000b68 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <FLASH_SetErrorCode+0x5c>)
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	f003 0310 	and.w	r3, r3, #16
 8000b7a:	2b10      	cmp	r3, #16
 8000b7c:	d109      	bne.n	8000b92 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000b7e:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <FLASH_SetErrorCode+0x60>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	f043 0302 	orr.w	r3, r3, #2
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <FLASH_SetErrorCode+0x60>)
 8000b88:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f043 0310 	orr.w	r3, r3, #16
 8000b90:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <FLASH_SetErrorCode+0x5c>)
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	d109      	bne.n	8000bb2 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <FLASH_SetErrorCode+0x60>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <FLASH_SetErrorCode+0x60>)
 8000ba8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <FLASH_SetErrorCode+0x5c>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	60d3      	str	r3, [r2, #12]
}  
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	40022000 	.word	0x40022000
 8000bc8:	200000b0 	.word	0x200000b0

08000bcc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000bde:	4b2e      	ldr	r3, [pc, #184]	; (8000c98 <HAL_FLASHEx_Erase+0xcc>)
 8000be0:	7e1b      	ldrb	r3, [r3, #24]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d101      	bne.n	8000bea <HAL_FLASHEx_Erase+0x1e>
 8000be6:	2302      	movs	r3, #2
 8000be8:	e052      	b.n	8000c90 <HAL_FLASHEx_Erase+0xc4>
 8000bea:	4b2b      	ldr	r3, [pc, #172]	; (8000c98 <HAL_FLASHEx_Erase+0xcc>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d115      	bne.n	8000c24 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000bf8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bfc:	f7ff ff74 	bl	8000ae8 <FLASH_WaitForLastOperation>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d140      	bne.n	8000c88 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000c06:	f000 f867 	bl	8000cd8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c0a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c0e:	f7ff ff6b 	bl	8000ae8 <FLASH_WaitForLastOperation>
 8000c12:	4603      	mov	r3, r0
 8000c14:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <HAL_FLASHEx_Erase+0xd0>)
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	4a20      	ldr	r2, [pc, #128]	; (8000c9c <HAL_FLASHEx_Erase+0xd0>)
 8000c1c:	f023 0304 	bic.w	r3, r3, #4
 8000c20:	6113      	str	r3, [r2, #16]
 8000c22:	e031      	b.n	8000c88 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000c24:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c28:	f7ff ff5e 	bl	8000ae8 <FLASH_WaitForLastOperation>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d12a      	bne.n	8000c88 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295
 8000c38:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	e019      	b.n	8000c76 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000c42:	68b8      	ldr	r0, [r7, #8]
 8000c44:	f000 f8a8 	bl	8000d98 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c4c:	f7ff ff4c 	bl	8000ae8 <FLASH_WaitForLastOperation>
 8000c50:	4603      	mov	r3, r0
 8000c52:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_FLASHEx_Erase+0xd0>)
 8000c56:	691b      	ldr	r3, [r3, #16]
 8000c58:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <HAL_FLASHEx_Erase+0xd0>)
 8000c5a:	f023 0302 	bic.w	r3, r3, #2
 8000c5e:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	68ba      	ldr	r2, [r7, #8]
 8000c6a:	601a      	str	r2, [r3, #0]
            break;
 8000c6c:	e00c      	b.n	8000c88 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000c74:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	02da      	lsls	r2, r3, #11
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d3dc      	bcc.n	8000c42 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_FLASHEx_Erase+0xcc>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	761a      	strb	r2, [r3, #24]

  return status;
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200000b0 	.word	0x200000b0
 8000c9c:	40022000 	.word	0x40022000

08000ca0 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2207      	movs	r2, #7
 8000cac:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 8000cae:	f000 f82d 	bl	8000d0c <FLASH_OB_GetWRP>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8000cb8:	f000 f834 	bl	8000d24 <FLASH_OB_GetRDP>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	731a      	strb	r2, [r3, #12]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8000cc4:	f000 f84c 	bl	8000d60 <FLASH_OB_GetUser>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	461a      	mov	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	735a      	strb	r2, [r3, #13]
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <FLASH_MassErase+0x2c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <FLASH_MassErase+0x30>)
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <FLASH_MassErase+0x30>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <FLASH_MassErase+0x30>)
 8000cf0:	691b      	ldr	r3, [r3, #16]
 8000cf2:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <FLASH_MassErase+0x30>)
 8000cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf8:	6113      	str	r3, [r2, #16]
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	200000b0 	.word	0x200000b0
 8000d08:	40022000 	.word	0x40022000

08000d0c <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <FLASH_OB_GetWRP+0x14>)
 8000d12:	6a1b      	ldr	r3, [r3, #32]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40022000 	.word	0x40022000

08000d24 <FLASH_OB_GetRDP>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
  uint32_t tmp_reg = 0U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
  
  /* Read RDP level bits */
#if defined(FLASH_OBR_RDPRT)
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <FLASH_OB_GetRDP+0x38>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	f003 0306 	and.w	r3, r3, #6
 8000d36:	607b      	str	r3, [r7, #4]
#if defined(FLASH_OBR_LEVEL1_PROT)
  tmp_reg = READ_BIT(FLASH->OBR, (FLASH_OBR_LEVEL1_PROT | FLASH_OBR_LEVEL2_PROT));
#endif /* FLASH_OBR_LEVEL1_PROT */

#if defined(FLASH_OBR_RDPRT)
  if (tmp_reg == FLASH_OBR_RDPRT_1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d101      	bne.n	8000d42 <FLASH_OB_GetRDP+0x1e>
#endif
#if defined(FLASH_OBR_LEVEL1_PROT)
  if (tmp_reg == FLASH_OBR_LEVEL1_PROT)
#endif /* FLASH_OBR_LEVEL1_PROT */
  {
    return OB_RDP_LEVEL_1;
 8000d3e:	23bb      	movs	r3, #187	; 0xbb
 8000d40:	e005      	b.n	8000d4e <FLASH_OB_GetRDP+0x2a>
  }
#if   defined(FLASH_OBR_RDPRT)
  else if (tmp_reg == FLASH_OBR_RDPRT_2)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b06      	cmp	r3, #6
 8000d46:	d101      	bne.n	8000d4c <FLASH_OB_GetRDP+0x28>
#elif defined(FLASH_OBR_LEVEL2_PROT)
  else if (tmp_reg == FLASH_OBR_LEVEL2_PROT)
#endif
  {
    return OB_RDP_LEVEL_2;
 8000d48:	23cc      	movs	r3, #204	; 0xcc
 8000d4a:	e000      	b.n	8000d4e <FLASH_OB_GetRDP+0x2a>
  }
  else 
  {
    return OB_RDP_LEVEL_0;
 8000d4c:	23aa      	movs	r3, #170	; 0xaa
  }
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40022000 	.word	0x40022000

08000d60 <FLASH_OB_GetUser>:
  * @retval  The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1), RST_STDBY(Bit2), nBOOT1(Bit4),
  *         VDDA_Analog_Monitoring(Bit5) and SRAM_Parity_Enable(Bit6). 
  *         And SDADC12_VDD_MONITOR(Bit7) for STM32F373 or STM32F378 . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <FLASH_OB_GetUser+0x34>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	f403 43ee 	and.w	r3, r3, #30464	; 0x7700
 8000d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d72:	607a      	str	r2, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	fa92 f2a2 	rbit	r2, r2
 8000d7a:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	fab2 f282 	clz	r2, r2
 8000d82:	40d3      	lsrs	r3, r2
 8000d84:	b2db      	uxtb	r3, r3
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40022000 	.word	0x40022000

08000d98 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <FLASH_PageErase+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <FLASH_PageErase+0x3c>)
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <FLASH_PageErase+0x3c>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <FLASH_PageErase+0x3c>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <FLASH_PageErase+0x3c>)
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <FLASH_PageErase+0x3c>)
 8000dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc2:	6113      	str	r3, [r2, #16]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	200000b0 	.word	0x200000b0
 8000dd4:	40022000 	.word	0x40022000

08000dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b087      	sub	sp, #28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000dee:	e160      	b.n	80010b2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	2101      	movs	r1, #1
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 8152 	beq.w	80010ac <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x40>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b12      	cmp	r3, #18
 8000e16:	d123      	bne.n	8000e60 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	08da      	lsrs	r2, r3, #3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3208      	adds	r2, #8
 8000e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	220f      	movs	r2, #15
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	691a      	ldr	r2, [r3, #16]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	08da      	lsrs	r2, r3, #3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3208      	adds	r2, #8
 8000e5a:	6939      	ldr	r1, [r7, #16]
 8000e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0203 	and.w	r2, r3, #3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d00b      	beq.n	8000eb4 <HAL_GPIO_Init+0xdc>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d007      	beq.n	8000eb4 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea8:	2b11      	cmp	r3, #17
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b12      	cmp	r3, #18
 8000eb2:	d130      	bne.n	8000f16 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	68da      	ldr	r2, [r3, #12]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eea:	2201      	movs	r2, #1
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	091b      	lsrs	r3, r3, #4
 8000f00:	f003 0201 	and.w	r2, r3, #1
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2203      	movs	r2, #3
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 80ac 	beq.w	80010ac <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f54:	4b5e      	ldr	r3, [pc, #376]	; (80010d0 <HAL_GPIO_Init+0x2f8>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a5d      	ldr	r2, [pc, #372]	; (80010d0 <HAL_GPIO_Init+0x2f8>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b5b      	ldr	r3, [pc, #364]	; (80010d0 <HAL_GPIO_Init+0x2f8>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f6c:	4a59      	ldr	r2, [pc, #356]	; (80010d4 <HAL_GPIO_Init+0x2fc>)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f96:	d025      	beq.n	8000fe4 <HAL_GPIO_Init+0x20c>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a4f      	ldr	r2, [pc, #316]	; (80010d8 <HAL_GPIO_Init+0x300>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d01f      	beq.n	8000fe0 <HAL_GPIO_Init+0x208>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a4e      	ldr	r2, [pc, #312]	; (80010dc <HAL_GPIO_Init+0x304>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d019      	beq.n	8000fdc <HAL_GPIO_Init+0x204>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a4d      	ldr	r2, [pc, #308]	; (80010e0 <HAL_GPIO_Init+0x308>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d013      	beq.n	8000fd8 <HAL_GPIO_Init+0x200>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a4c      	ldr	r2, [pc, #304]	; (80010e4 <HAL_GPIO_Init+0x30c>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d00d      	beq.n	8000fd4 <HAL_GPIO_Init+0x1fc>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a4b      	ldr	r2, [pc, #300]	; (80010e8 <HAL_GPIO_Init+0x310>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d007      	beq.n	8000fd0 <HAL_GPIO_Init+0x1f8>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a4a      	ldr	r2, [pc, #296]	; (80010ec <HAL_GPIO_Init+0x314>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d101      	bne.n	8000fcc <HAL_GPIO_Init+0x1f4>
 8000fc8:	2306      	movs	r3, #6
 8000fca:	e00c      	b.n	8000fe6 <HAL_GPIO_Init+0x20e>
 8000fcc:	2307      	movs	r3, #7
 8000fce:	e00a      	b.n	8000fe6 <HAL_GPIO_Init+0x20e>
 8000fd0:	2305      	movs	r3, #5
 8000fd2:	e008      	b.n	8000fe6 <HAL_GPIO_Init+0x20e>
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	e006      	b.n	8000fe6 <HAL_GPIO_Init+0x20e>
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e004      	b.n	8000fe6 <HAL_GPIO_Init+0x20e>
 8000fdc:	2302      	movs	r3, #2
 8000fde:	e002      	b.n	8000fe6 <HAL_GPIO_Init+0x20e>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <HAL_GPIO_Init+0x20e>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	f002 0203 	and.w	r2, r2, #3
 8000fec:	0092      	lsls	r2, r2, #2
 8000fee:	4093      	lsls	r3, r2
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ff6:	4937      	ldr	r1, [pc, #220]	; (80010d4 <HAL_GPIO_Init+0x2fc>)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001004:	4b3a      	ldr	r3, [pc, #232]	; (80010f0 <HAL_GPIO_Init+0x318>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001028:	4a31      	ldr	r2, [pc, #196]	; (80010f0 <HAL_GPIO_Init+0x318>)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800102e:	4b30      	ldr	r3, [pc, #192]	; (80010f0 <HAL_GPIO_Init+0x318>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001052:	4a27      	ldr	r2, [pc, #156]	; (80010f0 <HAL_GPIO_Init+0x318>)
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <HAL_GPIO_Init+0x318>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43db      	mvns	r3, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800107c:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <HAL_GPIO_Init+0x318>)
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001082:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <HAL_GPIO_Init+0x318>)
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x2ce>
        {
          temp |= iocurrent;
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <HAL_GPIO_Init+0x318>)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	fa22 f303 	lsr.w	r3, r2, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f47f ae97 	bne.w	8000df0 <HAL_GPIO_Init+0x18>
  }
}
 80010c2:	bf00      	nop
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010000 	.word	0x40010000
 80010d8:	48000400 	.word	0x48000400
 80010dc:	48000800 	.word	0x48000800
 80010e0:	48000c00 	.word	0x48000c00
 80010e4:	48001000 	.word	0x48001000
 80010e8:	48001400 	.word	0x48001400
 80010ec:	48001800 	.word	0x48001800
 80010f0:	40010400 	.word	0x40010400

080010f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691a      	ldr	r2, [r3, #16]
 8001104:	887b      	ldrh	r3, [r7, #2]
 8001106:	4013      	ands	r3, r2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800110c:	2301      	movs	r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	e001      	b.n	8001116 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	807b      	strh	r3, [r7, #2]
 8001130:	4613      	mov	r3, r2
 8001132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001134:	787b      	ldrb	r3, [r7, #1]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001140:	e002      	b.n	8001148 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001142:	887a      	ldrh	r2, [r7, #2]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800115a:	af00      	add	r7, sp, #0
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	f000 beda 	b.w	8001f22 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 8164 	beq.w	8001446 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800117e:	4bb0      	ldr	r3, [pc, #704]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b04      	cmp	r3, #4
 8001188:	d00c      	beq.n	80011a4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800118a:	4bad      	ldr	r3, [pc, #692]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	2b08      	cmp	r3, #8
 8001194:	d15a      	bne.n	800124c <HAL_RCC_OscConfig+0xf8>
 8001196:	4baa      	ldr	r3, [pc, #680]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800119e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a2:	d153      	bne.n	800124c <HAL_RCC_OscConfig+0xf8>
 80011a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80011b0:	fa93 f3a3 	rbit	r3, r3
 80011b4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return(result);
 80011b8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011bc:	fab3 f383 	clz	r3, r3
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d102      	bne.n	80011d6 <HAL_RCC_OscConfig+0x82>
 80011d0:	4b9b      	ldr	r3, [pc, #620]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	e015      	b.n	8001202 <HAL_RCC_OscConfig+0xae>
 80011d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011da:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80011e2:	fa93 f3a3 	rbit	r3, r3
 80011e6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80011ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ee:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80011f2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80011f6:	fa93 f3a3 	rbit	r3, r3
 80011fa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80011fe:	4b90      	ldr	r3, [pc, #576]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001206:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800120a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800120e:	fa92 f2a2 	rbit	r2, r2
 8001212:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8001216:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800121a:	fab2 f282 	clz	r2, r2
 800121e:	b252      	sxtb	r2, r2
 8001220:	f042 0220 	orr.w	r2, r2, #32
 8001224:	b252      	sxtb	r2, r2
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	f002 021f 	and.w	r2, r2, #31
 800122c:	2101      	movs	r1, #1
 800122e:	fa01 f202 	lsl.w	r2, r1, r2
 8001232:	4013      	ands	r3, r2
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 8105 	beq.w	8001444 <HAL_RCC_OscConfig+0x2f0>
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	f040 80ff 	bne.w	8001444 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	f000 be6b 	b.w	8001f22 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001256:	d106      	bne.n	8001266 <HAL_RCC_OscConfig+0x112>
 8001258:	4b79      	ldr	r3, [pc, #484]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a78      	ldr	r2, [pc, #480]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 800125e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	e030      	b.n	80012c8 <HAL_RCC_OscConfig+0x174>
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10c      	bne.n	800128a <HAL_RCC_OscConfig+0x136>
 8001270:	4b73      	ldr	r3, [pc, #460]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a72      	ldr	r2, [pc, #456]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 8001276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b70      	ldr	r3, [pc, #448]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a6f      	ldr	r2, [pc, #444]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 8001282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e01e      	b.n	80012c8 <HAL_RCC_OscConfig+0x174>
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001294:	d10c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x15c>
 8001296:	4b6a      	ldr	r3, [pc, #424]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a69      	ldr	r2, [pc, #420]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 800129c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	4b67      	ldr	r3, [pc, #412]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a66      	ldr	r2, [pc, #408]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 80012a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e00b      	b.n	80012c8 <HAL_RCC_OscConfig+0x174>
 80012b0:	4b63      	ldr	r3, [pc, #396]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a62      	ldr	r2, [pc, #392]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 80012b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	4b60      	ldr	r3, [pc, #384]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a5f      	ldr	r2, [pc, #380]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 80012c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d05a      	beq.n	8001388 <HAL_RCC_OscConfig+0x234>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d2:	f7ff f837 	bl	8000344 <HAL_GetTick>
 80012d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	e00a      	b.n	80012f2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff f832 	bl	8000344 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b64      	cmp	r3, #100	; 0x64
 80012ea:	d902      	bls.n	80012f2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	f000 be18 	b.w	8001f22 <HAL_RCC_OscConfig+0xdce>
 80012f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012f6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fa:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80012fe:	fa93 f3a3 	rbit	r3, r3
 8001302:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8001306:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	fab3 f383 	clz	r3, r3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	095b      	lsrs	r3, r3, #5
 8001312:	b2db      	uxtb	r3, r3
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b01      	cmp	r3, #1
 800131c:	d102      	bne.n	8001324 <HAL_RCC_OscConfig+0x1d0>
 800131e:	4b48      	ldr	r3, [pc, #288]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	e015      	b.n	8001350 <HAL_RCC_OscConfig+0x1fc>
 8001324:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001328:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001330:	fa93 f3a3 	rbit	r3, r3
 8001334:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001338:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800133c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001340:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001344:	fa93 f3a3 	rbit	r3, r3
 8001348:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800134c:	4b3c      	ldr	r3, [pc, #240]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001354:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001358:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800135c:	fa92 f2a2 	rbit	r2, r2
 8001360:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001364:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001368:	fab2 f282 	clz	r2, r2
 800136c:	b252      	sxtb	r2, r2
 800136e:	f042 0220 	orr.w	r2, r2, #32
 8001372:	b252      	sxtb	r2, r2
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	f002 021f 	and.w	r2, r2, #31
 800137a:	2101      	movs	r1, #1
 800137c:	fa01 f202 	lsl.w	r2, r1, r2
 8001380:	4013      	ands	r3, r2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0aa      	beq.n	80012dc <HAL_RCC_OscConfig+0x188>
 8001386:	e05e      	b.n	8001446 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7fe ffdc 	bl	8000344 <HAL_GetTick>
 800138c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001390:	e00a      	b.n	80013a8 <HAL_RCC_OscConfig+0x254>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001392:	f7fe ffd7 	bl	8000344 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	; 0x64
 80013a0:	d902      	bls.n	80013a8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	f000 bdbd 	b.w	8001f22 <HAL_RCC_OscConfig+0xdce>
 80013a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ac:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80013b4:	fa93 f3a3 	rbit	r3, r3
 80013b8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 80013bc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c0:	fab3 f383 	clz	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d102      	bne.n	80013da <HAL_RCC_OscConfig+0x286>
 80013d4:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	e015      	b.n	8001406 <HAL_RCC_OscConfig+0x2b2>
 80013da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013de:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80013e6:	fa93 f3a3 	rbit	r3, r3
 80013ea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80013ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013f2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80013f6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80013fa:	fa93 f3a3 	rbit	r3, r3
 80013fe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <HAL_RCC_OscConfig+0x2ec>)
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800140a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800140e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001412:	fa92 f2a2 	rbit	r2, r2
 8001416:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 800141a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800141e:	fab2 f282 	clz	r2, r2
 8001422:	b252      	sxtb	r2, r2
 8001424:	f042 0220 	orr.w	r2, r2, #32
 8001428:	b252      	sxtb	r2, r2
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	f002 021f 	and.w	r2, r2, #31
 8001430:	2101      	movs	r1, #1
 8001432:	fa01 f202 	lsl.w	r2, r1, r2
 8001436:	4013      	ands	r3, r2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1aa      	bne.n	8001392 <HAL_RCC_OscConfig+0x23e>
 800143c:	e003      	b.n	8001446 <HAL_RCC_OscConfig+0x2f2>
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 8171 	beq.w	8001738 <HAL_RCC_OscConfig+0x5e4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001456:	4bd0      	ldr	r3, [pc, #832]	; (8001798 <HAL_RCC_OscConfig+0x644>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00c      	beq.n	800147c <HAL_RCC_OscConfig+0x328>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001462:	4bcd      	ldr	r3, [pc, #820]	; (8001798 <HAL_RCC_OscConfig+0x644>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	2b08      	cmp	r3, #8
 800146c:	d16e      	bne.n	800154c <HAL_RCC_OscConfig+0x3f8>
 800146e:	4bca      	ldr	r3, [pc, #808]	; (8001798 <HAL_RCC_OscConfig+0x644>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800147a:	d167      	bne.n	800154c <HAL_RCC_OscConfig+0x3f8>
 800147c:	2302      	movs	r3, #2
 800147e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001482:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001486:	fa93 f3a3 	rbit	r3, r3
 800148a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 800148e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001492:	fab3 f383 	clz	r3, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	095b      	lsrs	r3, r3, #5
 800149a:	b2db      	uxtb	r3, r3
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d102      	bne.n	80014ac <HAL_RCC_OscConfig+0x358>
 80014a6:	4bbc      	ldr	r3, [pc, #752]	; (8001798 <HAL_RCC_OscConfig+0x644>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	e013      	b.n	80014d4 <HAL_RCC_OscConfig+0x380>
 80014ac:	2302      	movs	r3, #2
 80014ae:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014b6:	fa93 f3a3 	rbit	r3, r3
 80014ba:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80014be:	2302      	movs	r3, #2
 80014c0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80014c4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80014c8:	fa93 f3a3 	rbit	r3, r3
 80014cc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80014d0:	4bb1      	ldr	r3, [pc, #708]	; (8001798 <HAL_RCC_OscConfig+0x644>)
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	2202      	movs	r2, #2
 80014d6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80014da:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80014de:	fa92 f2a2 	rbit	r2, r2
 80014e2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 80014e6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80014ea:	fab2 f282 	clz	r2, r2
 80014ee:	b252      	sxtb	r2, r2
 80014f0:	f042 0220 	orr.w	r2, r2, #32
 80014f4:	b252      	sxtb	r2, r2
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	f002 021f 	and.w	r2, r2, #31
 80014fc:	2101      	movs	r1, #1
 80014fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001502:	4013      	ands	r3, r2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d007      	beq.n	8001518 <HAL_RCC_OscConfig+0x3c4>
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d002      	beq.n	8001518 <HAL_RCC_OscConfig+0x3c4>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	f000 bd05 	b.w	8001f22 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001518:	4b9f      	ldr	r3, [pc, #636]	; (8001798 <HAL_RCC_OscConfig+0x644>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6919      	ldr	r1, [r3, #16]
 8001526:	23f8      	movs	r3, #248	; 0xf8
 8001528:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001530:	fa93 f3a3 	rbit	r3, r3
 8001534:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8001538:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800153c:	fab3 f383 	clz	r3, r3
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	4994      	ldr	r1, [pc, #592]	; (8001798 <HAL_RCC_OscConfig+0x644>)
 8001546:	4313      	orrs	r3, r2
 8001548:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154a:	e0f5      	b.n	8001738 <HAL_RCC_OscConfig+0x5e4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8085 	beq.w	8001662 <HAL_RCC_OscConfig+0x50e>
 8001558:	2301      	movs	r3, #1
 800155a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001562:	fa93 f3a3 	rbit	r3, r3
 8001566:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 800156a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800156e:	fab3 f383 	clz	r3, r3
 8001572:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001576:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	461a      	mov	r2, r3
 800157e:	2301      	movs	r3, #1
 8001580:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7fe fedf 	bl	8000344 <HAL_GetTick>
 8001586:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158a:	e00a      	b.n	80015a2 <HAL_RCC_OscConfig+0x44e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800158c:	f7fe feda 	bl	8000344 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d902      	bls.n	80015a2 <HAL_RCC_OscConfig+0x44e>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	f000 bcc0 	b.w	8001f22 <HAL_RCC_OscConfig+0xdce>
 80015a2:	2302      	movs	r3, #2
 80015a4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80015ac:	fa93 f3a3 	rbit	r3, r3
 80015b0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 80015b4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b8:	fab3 f383 	clz	r3, r3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d102      	bne.n	80015d2 <HAL_RCC_OscConfig+0x47e>
 80015cc:	4b72      	ldr	r3, [pc, #456]	; (8001798 <HAL_RCC_OscConfig+0x644>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	e013      	b.n	80015fa <HAL_RCC_OscConfig+0x4a6>
 80015d2:	2302      	movs	r3, #2
 80015d4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80015dc:	fa93 f3a3 	rbit	r3, r3
 80015e0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80015e4:	2302      	movs	r3, #2
 80015e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80015ea:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80015ee:	fa93 f3a3 	rbit	r3, r3
 80015f2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80015f6:	4b68      	ldr	r3, [pc, #416]	; (8001798 <HAL_RCC_OscConfig+0x644>)
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	2202      	movs	r2, #2
 80015fc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001600:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001604:	fa92 f2a2 	rbit	r2, r2
 8001608:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 800160c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001610:	fab2 f282 	clz	r2, r2
 8001614:	b252      	sxtb	r2, r2
 8001616:	f042 0220 	orr.w	r2, r2, #32
 800161a:	b252      	sxtb	r2, r2
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	f002 021f 	and.w	r2, r2, #31
 8001622:	2101      	movs	r1, #1
 8001624:	fa01 f202 	lsl.w	r2, r1, r2
 8001628:	4013      	ands	r3, r2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0ae      	beq.n	800158c <HAL_RCC_OscConfig+0x438>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162e:	4b5a      	ldr	r3, [pc, #360]	; (8001798 <HAL_RCC_OscConfig+0x644>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6919      	ldr	r1, [r3, #16]
 800163c:	23f8      	movs	r3, #248	; 0xf8
 800163e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001642:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001646:	fa93 f3a3 	rbit	r3, r3
 800164a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 800164e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001652:	fab3 f383 	clz	r3, r3
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	494f      	ldr	r1, [pc, #316]	; (8001798 <HAL_RCC_OscConfig+0x644>)
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
 8001660:	e06a      	b.n	8001738 <HAL_RCC_OscConfig+0x5e4>
 8001662:	2301      	movs	r3, #1
 8001664:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800166c:	fa93 f3a3 	rbit	r3, r3
 8001670:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8001674:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001678:	fab3 f383 	clz	r3, r3
 800167c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001680:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	461a      	mov	r2, r3
 8001688:	2300      	movs	r3, #0
 800168a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7fe fe5a 	bl	8000344 <HAL_GetTick>
 8001690:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_OscConfig+0x558>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001696:	f7fe fe55 	bl	8000344 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d902      	bls.n	80016ac <HAL_RCC_OscConfig+0x558>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	f000 bc3b 	b.w	8001f22 <HAL_RCC_OscConfig+0xdce>
 80016ac:	2302      	movs	r3, #2
 80016ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80016b6:	fa93 f3a3 	rbit	r3, r3
 80016ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 80016be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c2:	fab3 f383 	clz	r3, r3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	095b      	lsrs	r3, r3, #5
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d102      	bne.n	80016dc <HAL_RCC_OscConfig+0x588>
 80016d6:	4b30      	ldr	r3, [pc, #192]	; (8001798 <HAL_RCC_OscConfig+0x644>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	e013      	b.n	8001704 <HAL_RCC_OscConfig+0x5b0>
 80016dc:	2302      	movs	r3, #2
 80016de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80016e6:	fa93 f3a3 	rbit	r3, r3
 80016ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80016ee:	2302      	movs	r3, #2
 80016f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80016f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016f8:	fa93 f3a3 	rbit	r3, r3
 80016fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001700:	4b25      	ldr	r3, [pc, #148]	; (8001798 <HAL_RCC_OscConfig+0x644>)
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	2202      	movs	r2, #2
 8001706:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800170a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800170e:	fa92 f2a2 	rbit	r2, r2
 8001712:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001716:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800171a:	fab2 f282 	clz	r2, r2
 800171e:	b252      	sxtb	r2, r2
 8001720:	f042 0220 	orr.w	r2, r2, #32
 8001724:	b252      	sxtb	r2, r2
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	f002 021f 	and.w	r2, r2, #31
 800172c:	2101      	movs	r1, #1
 800172e:	fa01 f202 	lsl.w	r2, r1, r2
 8001732:	4013      	ands	r3, r2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1ae      	bne.n	8001696 <HAL_RCC_OscConfig+0x542>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 80d7 	beq.w	80018f6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d066      	beq.n	8001820 <HAL_RCC_OscConfig+0x6cc>
 8001752:	2301      	movs	r3, #1
 8001754:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800175c:	fa93 f3a3 	rbit	r3, r3
 8001760:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8001764:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001768:	fab3 f383 	clz	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_RCC_OscConfig+0x648>)
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	461a      	mov	r2, r3
 8001776:	2301      	movs	r3, #1
 8001778:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177a:	f7fe fde3 	bl	8000344 <HAL_GetTick>
 800177e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001782:	e00d      	b.n	80017a0 <HAL_RCC_OscConfig+0x64c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001784:	f7fe fdde 	bl	8000344 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d905      	bls.n	80017a0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e3c4      	b.n	8001f22 <HAL_RCC_OscConfig+0xdce>
 8001798:	40021000 	.word	0x40021000
 800179c:	10908120 	.word	0x10908120
 80017a0:	2302      	movs	r3, #2
 80017a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80017b2:	2302      	movs	r3, #2
 80017b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80017b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80017bc:	fa93 f2a3 	rbit	r2, r3
 80017c0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80017ca:	2202      	movs	r2, #2
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	fa93 f2a3 	rbit	r2, r3
 80017d8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	4ba5      	ldr	r3, [pc, #660]	; (8001a74 <HAL_RCC_OscConfig+0x920>)
 80017e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017e2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017e6:	2102      	movs	r1, #2
 80017e8:	6019      	str	r1, [r3, #0]
 80017ea:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	fa93 f1a3 	rbit	r1, r3
 80017f4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017f8:	6019      	str	r1, [r3, #0]
  return(result);
 80017fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	fab3 f383 	clz	r3, r3
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800180a:	b25b      	sxtb	r3, r3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	f003 031f 	and.w	r3, r3, #31
 8001812:	2101      	movs	r1, #1
 8001814:	fa01 f303 	lsl.w	r3, r1, r3
 8001818:	4013      	ands	r3, r2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0b2      	beq.n	8001784 <HAL_RCC_OscConfig+0x630>
 800181e:	e06a      	b.n	80018f6 <HAL_RCC_OscConfig+0x7a2>
 8001820:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001824:	2201      	movs	r2, #1
 8001826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001828:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	fa93 f2a3 	rbit	r2, r3
 8001832:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001836:	601a      	str	r2, [r3, #0]
  return(result);
 8001838:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800183c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183e:	fab3 f383 	clz	r3, r3
 8001842:	461a      	mov	r2, r3
 8001844:	4b8c      	ldr	r3, [pc, #560]	; (8001a78 <HAL_RCC_OscConfig+0x924>)
 8001846:	4413      	add	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	461a      	mov	r2, r3
 800184c:	2300      	movs	r3, #0
 800184e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001850:	f7fe fd78 	bl	8000344 <HAL_GetTick>
 8001854:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001858:	e009      	b.n	800186e <HAL_RCC_OscConfig+0x71a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800185a:	f7fe fd73 	bl	8000344 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e359      	b.n	8001f22 <HAL_RCC_OscConfig+0xdce>
 800186e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001872:	2202      	movs	r2, #2
 8001874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001876:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	fa93 f2a3 	rbit	r2, r3
 8001880:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800188a:	2202      	movs	r2, #2
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	fa93 f2a3 	rbit	r2, r3
 8001898:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018a2:	2202      	movs	r2, #2
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	fa93 f2a3 	rbit	r2, r3
 80018b0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b6:	4b6f      	ldr	r3, [pc, #444]	; (8001a74 <HAL_RCC_OscConfig+0x920>)
 80018b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018be:	2102      	movs	r1, #2
 80018c0:	6019      	str	r1, [r3, #0]
 80018c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	fa93 f1a3 	rbit	r1, r3
 80018cc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018d0:	6019      	str	r1, [r3, #0]
  return(result);
 80018d2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	b25b      	sxtb	r3, r3
 80018de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018e2:	b25b      	sxtb	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	f003 031f 	and.w	r3, r3, #31
 80018ea:	2101      	movs	r1, #1
 80018ec:	fa01 f303 	lsl.w	r3, r1, r3
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1b1      	bne.n	800185a <HAL_RCC_OscConfig+0x706>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 8159 	beq.w	8001bb8 <HAL_RCC_OscConfig+0xa64>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190c:	4b59      	ldr	r3, [pc, #356]	; (8001a74 <HAL_RCC_OscConfig+0x920>)
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d112      	bne.n	800193e <HAL_RCC_OscConfig+0x7ea>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001918:	4b56      	ldr	r3, [pc, #344]	; (8001a74 <HAL_RCC_OscConfig+0x920>)
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	4a55      	ldr	r2, [pc, #340]	; (8001a74 <HAL_RCC_OscConfig+0x920>)
 800191e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001922:	61d3      	str	r3, [r2, #28]
 8001924:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_RCC_OscConfig+0x920>)
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	f107 030c 	add.w	r3, r7, #12
 8001936:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001938:	2301      	movs	r3, #1
 800193a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193e:	4b4f      	ldr	r3, [pc, #316]	; (8001a7c <HAL_RCC_OscConfig+0x928>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001946:	2b00      	cmp	r3, #0
 8001948:	d11a      	bne.n	8001980 <HAL_RCC_OscConfig+0x82c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194a:	4b4c      	ldr	r3, [pc, #304]	; (8001a7c <HAL_RCC_OscConfig+0x928>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a4b      	ldr	r2, [pc, #300]	; (8001a7c <HAL_RCC_OscConfig+0x928>)
 8001950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001954:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001956:	f7fe fcf5 	bl	8000344 <HAL_GetTick>
 800195a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195e:	e009      	b.n	8001974 <HAL_RCC_OscConfig+0x820>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001960:	f7fe fcf0 	bl	8000344 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b64      	cmp	r3, #100	; 0x64
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x820>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e2d6      	b.n	8001f22 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	4b41      	ldr	r3, [pc, #260]	; (8001a7c <HAL_RCC_OscConfig+0x928>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0ef      	beq.n	8001960 <HAL_RCC_OscConfig+0x80c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d106      	bne.n	8001998 <HAL_RCC_OscConfig+0x844>
 800198a:	4b3a      	ldr	r3, [pc, #232]	; (8001a74 <HAL_RCC_OscConfig+0x920>)
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	4a39      	ldr	r2, [pc, #228]	; (8001a74 <HAL_RCC_OscConfig+0x920>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6213      	str	r3, [r2, #32]
 8001996:	e02f      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10c      	bne.n	80019bc <HAL_RCC_OscConfig+0x868>
 80019a2:	4b34      	ldr	r3, [pc, #208]	; (8001a74 <HAL_RCC_OscConfig+0x920>)
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	4a33      	ldr	r2, [pc, #204]	; (8001a74 <HAL_RCC_OscConfig+0x920>)
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	6213      	str	r3, [r2, #32]
 80019ae:	4b31      	ldr	r3, [pc, #196]	; (8001a74 <HAL_RCC_OscConfig+0x920>)
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4a30      	ldr	r2, [pc, #192]	; (8001a74 <HAL_RCC_OscConfig+0x920>)
 80019b4:	f023 0304 	bic.w	r3, r3, #4
 80019b8:	6213      	str	r3, [r2, #32]
 80019ba:	e01d      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b05      	cmp	r3, #5
 80019c4:	d10c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x88c>
 80019c6:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <HAL_RCC_OscConfig+0x920>)
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	4a2a      	ldr	r2, [pc, #168]	; (8001a74 <HAL_RCC_OscConfig+0x920>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	6213      	str	r3, [r2, #32]
 80019d2:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <HAL_RCC_OscConfig+0x920>)
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	4a27      	ldr	r2, [pc, #156]	; (8001a74 <HAL_RCC_OscConfig+0x920>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6213      	str	r3, [r2, #32]
 80019de:	e00b      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
 80019e0:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_RCC_OscConfig+0x920>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	4a23      	ldr	r2, [pc, #140]	; (8001a74 <HAL_RCC_OscConfig+0x920>)
 80019e6:	f023 0301 	bic.w	r3, r3, #1
 80019ea:	6213      	str	r3, [r2, #32]
 80019ec:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <HAL_RCC_OscConfig+0x920>)
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	4a20      	ldr	r2, [pc, #128]	; (8001a74 <HAL_RCC_OscConfig+0x920>)
 80019f2:	f023 0304 	bic.w	r3, r3, #4
 80019f6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d06b      	beq.n	8001ada <HAL_RCC_OscConfig+0x986>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a02:	f7fe fc9f 	bl	8000344 <HAL_GetTick>
 8001a06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0a:	e00b      	b.n	8001a24 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0c:	f7fe fc9a 	bl	8000344 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e27e      	b.n	8001f22 <HAL_RCC_OscConfig+0xdce>
 8001a24:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a28:	2202      	movs	r2, #2
 8001a2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	fa93 f2a3 	rbit	r2, r3
 8001a36:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a40:	2202      	movs	r2, #2
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	fa93 f2a3 	rbit	r2, r3
 8001a4e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a52:	601a      	str	r2, [r3, #0]
  return(result);
 8001a54:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a58:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5a:	fab3 f383 	clz	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	095b      	lsrs	r3, r3, #5
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d108      	bne.n	8001a80 <HAL_RCC_OscConfig+0x92c>
 8001a6e:	4b01      	ldr	r3, [pc, #4]	; (8001a74 <HAL_RCC_OscConfig+0x920>)
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	e013      	b.n	8001a9c <HAL_RCC_OscConfig+0x948>
 8001a74:	40021000 	.word	0x40021000
 8001a78:	10908120 	.word	0x10908120
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a84:	2202      	movs	r2, #2
 8001a86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	fa93 f2a3 	rbit	r2, r3
 8001a92:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	4bc0      	ldr	r3, [pc, #768]	; (8001d9c <HAL_RCC_OscConfig+0xc48>)
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	6011      	str	r1, [r2, #0]
 8001aa4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	fa92 f1a2 	rbit	r1, r2
 8001aae:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ab2:	6011      	str	r1, [r2, #0]
  return(result);
 8001ab4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	fab2 f282 	clz	r2, r2
 8001abe:	b252      	sxtb	r2, r2
 8001ac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ac4:	b252      	sxtb	r2, r2
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	f002 021f 	and.w	r2, r2, #31
 8001acc:	2101      	movs	r1, #1
 8001ace:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d099      	beq.n	8001a0c <HAL_RCC_OscConfig+0x8b8>
 8001ad8:	e064      	b.n	8001ba4 <HAL_RCC_OscConfig+0xa50>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ada:	f7fe fc33 	bl	8000344 <HAL_GetTick>
 8001ade:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae2:	e00b      	b.n	8001afc <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae4:	f7fe fc2e 	bl	8000344 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e212      	b.n	8001f22 <HAL_RCC_OscConfig+0xdce>
 8001afc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b00:	2202      	movs	r2, #2
 8001b02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	fa93 f2a3 	rbit	r2, r3
 8001b0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b18:	2202      	movs	r2, #2
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	fa93 f2a3 	rbit	r2, r3
 8001b26:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b2a:	601a      	str	r2, [r3, #0]
  return(result);
 8001b2c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b30:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	095b      	lsrs	r3, r3, #5
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d102      	bne.n	8001b4c <HAL_RCC_OscConfig+0x9f8>
 8001b46:	4b95      	ldr	r3, [pc, #596]	; (8001d9c <HAL_RCC_OscConfig+0xc48>)
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	e00d      	b.n	8001b68 <HAL_RCC_OscConfig+0xa14>
 8001b4c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b50:	2202      	movs	r2, #2
 8001b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	fa93 f2a3 	rbit	r2, r3
 8001b5e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	4b8d      	ldr	r3, [pc, #564]	; (8001d9c <HAL_RCC_OscConfig+0xc48>)
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001b6c:	2102      	movs	r1, #2
 8001b6e:	6011      	str	r1, [r2, #0]
 8001b70:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	fa92 f1a2 	rbit	r1, r2
 8001b7a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b7e:	6011      	str	r1, [r2, #0]
  return(result);
 8001b80:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	fab2 f282 	clz	r2, r2
 8001b8a:	b252      	sxtb	r2, r2
 8001b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b90:	b252      	sxtb	r2, r2
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	f002 021f 	and.w	r2, r2, #31
 8001b98:	2101      	movs	r1, #1
 8001b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d19f      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x990>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ba4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d105      	bne.n	8001bb8 <HAL_RCC_OscConfig+0xa64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bac:	4b7b      	ldr	r3, [pc, #492]	; (8001d9c <HAL_RCC_OscConfig+0xc48>)
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	4a7a      	ldr	r2, [pc, #488]	; (8001d9c <HAL_RCC_OscConfig+0xc48>)
 8001bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 81ae 	beq.w	8001f20 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bc4:	4b75      	ldr	r3, [pc, #468]	; (8001d9c <HAL_RCC_OscConfig+0xc48>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	f000 81a5 	beq.w	8001f1c <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	f040 811d 	bne.w	8001e18 <HAL_RCC_OscConfig+0xcc4>
 8001bde:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001be2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001be6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	fa93 f2a3 	rbit	r2, r3
 8001bf2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bf6:	601a      	str	r2, [r3, #0]
  return(result);
 8001bf8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bfc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	2300      	movs	r3, #0
 8001c10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7fe fb97 	bl	8000344 <HAL_GetTick>
 8001c16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1a:	e009      	b.n	8001c30 <HAL_RCC_OscConfig+0xadc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7fe fb92 	bl	8000344 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0xadc>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e178      	b.n	8001f22 <HAL_RCC_OscConfig+0xdce>
 8001c30:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	fa93 f2a3 	rbit	r2, r3
 8001c44:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c48:	601a      	str	r2, [r3, #0]
  return(result);
 8001c4a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d102      	bne.n	8001c6a <HAL_RCC_OscConfig+0xb16>
 8001c64:	4b4d      	ldr	r3, [pc, #308]	; (8001d9c <HAL_RCC_OscConfig+0xc48>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	e01b      	b.n	8001ca2 <HAL_RCC_OscConfig+0xb4e>
 8001c6a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	fa93 f2a3 	rbit	r2, r3
 8001c7e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	fa93 f2a3 	rbit	r2, r3
 8001c98:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	4b3f      	ldr	r3, [pc, #252]	; (8001d9c <HAL_RCC_OscConfig+0xc48>)
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001ca6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001caa:	6011      	str	r1, [r2, #0]
 8001cac:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	fa92 f1a2 	rbit	r1, r2
 8001cb6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cba:	6011      	str	r1, [r2, #0]
  return(result);
 8001cbc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	fab2 f282 	clz	r2, r2
 8001cc6:	b252      	sxtb	r2, r2
 8001cc8:	f042 0220 	orr.w	r2, r2, #32
 8001ccc:	b252      	sxtb	r2, r2
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	f002 021f 	and.w	r2, r2, #31
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d19d      	bne.n	8001c1c <HAL_RCC_OscConfig+0xac8>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce0:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <HAL_RCC_OscConfig+0xc48>)
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	f023 020f 	bic.w	r2, r3, #15
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	492b      	ldr	r1, [pc, #172]	; (8001d9c <HAL_RCC_OscConfig+0xc48>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001cf4:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <HAL_RCC_OscConfig+0xc48>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6a19      	ldr	r1, [r3, #32]
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	4924      	ldr	r1, [pc, #144]	; (8001d9c <HAL_RCC_OscConfig+0xc48>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
 8001d10:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	fa93 f2a3 	rbit	r2, r3
 8001d24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d28:	601a      	str	r2, [r3, #0]
  return(result);
 8001d2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d2e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2301      	movs	r3, #1
 8001d42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7fe fafe 	bl	8000344 <HAL_GetTick>
 8001d48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d4c:	e009      	b.n	8001d62 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d4e:	f7fe faf9 	bl	8000344 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e0df      	b.n	8001f22 <HAL_RCC_OscConfig+0xdce>
 8001d62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	fa93 f2a3 	rbit	r2, r3
 8001d76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d7a:	601a      	str	r2, [r3, #0]
  return(result);
 8001d7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d82:	fab3 f383 	clz	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	095b      	lsrs	r3, r3, #5
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d104      	bne.n	8001da0 <HAL_RCC_OscConfig+0xc4c>
 8001d96:	4b01      	ldr	r3, [pc, #4]	; (8001d9c <HAL_RCC_OscConfig+0xc48>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	e01d      	b.n	8001dd8 <HAL_RCC_OscConfig+0xc84>
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001da4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	fa93 f2a3 	rbit	r2, r3
 8001db4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	fa93 f2a3 	rbit	r2, r3
 8001dce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	4b55      	ldr	r3, [pc, #340]	; (8001f2c <HAL_RCC_OscConfig+0xdd8>)
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001ddc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001de0:	6011      	str	r1, [r2, #0]
 8001de2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	fa92 f1a2 	rbit	r1, r2
 8001dec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001df0:	6011      	str	r1, [r2, #0]
  return(result);
 8001df2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	fab2 f282 	clz	r2, r2
 8001dfc:	b252      	sxtb	r2, r2
 8001dfe:	f042 0220 	orr.w	r2, r2, #32
 8001e02:	b252      	sxtb	r2, r2
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	f002 021f 	and.w	r2, r2, #31
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d09b      	beq.n	8001d4e <HAL_RCC_OscConfig+0xbfa>
 8001e16:	e083      	b.n	8001f20 <HAL_RCC_OscConfig+0xdcc>
 8001e18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	fa93 f2a3 	rbit	r2, r3
 8001e2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e30:	601a      	str	r2, [r3, #0]
  return(result);
 8001e32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e36:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	461a      	mov	r2, r3
 8001e48:	2300      	movs	r3, #0
 8001e4a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7fe fa7a 	bl	8000344 <HAL_GetTick>
 8001e50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e54:	e009      	b.n	8001e6a <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e56:	f7fe fa75 	bl	8000344 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e05b      	b.n	8001f22 <HAL_RCC_OscConfig+0xdce>
 8001e6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	fa93 f2a3 	rbit	r2, r3
 8001e7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e82:	601a      	str	r2, [r3, #0]
  return(result);
 8001e84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	095b      	lsrs	r3, r3, #5
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d102      	bne.n	8001ea4 <HAL_RCC_OscConfig+0xd50>
 8001e9e:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <HAL_RCC_OscConfig+0xdd8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	e01b      	b.n	8001edc <HAL_RCC_OscConfig+0xd88>
 8001ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	fa93 f2a3 	rbit	r2, r3
 8001eb8:	f107 0320 	add.w	r3, r7, #32
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	f107 031c 	add.w	r3, r7, #28
 8001ec2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	f107 031c 	add.w	r3, r7, #28
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	fa93 f2a3 	rbit	r2, r3
 8001ed2:	f107 0318 	add.w	r3, r7, #24
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <HAL_RCC_OscConfig+0xdd8>)
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	f107 0214 	add.w	r2, r7, #20
 8001ee0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ee4:	6011      	str	r1, [r2, #0]
 8001ee6:	f107 0214 	add.w	r2, r7, #20
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	fa92 f1a2 	rbit	r1, r2
 8001ef0:	f107 0210 	add.w	r2, r7, #16
 8001ef4:	6011      	str	r1, [r2, #0]
  return(result);
 8001ef6:	f107 0210 	add.w	r2, r7, #16
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	fab2 f282 	clz	r2, r2
 8001f00:	b252      	sxtb	r2, r2
 8001f02:	f042 0220 	orr.w	r2, r2, #32
 8001f06:	b252      	sxtb	r2, r2
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	f002 021f 	and.w	r2, r2, #31
 8001f0e:	2101      	movs	r1, #1
 8001f10:	fa01 f202 	lsl.w	r2, r1, r2
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d19d      	bne.n	8001e56 <HAL_RCC_OscConfig+0xd02>
 8001f1a:	e001      	b.n	8001f20 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000

08001f30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b09e      	sub	sp, #120	; 0x78
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e164      	b.n	8002212 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f48:	4b92      	ldr	r3, [pc, #584]	; (8002194 <HAL_RCC_ClockConfig+0x264>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d910      	bls.n	8001f78 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4b8f      	ldr	r3, [pc, #572]	; (8002194 <HAL_RCC_ClockConfig+0x264>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 0207 	bic.w	r2, r3, #7
 8001f5e:	498d      	ldr	r1, [pc, #564]	; (8002194 <HAL_RCC_ClockConfig+0x264>)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f66:	4b8b      	ldr	r3, [pc, #556]	; (8002194 <HAL_RCC_ClockConfig+0x264>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d001      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e14c      	b.n	8002212 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f84:	4b84      	ldr	r3, [pc, #528]	; (8002198 <HAL_RCC_ClockConfig+0x268>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	4981      	ldr	r1, [pc, #516]	; (8002198 <HAL_RCC_ClockConfig+0x268>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 80df 	beq.w	8002162 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d13d      	bne.n	8002028 <HAL_RCC_ClockConfig+0xf8>
 8001fac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fb4:	fa93 f3a3 	rbit	r3, r3
 8001fb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8001fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbc:	fab3 f383 	clz	r3, r3
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d102      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xa6>
 8001fd0:	4b71      	ldr	r3, [pc, #452]	; (8002198 <HAL_RCC_ClockConfig+0x268>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	e00f      	b.n	8001ff6 <HAL_RCC_ClockConfig+0xc6>
 8001fd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fda:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	667b      	str	r3, [r7, #100]	; 0x64
 8001fe4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fe8:	663b      	str	r3, [r7, #96]	; 0x60
 8001fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ff2:	4b69      	ldr	r3, [pc, #420]	; (8002198 <HAL_RCC_ClockConfig+0x268>)
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ffa:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ffc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ffe:	fa92 f2a2 	rbit	r2, r2
 8002002:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8002004:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002006:	fab2 f282 	clz	r2, r2
 800200a:	b252      	sxtb	r2, r2
 800200c:	f042 0220 	orr.w	r2, r2, #32
 8002010:	b252      	sxtb	r2, r2
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f002 021f 	and.w	r2, r2, #31
 8002018:	2101      	movs	r1, #1
 800201a:	fa01 f202 	lsl.w	r2, r1, r2
 800201e:	4013      	ands	r3, r2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d17d      	bne.n	8002120 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0f4      	b.n	8002212 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d13d      	bne.n	80020ac <HAL_RCC_ClockConfig+0x17c>
 8002030:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002034:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800203e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002040:	fab3 f383 	clz	r3, r3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	b2db      	uxtb	r3, r3
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b01      	cmp	r3, #1
 8002052:	d102      	bne.n	800205a <HAL_RCC_ClockConfig+0x12a>
 8002054:	4b50      	ldr	r3, [pc, #320]	; (8002198 <HAL_RCC_ClockConfig+0x268>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	e00f      	b.n	800207a <HAL_RCC_ClockConfig+0x14a>
 800205a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800205e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	647b      	str	r3, [r7, #68]	; 0x44
 8002068:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800206c:	643b      	str	r3, [r7, #64]	; 0x40
 800206e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002076:	4b48      	ldr	r3, [pc, #288]	; (8002198 <HAL_RCC_ClockConfig+0x268>)
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800207e:	63ba      	str	r2, [r7, #56]	; 0x38
 8002080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002082:	fa92 f2a2 	rbit	r2, r2
 8002086:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8002088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800208a:	fab2 f282 	clz	r2, r2
 800208e:	b252      	sxtb	r2, r2
 8002090:	f042 0220 	orr.w	r2, r2, #32
 8002094:	b252      	sxtb	r2, r2
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	f002 021f 	and.w	r2, r2, #31
 800209c:	2101      	movs	r1, #1
 800209e:	fa01 f202 	lsl.w	r2, r1, r2
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d13b      	bne.n	8002120 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0b2      	b.n	8002212 <HAL_RCC_ClockConfig+0x2e2>
 80020ac:	2302      	movs	r3, #2
 80020ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80020b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	095b      	lsrs	r3, r3, #5
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d102      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x1a4>
 80020ce:	4b32      	ldr	r3, [pc, #200]	; (8002198 <HAL_RCC_ClockConfig+0x268>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	e00d      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1c0>
 80020d4:	2302      	movs	r3, #2
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
 80020e0:	2302      	movs	r3, #2
 80020e2:	623b      	str	r3, [r7, #32]
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	61fb      	str	r3, [r7, #28]
 80020ec:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <HAL_RCC_ClockConfig+0x268>)
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	2202      	movs	r2, #2
 80020f2:	61ba      	str	r2, [r7, #24]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	fa92 f2a2 	rbit	r2, r2
 80020fa:	617a      	str	r2, [r7, #20]
  return(result);
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	fab2 f282 	clz	r2, r2
 8002102:	b252      	sxtb	r2, r2
 8002104:	f042 0220 	orr.w	r2, r2, #32
 8002108:	b252      	sxtb	r2, r2
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	f002 021f 	and.w	r2, r2, #31
 8002110:	2101      	movs	r1, #1
 8002112:	fa01 f202 	lsl.w	r2, r1, r2
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e078      	b.n	8002212 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_RCC_ClockConfig+0x268>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f023 0203 	bic.w	r2, r3, #3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	491a      	ldr	r1, [pc, #104]	; (8002198 <HAL_RCC_ClockConfig+0x268>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002132:	f7fe f907 	bl	8000344 <HAL_GetTick>
 8002136:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002138:	e00a      	b.n	8002150 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213a:	f7fe f903 	bl	8000344 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	; 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e060      	b.n	8002212 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_RCC_ClockConfig+0x268>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 020c 	and.w	r2, r3, #12
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	429a      	cmp	r2, r3
 8002160:	d1eb      	bne.n	800213a <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002162:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <HAL_RCC_ClockConfig+0x264>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d215      	bcs.n	800219c <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_RCC_ClockConfig+0x264>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f023 0207 	bic.w	r2, r3, #7
 8002178:	4906      	ldr	r1, [pc, #24]	; (8002194 <HAL_RCC_ClockConfig+0x264>)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	4313      	orrs	r3, r2
 800217e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_RCC_ClockConfig+0x264>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d006      	beq.n	800219c <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e03f      	b.n	8002212 <HAL_RCC_ClockConfig+0x2e2>
 8002192:	bf00      	nop
 8002194:	40022000 	.word	0x40022000
 8002198:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a8:	4b1c      	ldr	r3, [pc, #112]	; (800221c <HAL_RCC_ClockConfig+0x2ec>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4919      	ldr	r1, [pc, #100]	; (800221c <HAL_RCC_ClockConfig+0x2ec>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <HAL_RCC_ClockConfig+0x2ec>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4911      	ldr	r1, [pc, #68]	; (800221c <HAL_RCC_ClockConfig+0x2ec>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021da:	f000 f825 	bl	8002228 <HAL_RCC_GetSysClockFreq>
 80021de:	4601      	mov	r1, r0
 80021e0:	4b0e      	ldr	r3, [pc, #56]	; (800221c <HAL_RCC_ClockConfig+0x2ec>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021e8:	23f0      	movs	r3, #240	; 0xf0
 80021ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	fa22 f303 	lsr.w	r3, r2, r3
 80021fe:	4a08      	ldr	r2, [pc, #32]	; (8002220 <HAL_RCC_ClockConfig+0x2f0>)
 8002200:	5cd3      	ldrb	r3, [r2, r3]
 8002202:	fa21 f303 	lsr.w	r3, r1, r3
 8002206:	4a07      	ldr	r2, [pc, #28]	; (8002224 <HAL_RCC_ClockConfig+0x2f4>)
 8002208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800220a:	2000      	movs	r0, #0
 800220c:	f7fe f856 	bl	80002bc <HAL_InitTick>
  
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3778      	adds	r7, #120	; 0x78
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	08004dc4 	.word	0x08004dc4
 8002224:	20000018 	.word	0x20000018

08002228 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002228:	b480      	push	{r7}
 800222a:	b08b      	sub	sp, #44	; 0x2c
 800222c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	2300      	movs	r3, #0
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800223e:	2300      	movs	r3, #0
 8002240:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002242:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <HAL_RCC_GetSysClockFreq+0xc4>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b04      	cmp	r3, #4
 8002250:	d002      	beq.n	8002258 <HAL_RCC_GetSysClockFreq+0x30>
 8002252:	2b08      	cmp	r3, #8
 8002254:	d003      	beq.n	800225e <HAL_RCC_GetSysClockFreq+0x36>
 8002256:	e03f      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002258:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800225a:	623b      	str	r3, [r7, #32]
      break;
 800225c:	e03f      	b.n	80022de <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002264:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002268:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	607b      	str	r3, [r7, #4]
  return(result);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	fab3 f383 	clz	r3, r3
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
 800227c:	4a1d      	ldr	r2, [pc, #116]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800227e:	5cd3      	ldrb	r3, [r2, r3]
 8002280:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002282:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <HAL_RCC_GetSysClockFreq+0xc4>)
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	f003 020f 	and.w	r2, r3, #15
 800228a:	230f      	movs	r3, #15
 800228c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	fa93 f3a3 	rbit	r3, r3
 8002294:	60fb      	str	r3, [r7, #12]
  return(result);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	fab3 f383 	clz	r3, r3
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
 80022a0:	4a15      	ldr	r2, [pc, #84]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022a2:	5cd3      	ldrb	r3, [r2, r3]
 80022a4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80022b0:	4a0f      	ldr	r2, [pc, #60]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
 80022c0:	e007      	b.n	80022d2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80022c2:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	fb02 f303 	mul.w	r3, r2, r3
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	623b      	str	r3, [r7, #32]
      break;
 80022d6:	e002      	b.n	80022de <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022da:	623b      	str	r3, [r7, #32]
      break;
 80022dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022de:	6a3b      	ldr	r3, [r7, #32]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	372c      	adds	r7, #44	; 0x2c
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	40021000 	.word	0x40021000
 80022f0:	007a1200 	.word	0x007a1200
 80022f4:	08004da4 	.word	0x08004da4
 80022f8:	08004db4 	.word	0x08004db4

080022fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <HAL_RCC_GetHCLKFreq+0x14>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000018 	.word	0x20000018

08002314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800231a:	f7ff ffef 	bl	80022fc <HAL_RCC_GetHCLKFreq>
 800231e:	4601      	mov	r1, r0
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002328:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800232c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	603b      	str	r3, [r7, #0]
  return(result);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	fab3 f383 	clz	r3, r3
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002342:	5cd3      	ldrb	r3, [r2, r3]
 8002344:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000
 8002354:	08004dd4 	.word	0x08004dd4

08002358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800235e:	f7ff ffcd 	bl	80022fc <HAL_RCC_GetHCLKFreq>
 8002362:	4601      	mov	r1, r0
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800236c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002370:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	603b      	str	r3, [r7, #0]
  return(result);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	fab3 f383 	clz	r3, r3
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
 8002384:	4a04      	ldr	r2, [pc, #16]	; (8002398 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002386:	5cd3      	ldrb	r3, [r2, r3]
 8002388:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	08004dd4 	.word	0x08004dd4

0800239c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b092      	sub	sp, #72	; 0x48
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80d6 	beq.w	8002566 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c0:	4b4d      	ldr	r3, [pc, #308]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10e      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023cc:	4b4a      	ldr	r3, [pc, #296]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	4a49      	ldr	r2, [pc, #292]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80023d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d6:	61d3      	str	r3, [r2, #28]
 80023d8:	4b47      	ldr	r3, [pc, #284]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e4:	2301      	movs	r3, #1
 80023e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ea:	4b44      	ldr	r3, [pc, #272]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d118      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f6:	4b41      	ldr	r3, [pc, #260]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a40      	ldr	r2, [pc, #256]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002400:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002402:	f7fd ff9f 	bl	8000344 <HAL_GetTick>
 8002406:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	e008      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240a:	f7fd ff9b 	bl	8000344 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b64      	cmp	r3, #100	; 0x64
 8002416:	d901      	bls.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e1d4      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241c:	4b37      	ldr	r3, [pc, #220]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002428:	4b33      	ldr	r3, [pc, #204]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002430:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 8083 	beq.w	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002444:	429a      	cmp	r2, r3
 8002446:	d07b      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002448:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002452:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002456:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	4b25      	ldr	r3, [pc, #148]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	461a      	mov	r2, r3
 8002470:	2301      	movs	r3, #1
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002478:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247c:	fa93 f3a3 	rbit	r3, r3
 8002480:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002484:	fab3 f383 	clz	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	461a      	mov	r2, r3
 8002492:	2300      	movs	r3, #0
 8002494:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002496:	4a18      	ldr	r2, [pc, #96]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800249a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800249c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d04c      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a6:	f7fd ff4d 	bl	8000344 <HAL_GetTick>
 80024aa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ac:	e00a      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ae:	f7fd ff49 	bl	8000344 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e180      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80024c4:	2302      	movs	r3, #2
 80024c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
 80024d0:	2302      	movs	r3, #2
 80024d2:	623b      	str	r3, [r7, #32]
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	61fb      	str	r3, [r7, #28]
  return(result);
 80024dc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024de:	fab3 f383 	clz	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	095b      	lsrs	r3, r3, #5
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d108      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80024f2:	4b01      	ldr	r3, [pc, #4]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	e00d      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40007000 	.word	0x40007000
 8002500:	10908100 	.word	0x10908100
 8002504:	2302      	movs	r3, #2
 8002506:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	4b9c      	ldr	r3, [pc, #624]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	2202      	movs	r2, #2
 8002516:	613a      	str	r2, [r7, #16]
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	fa92 f2a2 	rbit	r2, r2
 800251e:	60fa      	str	r2, [r7, #12]
  return(result);
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	fab2 f282 	clz	r2, r2
 8002526:	b252      	sxtb	r2, r2
 8002528:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800252c:	b252      	sxtb	r2, r2
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	f002 021f 	and.w	r2, r2, #31
 8002534:	2101      	movs	r1, #1
 8002536:	fa01 f202 	lsl.w	r2, r1, r2
 800253a:	4013      	ands	r3, r2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0b6      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002540:	4b90      	ldr	r3, [pc, #576]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	498d      	ldr	r1, [pc, #564]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800254e:	4313      	orrs	r3, r2
 8002550:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002552:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002556:	2b01      	cmp	r3, #1
 8002558:	d105      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800255a:	4b8a      	ldr	r3, [pc, #552]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	4a89      	ldr	r2, [pc, #548]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002564:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d008      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002572:	4b84      	ldr	r3, [pc, #528]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f023 0203 	bic.w	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	4981      	ldr	r1, [pc, #516]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002580:	4313      	orrs	r3, r2
 8002582:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002590:	4b7c      	ldr	r3, [pc, #496]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4979      	ldr	r1, [pc, #484]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d008      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025ae:	4b75      	ldr	r3, [pc, #468]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	4972      	ldr	r1, [pc, #456]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025cc:	4b6d      	ldr	r3, [pc, #436]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	f023 0210 	bic.w	r2, r3, #16
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	496a      	ldr	r1, [pc, #424]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d008      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80025ea:	4b66      	ldr	r3, [pc, #408]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f6:	4963      	ldr	r1, [pc, #396]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002608:	4b5e      	ldr	r3, [pc, #376]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	f023 0220 	bic.w	r2, r3, #32
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	495b      	ldr	r1, [pc, #364]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002616:	4313      	orrs	r3, r2
 8002618:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d008      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002626:	4b57      	ldr	r3, [pc, #348]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	4954      	ldr	r1, [pc, #336]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002634:	4313      	orrs	r3, r2
 8002636:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002644:	4b4f      	ldr	r3, [pc, #316]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	494c      	ldr	r1, [pc, #304]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002652:	4313      	orrs	r3, r2
 8002654:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	2b00      	cmp	r3, #0
 8002660:	d008      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002662:	4b48      	ldr	r3, [pc, #288]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	4945      	ldr	r1, [pc, #276]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002670:	4313      	orrs	r3, r2
 8002672:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002680:	4b40      	ldr	r3, [pc, #256]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	493d      	ldr	r1, [pc, #244]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800268e:	4313      	orrs	r3, r2
 8002690:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269a:	2b00      	cmp	r3, #0
 800269c:	d008      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800269e:	4b39      	ldr	r3, [pc, #228]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	4936      	ldr	r1, [pc, #216]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80026bc:	4b31      	ldr	r3, [pc, #196]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	492e      	ldr	r1, [pc, #184]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d008      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80026da:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e6:	4927      	ldr	r1, [pc, #156]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80026f8:	4b22      	ldr	r3, [pc, #136]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	491f      	ldr	r1, [pc, #124]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002706:	4313      	orrs	r3, r2
 8002708:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d008      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002716:	4b1b      	ldr	r3, [pc, #108]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	4918      	ldr	r1, [pc, #96]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002724:	4313      	orrs	r3, r2
 8002726:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002734:	4b13      	ldr	r3, [pc, #76]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002740:	4910      	ldr	r1, [pc, #64]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002742:	4313      	orrs	r3, r2
 8002744:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d008      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002752:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	4909      	ldr	r1, [pc, #36]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002760:	4313      	orrs	r3, r2
 8002762:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00b      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002774:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277c:	4901      	ldr	r1, [pc, #4]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800277e:	4313      	orrs	r3, r2
 8002780:	630b      	str	r3, [r1, #48]	; 0x30
 8002782:	e001      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002784:	40021000 	.word	0x40021000
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a0:	490b      	ldr	r1, [pc, #44]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d008      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80027b2:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027be:	4904      	ldr	r1, [pc, #16]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3748      	adds	r7, #72	; 0x48
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000

080027d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e043      	b.n	800286e <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f001 fd16 	bl	800422c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2224      	movs	r2, #36	; 0x24
 8002804:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0201 	bic.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f97d 	bl	8002b18 <UART_SetConfig>
 800281e:	4603      	mov	r3, r0
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e022      	b.n	800286e <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fb6f 	bl	8002f14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002844:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002854:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 0201 	orr.w	r2, r2, #1
 8002864:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 fbf6 	bl	8003058 <UART_CheckIdleState>
 800286c:	4603      	mov	r3, r0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b088      	sub	sp, #32
 800287a:	af02      	add	r7, sp, #8
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	4613      	mov	r3, r2
 8002884:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b20      	cmp	r3, #32
 8002894:	d177      	bne.n	8002986 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <HAL_UART_Transmit+0x2c>
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e070      	b.n	8002988 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_UART_Transmit+0x3e>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e069      	b.n	8002988 <HAL_UART_Transmit+0x112>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2221      	movs	r2, #33	; 0x21
 80028c6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80028ca:	f7fd fd3b 	bl	8000344 <HAL_GetTick>
 80028ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	88fa      	ldrh	r2, [r7, #6]
 80028d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	88fa      	ldrh	r2, [r7, #6]
 80028dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80028e0:	e034      	b.n	800294c <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2200      	movs	r2, #0
 80028fc:	2180      	movs	r1, #128	; 0x80
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fbf3 	bl	80030ea <UART_WaitOnFlagUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e03c      	b.n	8002988 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002916:	d111      	bne.n	800293c <HAL_UART_Transmit+0xc6>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10d      	bne.n	800293c <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	881a      	ldrh	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002930:	b292      	uxth	r2, r2
 8002932:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	3302      	adds	r3, #2
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	e007      	b.n	800294c <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	60ba      	str	r2, [r7, #8]
 8002942:	781a      	ldrb	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	b292      	uxth	r2, r2
 800294a:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002952:	b29b      	uxth	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1c4      	bne.n	80028e2 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2200      	movs	r2, #0
 8002960:	2140      	movs	r1, #64	; 0x40
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 fbc1 	bl	80030ea <UART_WaitOnFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e00a      	b.n	8002988 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	e000      	b.n	8002988 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8002986:	2302      	movs	r3, #2
  }
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_UART_Receive>:
  * @param Size amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af02      	add	r7, sp, #8
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	4613      	mov	r3, r2
 800299e:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	f040 80ad 	bne.w	8002b0c <HAL_UART_Receive+0x17c>
  {
    if((pData == NULL ) || (Size == 0U))
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <HAL_UART_Receive+0x2e>
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e0a5      	b.n	8002b0e <HAL_UART_Receive+0x17e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_UART_Receive+0x40>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e09e      	b.n	8002b0e <HAL_UART_Receive+0x17e>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2222      	movs	r2, #34	; 0x22
 80029e2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80029e6:	f7fd fcad 	bl	8000344 <HAL_GetTick>
 80029ea:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	88fa      	ldrh	r2, [r7, #6]
 80029f0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	88fa      	ldrh	r2, [r7, #6]
 80029f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a04:	d10e      	bne.n	8002a24 <HAL_UART_Receive+0x94>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d105      	bne.n	8002a1a <HAL_UART_Receive+0x8a>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002a14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a18:	e028      	b.n	8002a6c <HAL_UART_Receive+0xdc>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	22ff      	movs	r2, #255	; 0xff
 8002a1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a22:	e023      	b.n	8002a6c <HAL_UART_Receive+0xdc>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10d      	bne.n	8002a48 <HAL_UART_Receive+0xb8>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d104      	bne.n	8002a3e <HAL_UART_Receive+0xae>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	22ff      	movs	r2, #255	; 0xff
 8002a38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a3c:	e016      	b.n	8002a6c <HAL_UART_Receive+0xdc>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	227f      	movs	r2, #127	; 0x7f
 8002a42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a46:	e011      	b.n	8002a6c <HAL_UART_Receive+0xdc>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a50:	d10c      	bne.n	8002a6c <HAL_UART_Receive+0xdc>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d104      	bne.n	8002a64 <HAL_UART_Receive+0xd4>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	227f      	movs	r2, #127	; 0x7f
 8002a5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a62:	e003      	b.n	8002a6c <HAL_UART_Receive+0xdc>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	223f      	movs	r2, #63	; 0x3f
 8002a68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002a72:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8002a74:	e03a      	b.n	8002aec <HAL_UART_Receive+0x15c>
    {
      huart->RxXferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2120      	movs	r1, #32
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fb29 	bl	80030ea <UART_WaitOnFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_UART_Receive+0x112>
      {
        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e035      	b.n	8002b0e <HAL_UART_Receive+0x17e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aaa:	d112      	bne.n	8002ad2 <HAL_UART_Receive+0x142>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10e      	bne.n	8002ad2 <HAL_UART_Receive+0x142>
      {
        tmp = (uint16_t*) pData ;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	8b7b      	ldrh	r3, [r7, #26]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	3302      	adds	r3, #2
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	e00c      	b.n	8002aec <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	b2d9      	uxtb	r1, r3
 8002adc:	8b7b      	ldrh	r3, [r7, #26]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	1c58      	adds	r0, r3, #1
 8002ae4:	60b8      	str	r0, [r7, #8]
 8002ae6:	400a      	ands	r2, r1
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1be      	bne.n	8002a76 <HAL_UART_Receive+0xe6>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e000      	b.n	8002b0e <HAL_UART_Receive+0x17e>
  }
  else
  {
    return HAL_BUSY;
 8002b0c:	2302      	movs	r3, #2
  }
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002b24:	2310      	movs	r3, #16
 8002b26:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4ba7      	ldr	r3, [pc, #668]	; (8002df0 <UART_SetConfig+0x2d8>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	68f9      	ldr	r1, [r7, #12]
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a96      	ldr	r2, [pc, #600]	; (8002df4 <UART_SetConfig+0x2dc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d121      	bne.n	8002be4 <UART_SetConfig+0xcc>
 8002ba0:	4b95      	ldr	r3, [pc, #596]	; (8002df8 <UART_SetConfig+0x2e0>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d817      	bhi.n	8002bdc <UART_SetConfig+0xc4>
 8002bac:	a201      	add	r2, pc, #4	; (adr r2, 8002bb4 <UART_SetConfig+0x9c>)
 8002bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb2:	bf00      	nop
 8002bb4:	08002bc5 	.word	0x08002bc5
 8002bb8:	08002bd1 	.word	0x08002bd1
 8002bbc:	08002bd7 	.word	0x08002bd7
 8002bc0:	08002bcb 	.word	0x08002bcb
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	75fb      	strb	r3, [r7, #23]
 8002bc8:	e0b2      	b.n	8002d30 <UART_SetConfig+0x218>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	75fb      	strb	r3, [r7, #23]
 8002bce:	e0af      	b.n	8002d30 <UART_SetConfig+0x218>
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	75fb      	strb	r3, [r7, #23]
 8002bd4:	e0ac      	b.n	8002d30 <UART_SetConfig+0x218>
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	75fb      	strb	r3, [r7, #23]
 8002bda:	e0a9      	b.n	8002d30 <UART_SetConfig+0x218>
 8002bdc:	2310      	movs	r3, #16
 8002bde:	75fb      	strb	r3, [r7, #23]
 8002be0:	bf00      	nop
 8002be2:	e0a5      	b.n	8002d30 <UART_SetConfig+0x218>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a84      	ldr	r2, [pc, #528]	; (8002dfc <UART_SetConfig+0x2e4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d123      	bne.n	8002c36 <UART_SetConfig+0x11e>
 8002bee:	4b82      	ldr	r3, [pc, #520]	; (8002df8 <UART_SetConfig+0x2e0>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfa:	d012      	beq.n	8002c22 <UART_SetConfig+0x10a>
 8002bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c00:	d802      	bhi.n	8002c08 <UART_SetConfig+0xf0>
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d007      	beq.n	8002c16 <UART_SetConfig+0xfe>
 8002c06:	e012      	b.n	8002c2e <UART_SetConfig+0x116>
 8002c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c0c:	d00c      	beq.n	8002c28 <UART_SetConfig+0x110>
 8002c0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c12:	d003      	beq.n	8002c1c <UART_SetConfig+0x104>
 8002c14:	e00b      	b.n	8002c2e <UART_SetConfig+0x116>
 8002c16:	2300      	movs	r3, #0
 8002c18:	75fb      	strb	r3, [r7, #23]
 8002c1a:	e089      	b.n	8002d30 <UART_SetConfig+0x218>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	75fb      	strb	r3, [r7, #23]
 8002c20:	e086      	b.n	8002d30 <UART_SetConfig+0x218>
 8002c22:	2304      	movs	r3, #4
 8002c24:	75fb      	strb	r3, [r7, #23]
 8002c26:	e083      	b.n	8002d30 <UART_SetConfig+0x218>
 8002c28:	2308      	movs	r3, #8
 8002c2a:	75fb      	strb	r3, [r7, #23]
 8002c2c:	e080      	b.n	8002d30 <UART_SetConfig+0x218>
 8002c2e:	2310      	movs	r3, #16
 8002c30:	75fb      	strb	r3, [r7, #23]
 8002c32:	bf00      	nop
 8002c34:	e07c      	b.n	8002d30 <UART_SetConfig+0x218>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a71      	ldr	r2, [pc, #452]	; (8002e00 <UART_SetConfig+0x2e8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d123      	bne.n	8002c88 <UART_SetConfig+0x170>
 8002c40:	4b6d      	ldr	r3, [pc, #436]	; (8002df8 <UART_SetConfig+0x2e0>)
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002c48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c4c:	d012      	beq.n	8002c74 <UART_SetConfig+0x15c>
 8002c4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c52:	d802      	bhi.n	8002c5a <UART_SetConfig+0x142>
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d007      	beq.n	8002c68 <UART_SetConfig+0x150>
 8002c58:	e012      	b.n	8002c80 <UART_SetConfig+0x168>
 8002c5a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c5e:	d00c      	beq.n	8002c7a <UART_SetConfig+0x162>
 8002c60:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c64:	d003      	beq.n	8002c6e <UART_SetConfig+0x156>
 8002c66:	e00b      	b.n	8002c80 <UART_SetConfig+0x168>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	75fb      	strb	r3, [r7, #23]
 8002c6c:	e060      	b.n	8002d30 <UART_SetConfig+0x218>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	75fb      	strb	r3, [r7, #23]
 8002c72:	e05d      	b.n	8002d30 <UART_SetConfig+0x218>
 8002c74:	2304      	movs	r3, #4
 8002c76:	75fb      	strb	r3, [r7, #23]
 8002c78:	e05a      	b.n	8002d30 <UART_SetConfig+0x218>
 8002c7a:	2308      	movs	r3, #8
 8002c7c:	75fb      	strb	r3, [r7, #23]
 8002c7e:	e057      	b.n	8002d30 <UART_SetConfig+0x218>
 8002c80:	2310      	movs	r3, #16
 8002c82:	75fb      	strb	r3, [r7, #23]
 8002c84:	bf00      	nop
 8002c86:	e053      	b.n	8002d30 <UART_SetConfig+0x218>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a5d      	ldr	r2, [pc, #372]	; (8002e04 <UART_SetConfig+0x2ec>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d123      	bne.n	8002cda <UART_SetConfig+0x1c2>
 8002c92:	4b59      	ldr	r3, [pc, #356]	; (8002df8 <UART_SetConfig+0x2e0>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c9e:	d012      	beq.n	8002cc6 <UART_SetConfig+0x1ae>
 8002ca0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ca4:	d802      	bhi.n	8002cac <UART_SetConfig+0x194>
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d007      	beq.n	8002cba <UART_SetConfig+0x1a2>
 8002caa:	e012      	b.n	8002cd2 <UART_SetConfig+0x1ba>
 8002cac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cb0:	d00c      	beq.n	8002ccc <UART_SetConfig+0x1b4>
 8002cb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002cb6:	d003      	beq.n	8002cc0 <UART_SetConfig+0x1a8>
 8002cb8:	e00b      	b.n	8002cd2 <UART_SetConfig+0x1ba>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	75fb      	strb	r3, [r7, #23]
 8002cbe:	e037      	b.n	8002d30 <UART_SetConfig+0x218>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	75fb      	strb	r3, [r7, #23]
 8002cc4:	e034      	b.n	8002d30 <UART_SetConfig+0x218>
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	75fb      	strb	r3, [r7, #23]
 8002cca:	e031      	b.n	8002d30 <UART_SetConfig+0x218>
 8002ccc:	2308      	movs	r3, #8
 8002cce:	75fb      	strb	r3, [r7, #23]
 8002cd0:	e02e      	b.n	8002d30 <UART_SetConfig+0x218>
 8002cd2:	2310      	movs	r3, #16
 8002cd4:	75fb      	strb	r3, [r7, #23]
 8002cd6:	bf00      	nop
 8002cd8:	e02a      	b.n	8002d30 <UART_SetConfig+0x218>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a4a      	ldr	r2, [pc, #296]	; (8002e08 <UART_SetConfig+0x2f0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d123      	bne.n	8002d2c <UART_SetConfig+0x214>
 8002ce4:	4b44      	ldr	r3, [pc, #272]	; (8002df8 <UART_SetConfig+0x2e0>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002cec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf0:	d012      	beq.n	8002d18 <UART_SetConfig+0x200>
 8002cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf6:	d802      	bhi.n	8002cfe <UART_SetConfig+0x1e6>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d007      	beq.n	8002d0c <UART_SetConfig+0x1f4>
 8002cfc:	e012      	b.n	8002d24 <UART_SetConfig+0x20c>
 8002cfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d02:	d00c      	beq.n	8002d1e <UART_SetConfig+0x206>
 8002d04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d08:	d003      	beq.n	8002d12 <UART_SetConfig+0x1fa>
 8002d0a:	e00b      	b.n	8002d24 <UART_SetConfig+0x20c>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	75fb      	strb	r3, [r7, #23]
 8002d10:	e00e      	b.n	8002d30 <UART_SetConfig+0x218>
 8002d12:	2302      	movs	r3, #2
 8002d14:	75fb      	strb	r3, [r7, #23]
 8002d16:	e00b      	b.n	8002d30 <UART_SetConfig+0x218>
 8002d18:	2304      	movs	r3, #4
 8002d1a:	75fb      	strb	r3, [r7, #23]
 8002d1c:	e008      	b.n	8002d30 <UART_SetConfig+0x218>
 8002d1e:	2308      	movs	r3, #8
 8002d20:	75fb      	strb	r3, [r7, #23]
 8002d22:	e005      	b.n	8002d30 <UART_SetConfig+0x218>
 8002d24:	2310      	movs	r3, #16
 8002d26:	75fb      	strb	r3, [r7, #23]
 8002d28:	bf00      	nop
 8002d2a:	e001      	b.n	8002d30 <UART_SetConfig+0x218>
 8002d2c:	2310      	movs	r3, #16
 8002d2e:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d38:	d17d      	bne.n	8002e36 <UART_SetConfig+0x31e>
  {
    switch (clocksource)
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d865      	bhi.n	8002e0c <UART_SetConfig+0x2f4>
 8002d40:	a201      	add	r2, pc, #4	; (adr r2, 8002d48 <UART_SetConfig+0x230>)
 8002d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d46:	bf00      	nop
 8002d48:	08002d6d 	.word	0x08002d6d
 8002d4c:	08002d89 	.word	0x08002d89
 8002d50:	08002da5 	.word	0x08002da5
 8002d54:	08002e0d 	.word	0x08002e0d
 8002d58:	08002dbf 	.word	0x08002dbf
 8002d5c:	08002e0d 	.word	0x08002e0d
 8002d60:	08002e0d 	.word	0x08002e0d
 8002d64:	08002e0d 	.word	0x08002e0d
 8002d68:	08002ddb 	.word	0x08002ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d6c:	f7ff fad2 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 8002d70:	4603      	mov	r3, r0
 8002d72:	005a      	lsls	r2, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	441a      	add	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d84:	82bb      	strh	r3, [r7, #20]
        break;
 8002d86:	e044      	b.n	8002e12 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d88:	f7ff fae6 	bl	8002358 <HAL_RCC_GetPCLK2Freq>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	005a      	lsls	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	085b      	lsrs	r3, r3, #1
 8002d96:	441a      	add	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da0:	82bb      	strh	r3, [r7, #20]
        break;
 8002da2:	e036      	b.n	8002e12 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	085b      	lsrs	r3, r3, #1
 8002daa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002dae:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6852      	ldr	r2, [r2, #4]
 8002db6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dba:	82bb      	strh	r3, [r7, #20]
        break;
 8002dbc:	e029      	b.n	8002e12 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002dbe:	f7ff fa33 	bl	8002228 <HAL_RCC_GetSysClockFreq>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	005a      	lsls	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	441a      	add	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd6:	82bb      	strh	r3, [r7, #20]
        break;
 8002dd8:	e01b      	b.n	8002e12 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	085b      	lsrs	r3, r3, #1
 8002de0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dec:	82bb      	strh	r3, [r7, #20]
        break;
 8002dee:	e010      	b.n	8002e12 <UART_SetConfig+0x2fa>
 8002df0:	efff69f3 	.word	0xefff69f3
 8002df4:	40013800 	.word	0x40013800
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40004400 	.word	0x40004400
 8002e00:	40004800 	.word	0x40004800
 8002e04:	40004c00 	.word	0x40004c00
 8002e08:	40005000 	.word	0x40005000
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	74fb      	strb	r3, [r7, #19]
        break;
 8002e10:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002e12:	8abb      	ldrh	r3, [r7, #20]
 8002e14:	f023 030f 	bic.w	r3, r3, #15
 8002e18:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e1a:	8abb      	ldrh	r3, [r7, #20]
 8002e1c:	105b      	asrs	r3, r3, #1
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	897b      	ldrh	r3, [r7, #10]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	897a      	ldrh	r2, [r7, #10]
 8002e32:	60da      	str	r2, [r3, #12]
 8002e34:	e069      	b.n	8002f0a <UART_SetConfig+0x3f2>
  }
  else
  {
    switch (clocksource)
 8002e36:	7dfb      	ldrb	r3, [r7, #23]
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d863      	bhi.n	8002f04 <UART_SetConfig+0x3ec>
 8002e3c:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <UART_SetConfig+0x32c>)
 8002e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e42:	bf00      	nop
 8002e44:	08002e69 	.word	0x08002e69
 8002e48:	08002e89 	.word	0x08002e89
 8002e4c:	08002ea9 	.word	0x08002ea9
 8002e50:	08002f05 	.word	0x08002f05
 8002e54:	08002ec9 	.word	0x08002ec9
 8002e58:	08002f05 	.word	0x08002f05
 8002e5c:	08002f05 	.word	0x08002f05
 8002e60:	08002f05 	.word	0x08002f05
 8002e64:	08002ee9 	.word	0x08002ee9
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002e68:	f7ff fa54 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	085b      	lsrs	r3, r3, #1
 8002e74:	441a      	add	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60da      	str	r2, [r3, #12]
        break;
 8002e86:	e040      	b.n	8002f0a <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002e88:	f7ff fa66 	bl	8002358 <HAL_RCC_GetPCLK2Freq>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	085b      	lsrs	r3, r3, #1
 8002e94:	441a      	add	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60da      	str	r2, [r3, #12]
        break;
 8002ea6:	e030      	b.n	8002f0a <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	085b      	lsrs	r3, r3, #1
 8002eae:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002eb2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6852      	ldr	r2, [r2, #4]
 8002eba:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60da      	str	r2, [r3, #12]
        break;
 8002ec6:	e020      	b.n	8002f0a <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002ec8:	f7ff f9ae 	bl	8002228 <HAL_RCC_GetSysClockFreq>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	085b      	lsrs	r3, r3, #1
 8002ed4:	441a      	add	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	60da      	str	r2, [r3, #12]
        break;
 8002ee6:	e010      	b.n	8002f0a <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60da      	str	r2, [r3, #12]
        break;
 8002f02:	e002      	b.n	8002f0a <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	74fb      	strb	r3, [r7, #19]
        break;
 8002f08:	bf00      	nop
    }
  }

  return ret;
 8002f0a:	7cfb      	ldrb	r3, [r7, #19]

}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00a      	beq.n	8002f82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d01a      	beq.n	800302a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003012:	d10a      	bne.n	800302a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	605a      	str	r2, [r3, #4]
  }
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af02      	add	r7, sp, #8
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800306a:	f7fd f96b 	bl	8000344 <HAL_GetTick>
 800306e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b08      	cmp	r3, #8
 800307c:	d10e      	bne.n	800309c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800307e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f82c 	bl	80030ea <UART_WaitOnFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e022      	b.n	80030e2 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d10e      	bne.n	80030c8 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f816 	bl	80030ea <UART_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e00c      	b.n	80030e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b084      	sub	sp, #16
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	4613      	mov	r3, r2
 80030f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030fa:	e02c      	b.n	8003156 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003102:	d028      	beq.n	8003156 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d007      	beq.n	800311a <UART_WaitOnFlagUntilTimeout+0x30>
 800310a:	f7fd f91b 	bl	8000344 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	429a      	cmp	r2, r3
 8003118:	d21d      	bcs.n	8003156 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003128:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0201 	bic.w	r2, r2, #1
 8003138:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e00f      	b.n	8003176 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69da      	ldr	r2, [r3, #28]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4013      	ands	r3, r2
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	429a      	cmp	r2, r3
 8003164:	bf0c      	ite	eq
 8003166:	2301      	moveq	r3, #1
 8003168:	2300      	movne	r3, #0
 800316a:	b2db      	uxtb	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	429a      	cmp	r2, r3
 8003172:	d0c3      	beq.n	80030fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <init_debounce_struct_t>:
uint32_t page_details_to_2pages(uint8_t page_details);

void init_debounce_struct_t(debounce_button_status_t *);

void init_debounce_struct_t(debounce_button_status_t *struct_t)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
	struct_t->active_cnt = 0;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	801a      	strh	r2, [r3, #0]
	struct_t->current_btn_state_t = BUTTON_RELEASED;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	719a      	strb	r2, [r3, #6]
	struct_t->deactive_cnt = 0;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	805a      	strh	r2, [r3, #2]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031a8:	f7fd f872 	bl	8000290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031ac:	f000 f822 	bl	80031f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031b0:	f000 f8cc 	bl	800334c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80031b4:	f000 f89a 	bl	80032ec <MX_USART2_UART_Init>
  MX_CRC_Init();
 80031b8:	f000 f86e 	bl	8003298 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  init_debounce_struct_t(&user_btn_status_t);
 80031bc:	480a      	ldr	r0, [pc, #40]	; (80031e8 <main+0x44>)
 80031be:	f7ff ffde 	bl	800317e <init_debounce_struct_t>
  gpio_status_t = HAL_GPIO_ReadPin(USER_BTN_GPIO_Port,USER_BTN_Pin);
 80031c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031c6:	4809      	ldr	r0, [pc, #36]	; (80031ec <main+0x48>)
 80031c8:	f7fd ff94 	bl	80010f4 <HAL_GPIO_ReadPin>
 80031cc:	4603      	mov	r3, r0
 80031ce:	461a      	mov	r2, r3
 80031d0:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <main+0x4c>)
 80031d2:	701a      	strb	r2, [r3, #0]
  if(gpio_status_t == GPIO_PIN_RESET)
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <main+0x4c>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d102      	bne.n	80031e2 <main+0x3e>
	  if(DEBUG_SERIAL_ENABLED_B)
	  {
		  printmsg("BL_DEBUG_MSG:Button is pressed .. going to BootLoader Mode\r\n");
	  }

	  bootloader_uart_read_data();
 80031dc:	f000 fc1c 	bl	8003a18 <bootloader_uart_read_data>
 80031e0:	e001      	b.n	80031e6 <main+0x42>
  {
	  if(DEBUG_SERIAL_ENABLED_B)
	  {
		  printmsg("BL_DEBUG_MSG:Button is not pressed .. going to execute user app\r\n");
	  }
	  bootloader_jump_to_user_app();
 80031e2:	f000 fc97 	bl	8003b14 <bootloader_jump_to_user_app>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80031e6:	e7fe      	b.n	80031e6 <main+0x42>
 80031e8:	20000008 	.word	0x20000008
 80031ec:	48000800 	.word	0x48000800
 80031f0:	2000009c 	.word	0x2000009c

080031f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b0a6      	sub	sp, #152	; 0x98
 80031f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80031fe:	2228      	movs	r2, #40	; 0x28
 8003200:	2100      	movs	r1, #0
 8003202:	4618      	mov	r0, r3
 8003204:	f001 f94c 	bl	80044a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003208:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	60da      	str	r2, [r3, #12]
 8003216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003218:	1d3b      	adds	r3, r7, #4
 800321a:	2258      	movs	r2, #88	; 0x58
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f001 f93e 	bl	80044a0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003224:	2302      	movs	r3, #2
 8003226:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003228:	2301      	movs	r3, #1
 800322a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800322c:	2310      	movs	r3, #16
 800322e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003232:	2300      	movs	r3, #0
 8003234:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003238:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800323c:	4618      	mov	r0, r3
 800323e:	f7fd ff89 	bl	8001154 <HAL_RCC_OscConfig>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003248:	f000 ffa5 	bl	8004196 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800324c:	230f      	movs	r3, #15
 800324e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003250:	2300      	movs	r3, #0
 8003252:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003254:	2300      	movs	r3, #0
 8003256:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003258:	2300      	movs	r3, #0
 800325a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800325c:	2300      	movs	r3, #0
 800325e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003260:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe fe62 	bl	8001f30 <HAL_RCC_ClockConfig>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003272:	f000 ff90 	bl	8004196 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003276:	2302      	movs	r3, #2
 8003278:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800327a:	2300      	movs	r3, #0
 800327c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800327e:	1d3b      	adds	r3, r7, #4
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff f88b 	bl	800239c <HAL_RCCEx_PeriphCLKConfig>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800328c:	f000 ff83 	bl	8004196 <Error_Handler>
  }
}
 8003290:	bf00      	nop
 8003292:	3798      	adds	r7, #152	; 0x98
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800329c:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <MX_CRC_Init+0x48>)
 800329e:	4a11      	ldr	r2, [pc, #68]	; (80032e4 <MX_CRC_Init+0x4c>)
 80032a0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80032a2:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <MX_CRC_Init+0x48>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.GeneratingPolynomial = 0x04C11DB7;
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <MX_CRC_Init+0x48>)
 80032aa:	4a0f      	ldr	r2, [pc, #60]	; (80032e8 <MX_CRC_Init+0x50>)
 80032ac:	609a      	str	r2, [r3, #8]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80032ae:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <MX_CRC_Init+0x48>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80032b4:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <MX_CRC_Init+0x48>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	615a      	str	r2, [r3, #20]
  hcrc.Init.CRCLength = 32;
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <MX_CRC_Init+0x48>)
 80032bc:	2220      	movs	r2, #32
 80032be:	60da      	str	r2, [r3, #12]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80032c0:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <MX_CRC_Init+0x48>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <MX_CRC_Init+0x48>)
 80032c8:	2203      	movs	r2, #3
 80032ca:	621a      	str	r2, [r3, #32]
  /*
   * hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_HALFWORDS : CRC = 3186128208 when it should be 2091641319
   * hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES : CRC = 3957076664 when it should be 2091641319
   */
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80032cc:	4804      	ldr	r0, [pc, #16]	; (80032e0 <MX_CRC_Init+0x48>)
 80032ce:	f7fd f92b 	bl	8000528 <HAL_CRC_Init>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MX_CRC_Init+0x44>
  {
    Error_Handler();
 80032d8:	f000 ff5d 	bl	8004196 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80032dc:	bf00      	nop
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	200000d0 	.word	0x200000d0
 80032e4:	40023000 	.word	0x40023000
 80032e8:	04c11db7 	.word	0x04c11db7

080032ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032f0:	4b14      	ldr	r3, [pc, #80]	; (8003344 <MX_USART2_UART_Init+0x58>)
 80032f2:	4a15      	ldr	r2, [pc, #84]	; (8003348 <MX_USART2_UART_Init+0x5c>)
 80032f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032f6:	4b13      	ldr	r3, [pc, #76]	; (8003344 <MX_USART2_UART_Init+0x58>)
 80032f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032fe:	4b11      	ldr	r3, [pc, #68]	; (8003344 <MX_USART2_UART_Init+0x58>)
 8003300:	2200      	movs	r2, #0
 8003302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003304:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <MX_USART2_UART_Init+0x58>)
 8003306:	2200      	movs	r2, #0
 8003308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800330a:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <MX_USART2_UART_Init+0x58>)
 800330c:	2200      	movs	r2, #0
 800330e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <MX_USART2_UART_Init+0x58>)
 8003312:	220c      	movs	r2, #12
 8003314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <MX_USART2_UART_Init+0x58>)
 8003318:	2200      	movs	r2, #0
 800331a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800331c:	4b09      	ldr	r3, [pc, #36]	; (8003344 <MX_USART2_UART_Init+0x58>)
 800331e:	2200      	movs	r2, #0
 8003320:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003322:	4b08      	ldr	r3, [pc, #32]	; (8003344 <MX_USART2_UART_Init+0x58>)
 8003324:	2200      	movs	r2, #0
 8003326:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003328:	4b06      	ldr	r3, [pc, #24]	; (8003344 <MX_USART2_UART_Init+0x58>)
 800332a:	2200      	movs	r2, #0
 800332c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800332e:	4805      	ldr	r0, [pc, #20]	; (8003344 <MX_USART2_UART_Init+0x58>)
 8003330:	f7ff fa50 	bl	80027d4 <HAL_UART_Init>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800333a:	f000 ff2c 	bl	8004196 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800333e:	bf00      	nop
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	200000f4 	.word	0x200000f4
 8003348:	40004400 	.word	0x40004400

0800334c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003352:	f107 030c 	add.w	r3, r7, #12
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	605a      	str	r2, [r3, #4]
 800335c:	609a      	str	r2, [r3, #8]
 800335e:	60da      	str	r2, [r3, #12]
 8003360:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003362:	4b1f      	ldr	r3, [pc, #124]	; (80033e0 <MX_GPIO_Init+0x94>)
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	4a1e      	ldr	r2, [pc, #120]	; (80033e0 <MX_GPIO_Init+0x94>)
 8003368:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800336c:	6153      	str	r3, [r2, #20]
 800336e:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <MX_GPIO_Init+0x94>)
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800337a:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <MX_GPIO_Init+0x94>)
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	4a18      	ldr	r2, [pc, #96]	; (80033e0 <MX_GPIO_Init+0x94>)
 8003380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003384:	6153      	str	r3, [r2, #20]
 8003386:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <MX_GPIO_Init+0x94>)
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338e:	607b      	str	r3, [r7, #4]
 8003390:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8003392:	2200      	movs	r2, #0
 8003394:	2120      	movs	r1, #32
 8003396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800339a:	f7fd fec3 	bl	8001124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 800339e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033a4:	2300      	movs	r3, #0
 80033a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 80033ac:	f107 030c 	add.w	r3, r7, #12
 80033b0:	4619      	mov	r1, r3
 80033b2:	480c      	ldr	r0, [pc, #48]	; (80033e4 <MX_GPIO_Init+0x98>)
 80033b4:	f7fd fd10 	bl	8000dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80033b8:	2320      	movs	r3, #32
 80033ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033bc:	2301      	movs	r3, #1
 80033be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80033c8:	f107 030c 	add.w	r3, r7, #12
 80033cc:	4619      	mov	r1, r3
 80033ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033d2:	f7fd fd01 	bl	8000dd8 <HAL_GPIO_Init>

}
 80033d6:	bf00      	nop
 80033d8:	3720      	adds	r7, #32
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40021000 	.word	0x40021000
 80033e4:	48000800 	.word	0x48000800

080033e8 <printmsg>:
/* USER CODE BEGIN 4 */

/**************Implementation of Boot-loader Command Handle functions *********/

void printmsg(char *format,...)
{
 80033e8:	b40f      	push	{r0, r1, r2, r3}
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b096      	sub	sp, #88	; 0x58
 80033ee:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];
	va_list args;
	va_start(args,format);
 80033f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80033f4:	607b      	str	r3, [r7, #4]
	vsprintf(str,format,args);
 80033f6:	f107 0308 	add.w	r3, r7, #8
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 f86c 	bl	80044dc <vsiprintf>
	HAL_UART_Transmit(D_UART,(uint8_t*)str,strlen(str),HAL_MAX_DELAY);
 8003404:	f107 0308 	add.w	r3, r7, #8
 8003408:	4618      	mov	r0, r3
 800340a:	f7fc fee9 	bl	80001e0 <strlen>
 800340e:	4603      	mov	r3, r0
 8003410:	b29a      	uxth	r2, r3
 8003412:	f107 0108 	add.w	r1, r7, #8
 8003416:	f04f 33ff 	mov.w	r3, #4294967295
 800341a:	4805      	ldr	r0, [pc, #20]	; (8003430 <printmsg+0x48>)
 800341c:	f7ff fa2b 	bl	8002876 <HAL_UART_Transmit>
	va_end(args);
#endif
}
 8003420:	bf00      	nop
 8003422:	3758      	adds	r7, #88	; 0x58
 8003424:	46bd      	mov	sp, r7
 8003426:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800342a:	b004      	add	sp, #16
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	200000f4 	.word	0x200000f4

08003434 <bootloader_handle_getver_cmd>:
	return swapped;
}

/*Helper function to handle BL_GET_VER command */
void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
    {
      printmsg("BL_DEBUG_MSG:bootloader_handle_getver_cmd\r\n");
    }

	 //Total length of the command packet
	  uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	3301      	adds	r3, #1
 8003442:	617b      	str	r3, [r7, #20]

	  //extract the CRC32 sent by the Host
	  uint32_t host_crc_not_swapped = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	3b04      	subs	r3, #4
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	4413      	add	r3, r2
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	613b      	str	r3, [r7, #16]
	  //uint32_t swapped_crc = swap_byte_order(host_crc_not_swapped);

	  uint8_t ret_crc_u8 = bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc_not_swapped);
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	3b04      	subs	r3, #4
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4619      	mov	r1, r3
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fa9d 	bl	8003998 <bootloader_verify_crc>
 800345e:	4603      	mov	r3, r0
 8003460:	73fb      	strb	r3, [r7, #15]
	  //uint8_t ret_crc_swapped_u8 = bootloader_verify_crc_swapped(&bl_rx_buffer[0],command_packet_len-4,swapped_crc);



    if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc_not_swapped))
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	3b04      	subs	r3, #4
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fa94 	bl	8003998 <bootloader_verify_crc>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d110      	bne.n	8003498 <bootloader_handle_getver_cmd+0x64>
    	if(DEBUG_SERIAL_ENABLED_B)
    	{
    		printmsg("BL_DEBUG_MSG:checksum success !!\n");
    	}
        // checksum is correct..
        bootloader_send_ack(bl_rx_buffer[0],1);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2101      	movs	r1, #1
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fa5f 	bl	8003940 <bootloader_send_ack>
        bl_version=get_bootloader_version();
 8003482:	f000 fb87 	bl	8003b94 <get_bootloader_version>
 8003486:	4603      	mov	r3, r0
 8003488:	73bb      	strb	r3, [r7, #14]
        if(DEBUG_SERIAL_ENABLED_B)
        {
        	printmsg("BL_DEBUG_MSG:BL_VER : %d %#x\n",bl_version,bl_version);
        }
        bootloader_uart_write_data(&bl_version,1);
 800348a:	f107 030e 	add.w	r3, r7, #14
 800348e:	2101      	movs	r1, #1
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fb6b 	bl	8003b6c <bootloader_uart_write_data>
        //checksum is wrong send nack
        bootloader_send_nack();
    }


}
 8003496:	e001      	b.n	800349c <bootloader_handle_getver_cmd+0x68>
        bootloader_send_nack();
 8003498:	f000 fa6c 	bl	8003974 <bootloader_send_nack>
}
 800349c:	bf00      	nop
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <bootloader_handle_gethelp_cmd>:

/*Helper function to handle BL_GET_HELP command
 * Bootloader sends out All supported Command codes
 */
void bootloader_handle_gethelp_cmd(uint8_t *pBuffer)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
	{
		printmsg("BL_DEBUG_MSG:bootloader_handle_gethelp_cmd\n");
	}

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80034ac:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <bootloader_handle_gethelp_cmd+0x54>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	3301      	adds	r3, #1
 80034b2:	60fb      	str	r3, [r7, #12]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3b04      	subs	r3, #4
 80034b8:	4a0f      	ldr	r2, [pc, #60]	; (80034f8 <bootloader_handle_gethelp_cmd+0x54>)
 80034ba:	4413      	add	r3, r2
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60bb      	str	r3, [r7, #8]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	3b04      	subs	r3, #4
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	4619      	mov	r1, r3
 80034c8:	480b      	ldr	r0, [pc, #44]	; (80034f8 <bootloader_handle_gethelp_cmd+0x54>)
 80034ca:	f000 fa65 	bl	8003998 <bootloader_verify_crc>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10a      	bne.n	80034ea <bootloader_handle_gethelp_cmd+0x46>
	{
		if(DEBUG_SERIAL_ENABLED_B)
		{
			printmsg("BL_DEBUG_MSG:checksum success !!\n");
		}
        bootloader_send_ack(pBuffer[0],sizeof(supported_commands));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2108      	movs	r1, #8
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fa30 	bl	8003940 <bootloader_send_ack>
        bootloader_uart_write_data(supported_commands,sizeof(supported_commands) );
 80034e0:	2108      	movs	r1, #8
 80034e2:	4806      	ldr	r0, [pc, #24]	; (80034fc <bootloader_handle_gethelp_cmd+0x58>)
 80034e4:	f000 fb42 	bl	8003b6c <bootloader_uart_write_data>
			printmsg("BL_DEBUG_MSG:checksum fail !!\n");
		}
        bootloader_send_nack();
	}

}
 80034e8:	e001      	b.n	80034ee <bootloader_handle_gethelp_cmd+0x4a>
        bootloader_send_nack();
 80034ea:	f000 fa43 	bl	8003974 <bootloader_send_nack>
}
 80034ee:	bf00      	nop
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000164 	.word	0x20000164
 80034fc:	20000010 	.word	0x20000010

08003500 <bootloader_handle_getcid_cmd>:

/*Helper function to handle BL_GET_CID command */
void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	uint16_t bl_cid_num = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	81fb      	strh	r3, [r7, #14]
	{
		printmsg("BL_DEBUG_MSG:bootloader_handle_getcid_cmd\n");
	}

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 800350c:	4b16      	ldr	r3, [pc, #88]	; (8003568 <bootloader_handle_getcid_cmd+0x68>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	3301      	adds	r3, #1
 8003512:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	3b04      	subs	r3, #4
 8003518:	4a13      	ldr	r2, [pc, #76]	; (8003568 <bootloader_handle_getcid_cmd+0x68>)
 800351a:	4413      	add	r3, r2
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	3b04      	subs	r3, #4
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4619      	mov	r1, r3
 8003528:	480f      	ldr	r0, [pc, #60]	; (8003568 <bootloader_handle_getcid_cmd+0x68>)
 800352a:	f000 fa35 	bl	8003998 <bootloader_verify_crc>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d110      	bne.n	8003556 <bootloader_handle_getcid_cmd+0x56>
	{
		if(DEBUG_SERIAL_ENABLED_B)
		{
			printmsg("BL_DEBUG_MSG:checksum success !!\n");
		}
        bootloader_send_ack(pBuffer[0],2);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2102      	movs	r1, #2
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fa00 	bl	8003940 <bootloader_send_ack>
        bl_cid_num = get_mcu_chip_id();
 8003540:	f000 fb30 	bl	8003ba4 <get_mcu_chip_id>
 8003544:	4603      	mov	r3, r0
 8003546:	81fb      	strh	r3, [r7, #14]
        if(DEBUG_SERIAL_ENABLED_B)
        {
        	printmsg("BL_DEBUG_MSG:MCU id : %d %#x !!\n",bl_cid_num, bl_cid_num);
        }
        bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);
 8003548:	f107 030e 	add.w	r3, r7, #14
 800354c:	2102      	movs	r1, #2
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fb0c 	bl	8003b6c <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8003554:	e004      	b.n	8003560 <bootloader_handle_getcid_cmd+0x60>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8003556:	4805      	ldr	r0, [pc, #20]	; (800356c <bootloader_handle_getcid_cmd+0x6c>)
 8003558:	f7ff ff46 	bl	80033e8 <printmsg>
        bootloader_send_nack();
 800355c:	f000 fa0a 	bl	8003974 <bootloader_send_nack>
}
 8003560:	bf00      	nop
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20000164 	.word	0x20000164
 800356c:	08004cd4 	.word	0x08004cd4

08003570 <bootloader_handle_getrdp_cmd>:

/*Helper function to handle BL_GET_RDP_STATUS command */
void bootloader_handle_getrdp_cmd(uint8_t *pBuffer)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
    uint8_t rdp_level = 0x00;
 8003578:	2300      	movs	r3, #0
 800357a:	73fb      	strb	r3, [r7, #15]
    if(DEBUG_SERIAL_ENABLED_B)
    {
    	printmsg("BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\n");
    }
    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 800357c:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <bootloader_handle_getrdp_cmd+0x64>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	3b04      	subs	r3, #4
 8003588:	4a12      	ldr	r2, [pc, #72]	; (80035d4 <bootloader_handle_getrdp_cmd+0x64>)
 800358a:	4413      	add	r3, r2
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	3b04      	subs	r3, #4
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4619      	mov	r1, r3
 8003598:	480e      	ldr	r0, [pc, #56]	; (80035d4 <bootloader_handle_getrdp_cmd+0x64>)
 800359a:	f000 f9fd 	bl	8003998 <bootloader_verify_crc>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d110      	bne.n	80035c6 <bootloader_handle_getrdp_cmd+0x56>
	{
	    if(DEBUG_SERIAL_ENABLED_B)
	    {
	    	printmsg("BL_DEBUG_MSG:checksum success !!\n");
	    }
        bootloader_send_ack(pBuffer[0],1);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2101      	movs	r1, #1
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 f9c8 	bl	8003940 <bootloader_send_ack>
        rdp_level = get_flash_rdp_level();
 80035b0:	f000 fb0a 	bl	8003bc8 <get_flash_rdp_level>
 80035b4:	4603      	mov	r3, r0
 80035b6:	73fb      	strb	r3, [r7, #15]
        if(DEBUG_SERIAL_ENABLED_B)
        {
        	printmsg("BL_DEBUG_MSG:RDP level: %d %#x\n",rdp_level,rdp_level);
        }
        bootloader_uart_write_data(&rdp_level,1);
 80035b8:	f107 030f 	add.w	r3, r7, #15
 80035bc:	2101      	movs	r1, #1
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fad4 	bl	8003b6c <bootloader_uart_write_data>
		}
        bootloader_send_nack();
	}


}
 80035c4:	e001      	b.n	80035ca <bootloader_handle_getrdp_cmd+0x5a>
        bootloader_send_nack();
 80035c6:	f000 f9d5 	bl	8003974 <bootloader_send_nack>
}
 80035ca:	bf00      	nop
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000164 	.word	0x20000164

080035d8 <bootloader_handle_go_cmd>:

/*Helper function to handle BL_GO_TO_ADDR command */
void bootloader_handle_go_cmd(uint8_t *pBuffer)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
    uint32_t go_address=0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
    uint8_t addr_valid = ADDR_VALID;
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]
    uint8_t addr_invalid = ADDR_INVALID;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73bb      	strb	r3, [r7, #14]
    {
    	printmsg("BL_DEBUG_MSG:bootloader_handle_go_cmd\n");
    }

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80035ec:	4b1f      	ldr	r3, [pc, #124]	; (800366c <bootloader_handle_go_cmd+0x94>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	3301      	adds	r3, #1
 80035f2:	61bb      	str	r3, [r7, #24]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	3b04      	subs	r3, #4
 80035f8:	4a1c      	ldr	r2, [pc, #112]	; (800366c <bootloader_handle_go_cmd+0x94>)
 80035fa:	4413      	add	r3, r2
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	617b      	str	r3, [r7, #20]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	3b04      	subs	r3, #4
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4619      	mov	r1, r3
 8003608:	4818      	ldr	r0, [pc, #96]	; (800366c <bootloader_handle_go_cmd+0x94>)
 800360a:	f000 f9c5 	bl	8003998 <bootloader_verify_crc>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d124      	bne.n	800365e <bootloader_handle_go_cmd+0x86>
		if(DEBUG_SERIAL_ENABLED_B)
		{
			printmsg("BL_DEBUG_MSG:checksum success !!\n");
		}

        bootloader_send_ack(pBuffer[0],1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2101      	movs	r1, #1
 800361a:	4618      	mov	r0, r3
 800361c:	f000 f990 	bl	8003940 <bootloader_send_ack>

        //extract the go address
        go_address = *((uint32_t *)&pBuffer[2] );
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003626:	61fb      	str	r3, [r7, #28]
        if(DEBUG_SERIAL_ENABLED_B)
        {
        	printmsg("BL_DEBUG_MSG:GO addr: %#x\n",go_address);
        }

        if( verify_address(go_address) == ADDR_VALID )
 8003628:	69f8      	ldr	r0, [r7, #28]
 800362a:	f000 fae1 	bl	8003bf0 <verify_address>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10d      	bne.n	8003650 <bootloader_handle_go_cmd+0x78>
        {
            //tell host that address is fine
            bootloader_uart_write_data(&addr_valid,1);
 8003634:	f107 030f 	add.w	r3, r7, #15
 8003638:	2101      	movs	r1, #1
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fa96 	bl	8003b6c <bootloader_uart_write_data>
            Its not the duty of bootloader. so just trust and jump */

            /* Not doing the below line will result in hardfault exception for ARM cortex M */
            //watch : https://www.youtube.com/watch?v=VX_12SjnNhY

            go_address+=1; //make T bit =1
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	3301      	adds	r3, #1
 8003644:	61fb      	str	r3, [r7, #28]

            void (*lets_jump)(void) = (void *)go_address;
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	613b      	str	r3, [r7, #16]

            if(DEBUG_SERIAL_ENABLED_B)
            {
            	printmsg("BL_DEBUG_MSG: jumping to go address! \n");
            }
            lets_jump();
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4798      	blx	r3
		}
		bootloader_send_nack();
	}


}
 800364e:	e008      	b.n	8003662 <bootloader_handle_go_cmd+0x8a>
            bootloader_uart_write_data(&addr_invalid,1);
 8003650:	f107 030e 	add.w	r3, r7, #14
 8003654:	2101      	movs	r1, #1
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fa88 	bl	8003b6c <bootloader_uart_write_data>
}
 800365c:	e001      	b.n	8003662 <bootloader_handle_go_cmd+0x8a>
		bootloader_send_nack();
 800365e:	f000 f989 	bl	8003974 <bootloader_send_nack>
}
 8003662:	bf00      	nop
 8003664:	3720      	adds	r7, #32
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20000164 	.word	0x20000164

08003670 <bootloader_handle_flash_erase_cmd>:

/*Helper function to handle BL_FLASH_ERASE command */
void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
    uint8_t erase_status = 0x00;
 8003678:	2300      	movs	r3, #0
 800367a:	73fb      	strb	r3, [r7, #15]
    if(DEBUG_SERIAL_ENABLED_B)
    {
    	printmsg("BL_DEBUG_MSG:bootloader_handle_flash_erase_cmd\n");
    }
    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 800367c:	4b1f      	ldr	r3, [pc, #124]	; (80036fc <bootloader_handle_flash_erase_cmd+0x8c>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	3301      	adds	r3, #1
 8003682:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	3b04      	subs	r3, #4
 8003688:	4a1c      	ldr	r2, [pc, #112]	; (80036fc <bootloader_handle_flash_erase_cmd+0x8c>)
 800368a:	4413      	add	r3, r2
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	3b04      	subs	r3, #4
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4619      	mov	r1, r3
 8003698:	4818      	ldr	r0, [pc, #96]	; (80036fc <bootloader_handle_flash_erase_cmd+0x8c>)
 800369a:	f000 f97d 	bl	8003998 <bootloader_verify_crc>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d124      	bne.n	80036ee <bootloader_handle_flash_erase_cmd+0x7e>
	{
		if(DEBUG_SERIAL_ENABLED_B)
		{
			printmsg("BL_DEBUG_MSG:checksum success !!\n");
		}
        bootloader_send_ack(pBuffer[0],1);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2101      	movs	r1, #1
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 f948 	bl	8003940 <bootloader_send_ack>
        if(DEBUG_SERIAL_ENABLED_B)
        {
        	printmsg("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\n",pBuffer[2],pBuffer[3]);
        }

        HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,1);
 80036b0:	2201      	movs	r2, #1
 80036b2:	2120      	movs	r1, #32
 80036b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036b8:	f7fd fd34 	bl	8001124 <HAL_GPIO_WritePin>
        erase_status = execute_flash_erase(pBuffer[2] , pBuffer[3]);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3302      	adds	r3, #2
 80036c0:	781a      	ldrb	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3303      	adds	r3, #3
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	4619      	mov	r1, r3
 80036ca:	4610      	mov	r0, r2
 80036cc:	f000 fab4 	bl	8003c38 <execute_flash_erase>
 80036d0:	4603      	mov	r3, r0
 80036d2:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
 80036d4:	2200      	movs	r2, #0
 80036d6:	2120      	movs	r1, #32
 80036d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036dc:	f7fd fd22 	bl	8001124 <HAL_GPIO_WritePin>
        if(DEBUG_SERIAL_ENABLED_B)
        {
        	printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",erase_status);
        }

        bootloader_uart_write_data(&erase_status,1);
 80036e0:	f107 030f 	add.w	r3, r7, #15
 80036e4:	2101      	movs	r1, #1
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 fa40 	bl	8003b6c <bootloader_uart_write_data>
		{
			printmsg("BL_DEBUG_MSG:checksum fail !!\n");
		}
		bootloader_send_nack();
	}
}
 80036ec:	e001      	b.n	80036f2 <bootloader_handle_flash_erase_cmd+0x82>
		bootloader_send_nack();
 80036ee:	f000 f941 	bl	8003974 <bootloader_send_nack>
}
 80036f2:	bf00      	nop
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000164 	.word	0x20000164

08003700 <bootloader_handle_mem_write_cmd>:

/*Helper function to handle BL_MEM_WRITE command */
void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	uint8_t addr_valid = ADDR_VALID;
 8003708:	2300      	movs	r3, #0
 800370a:	77fb      	strb	r3, [r7, #31]
	uint8_t write_status = 0x00;
 800370c:	2300      	movs	r3, #0
 800370e:	73fb      	strb	r3, [r7, #15]
	uint8_t chksum =0, len=0;
 8003710:	2300      	movs	r3, #0
 8003712:	77bb      	strb	r3, [r7, #30]
 8003714:	2300      	movs	r3, #0
 8003716:	777b      	strb	r3, [r7, #29]
	len = pBuffer[0];
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	777b      	strb	r3, [r7, #29]
	uint8_t payload_len = pBuffer[6];
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	799b      	ldrb	r3, [r3, #6]
 8003722:	773b      	strb	r3, [r7, #28]

	uint32_t mem_address = *((uint32_t *) ( &pBuffer[2]) );
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800372a:	61bb      	str	r3, [r7, #24]

	chksum = pBuffer[len];
 800372c:	7f7b      	ldrb	r3, [r7, #29]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	4413      	add	r3, r2
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	77bb      	strb	r3, [r7, #30]
	{
		printmsg("BL_DEBUG_MSG:bootloader_handle_mem_write_cmd\n");
	}

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8003736:	4b25      	ldr	r3, [pc, #148]	; (80037cc <bootloader_handle_mem_write_cmd+0xcc>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	3301      	adds	r3, #1
 800373c:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	3b04      	subs	r3, #4
 8003742:	4a22      	ldr	r2, [pc, #136]	; (80037cc <bootloader_handle_mem_write_cmd+0xcc>)
 8003744:	4413      	add	r3, r2
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	613b      	str	r3, [r7, #16]


	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	3b04      	subs	r3, #4
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4619      	mov	r1, r3
 8003752:	481e      	ldr	r0, [pc, #120]	; (80037cc <bootloader_handle_mem_write_cmd+0xcc>)
 8003754:	f000 f920 	bl	8003998 <bootloader_verify_crc>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d130      	bne.n	80037c0 <bootloader_handle_mem_write_cmd+0xc0>
		if(DEBUG_SERIAL_ENABLED_B)
		{
			printmsg("BL_DEBUG_MSG:checksum success !!\n");
		}

        bootloader_send_ack(pBuffer[0],1);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2101      	movs	r1, #1
 8003764:	4618      	mov	r0, r3
 8003766:	f000 f8eb 	bl	8003940 <bootloader_send_ack>
        if(DEBUG_SERIAL_ENABLED_B)
        {
        	printmsg("BL_DEBUG_MSG: mem write address : %#x\n",mem_address);
        }

		if( verify_address(mem_address) == ADDR_VALID )
 800376a:	69b8      	ldr	r0, [r7, #24]
 800376c:	f000 fa40 	bl	8003bf0 <verify_address>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d11b      	bne.n	80037ae <bootloader_handle_mem_write_cmd+0xae>
			{
				printmsg("BL_DEBUG_MSG: valid mem write address\n");
			}

            //glow the led to indicate bootloader is currently writing to memory
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8003776:	2201      	movs	r2, #1
 8003778:	2120      	movs	r1, #32
 800377a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800377e:	f7fd fcd1 	bl	8001124 <HAL_GPIO_WritePin>

            //execute mem write
            write_status = execute_mem_write(&pBuffer[7],mem_address, payload_len);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3307      	adds	r3, #7
 8003786:	7f3a      	ldrb	r2, [r7, #28]
 8003788:	69b9      	ldr	r1, [r7, #24]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fa98 	bl	8003cc0 <execute_mem_write>
 8003790:	4603      	mov	r3, r0
 8003792:	73fb      	strb	r3, [r7, #15]

            //turn off the led to indicate memory write is over
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8003794:	2200      	movs	r2, #0
 8003796:	2120      	movs	r1, #32
 8003798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800379c:	f7fd fcc2 	bl	8001124 <HAL_GPIO_WritePin>

            //inform host about the status
            bootloader_uart_write_data(&write_status,1);
 80037a0:	f107 030f 	add.w	r3, r7, #15
 80037a4:	2101      	movs	r1, #1
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 f9e0 	bl	8003b6c <bootloader_uart_write_data>
			printmsg("BL_DEBUG_MSG:checksum fail !!\n");
		}
        bootloader_send_nack();
	}

}
 80037ac:	e00a      	b.n	80037c4 <bootloader_handle_mem_write_cmd+0xc4>
            write_status = ADDR_INVALID;
 80037ae:	2301      	movs	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]
            bootloader_uart_write_data(&write_status,1);
 80037b2:	f107 030f 	add.w	r3, r7, #15
 80037b6:	2101      	movs	r1, #1
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 f9d7 	bl	8003b6c <bootloader_uart_write_data>
}
 80037be:	e001      	b.n	80037c4 <bootloader_handle_mem_write_cmd+0xc4>
        bootloader_send_nack();
 80037c0:	f000 f8d8 	bl	8003974 <bootloader_send_nack>
}
 80037c4:	bf00      	nop
 80037c6:	3720      	adds	r7, #32
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000164 	.word	0x20000164

080037d0 <bootloader_handle_en_rw_protect>:

/*Helper function to handle BL_EN_RW_PROTECT  command */
void bootloader_handle_en_rw_protect(uint8_t *pBuffer)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x00;
 80037d8:	2300      	movs	r3, #0
 80037da:	73fb      	strb	r3, [r7, #15]
    {
    	printmsg("BL_DEBUG_MSG:bootloader_handle_endis_rw_protect\n");
    }

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80037dc:	4b19      	ldr	r3, [pc, #100]	; (8003844 <bootloader_handle_en_rw_protect+0x74>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	3301      	adds	r3, #1
 80037e2:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	3b04      	subs	r3, #4
 80037e8:	4a16      	ldr	r2, [pc, #88]	; (8003844 <bootloader_handle_en_rw_protect+0x74>)
 80037ea:	4413      	add	r3, r2
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	3b04      	subs	r3, #4
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4619      	mov	r1, r3
 80037f8:	4812      	ldr	r0, [pc, #72]	; (8003844 <bootloader_handle_en_rw_protect+0x74>)
 80037fa:	f000 f8cd 	bl	8003998 <bootloader_verify_crc>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d118      	bne.n	8003836 <bootloader_handle_en_rw_protect+0x66>
	{
		if(DEBUG_SERIAL_ENABLED_B)
		{
			printmsg("BL_DEBUG_MSG:checksum success !!\n");
		}
        bootloader_send_ack(pBuffer[0],1);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2101      	movs	r1, #1
 800380a:	4618      	mov	r0, r3
 800380c:	f000 f898 	bl	8003940 <bootloader_send_ack>

        status = configure_flash_sector_rw_protection(pBuffer[2] , pBuffer[3],0);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3302      	adds	r3, #2
 8003814:	7818      	ldrb	r0, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3303      	adds	r3, #3
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2200      	movs	r2, #0
 800381e:	4619      	mov	r1, r3
 8003820:	f000 fc66 	bl	80040f0 <configure_flash_sector_rw_protection>
 8003824:	4603      	mov	r3, r0
 8003826:	73fb      	strb	r3, [r7, #15]
        if(DEBUG_SERIAL_ENABLED_B)
        {
        	printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",status);
        }

        bootloader_uart_write_data(&status,1);
 8003828:	f107 030f 	add.w	r3, r7, #15
 800382c:	2101      	movs	r1, #1
 800382e:	4618      	mov	r0, r3
 8003830:	f000 f99c 	bl	8003b6c <bootloader_uart_write_data>
		}
        bootloader_send_nack();
	}


}
 8003834:	e001      	b.n	800383a <bootloader_handle_en_rw_protect+0x6a>
        bootloader_send_nack();
 8003836:	f000 f89d 	bl	8003974 <bootloader_send_nack>
}
 800383a:	bf00      	nop
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000164 	.word	0x20000164

08003848 <bootloader_handle_dis_rw_protect>:


/*Helper function to handle BL_EN_RW_PROTECT  command */
void bootloader_handle_dis_rw_protect(uint8_t *pBuffer)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x00;
 8003850:	2300      	movs	r3, #0
 8003852:	73fb      	strb	r3, [r7, #15]
    {
    	printmsg("BL_DEBUG_MSG:bootloader_handle_dis_rw_protect\n");
    }

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8003854:	4b16      	ldr	r3, [pc, #88]	; (80038b0 <bootloader_handle_dis_rw_protect+0x68>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	3301      	adds	r3, #1
 800385a:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	3b04      	subs	r3, #4
 8003860:	4a13      	ldr	r2, [pc, #76]	; (80038b0 <bootloader_handle_dis_rw_protect+0x68>)
 8003862:	4413      	add	r3, r2
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	3b04      	subs	r3, #4
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4619      	mov	r1, r3
 8003870:	480f      	ldr	r0, [pc, #60]	; (80038b0 <bootloader_handle_dis_rw_protect+0x68>)
 8003872:	f000 f891 	bl	8003998 <bootloader_verify_crc>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d113      	bne.n	80038a4 <bootloader_handle_dis_rw_protect+0x5c>
		if(DEBUG_SERIAL_ENABLED_B)
		{
			printmsg("BL_DEBUG_MSG:checksum success !!\n");
		}

		bootloader_send_ack(pBuffer[0],1);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2101      	movs	r1, #1
 8003882:	4618      	mov	r0, r3
 8003884:	f000 f85c 	bl	8003940 <bootloader_send_ack>
        status = configure_flash_sector_rw_protection(0,0,1);
 8003888:	2201      	movs	r2, #1
 800388a:	2100      	movs	r1, #0
 800388c:	2000      	movs	r0, #0
 800388e:	f000 fc2f 	bl	80040f0 <configure_flash_sector_rw_protection>
 8003892:	4603      	mov	r3, r0
 8003894:	73fb      	strb	r3, [r7, #15]
        if(DEBUG_SERIAL_ENABLED_B)
        {
        	printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",status);
        }

        bootloader_uart_write_data(&status,1);
 8003896:	f107 030f 	add.w	r3, r7, #15
 800389a:	2101      	movs	r1, #1
 800389c:	4618      	mov	r0, r3
 800389e:	f000 f965 	bl	8003b6c <bootloader_uart_write_data>
		}
		bootloader_send_nack();
	}


}
 80038a2:	e001      	b.n	80038a8 <bootloader_handle_dis_rw_protect+0x60>
		bootloader_send_nack();
 80038a4:	f000 f866 	bl	8003974 <bootloader_send_nack>
}
 80038a8:	bf00      	nop
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000164 	.word	0x20000164

080038b4 <bootloader_handle_mem_read>:

/*Helper function to handle BL_MEM_READ command */
void bootloader_handle_mem_read (uint8_t *pBuffer)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]


}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <bootloader_handle_read_sector_protection_status>:

/*Helper function to handle _BL_READ_SECTOR_P_STATUS command */
void bootloader_handle_read_sector_protection_status(uint8_t *pBuffer)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
	 {
		 printmsg("BL_DEBUG_MSG:bootloader_handle_read_sector_protection_status\n");
	 }

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80038d0:	4b15      	ldr	r3, [pc, #84]	; (8003928 <bootloader_handle_read_sector_protection_status+0x60>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	3301      	adds	r3, #1
 80038d6:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	3b04      	subs	r3, #4
 80038dc:	4a12      	ldr	r2, [pc, #72]	; (8003928 <bootloader_handle_read_sector_protection_status+0x60>)
 80038de:	4413      	add	r3, r2
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	3b04      	subs	r3, #4
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4619      	mov	r1, r3
 80038ec:	480e      	ldr	r0, [pc, #56]	; (8003928 <bootloader_handle_read_sector_protection_status+0x60>)
 80038ee:	f000 f853 	bl	8003998 <bootloader_verify_crc>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d110      	bne.n	800391a <bootloader_handle_read_sector_protection_status+0x52>
	{
		if(DEBUG_SERIAL_ENABLED_B)
		{
			printmsg("BL_DEBUG_MSG:checksum success !!\n");
		}
        bootloader_send_ack(pBuffer[0],2);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2102      	movs	r1, #2
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 f81e 	bl	8003940 <bootloader_send_ack>
        status=read_OB_rw_protection_status();
 8003904:	f000 fc36 	bl	8004174 <read_OB_rw_protection_status>
 8003908:	4603      	mov	r3, r0
 800390a:	81fb      	strh	r3, [r7, #14]
        if(DEBUG_SERIAL_ENABLED_B)
        {
        	printmsg("BL_DEBUG_MSG: nWRP status: %#x\n",status);
        }
        bootloader_uart_write_data((uint8_t*)&status,2);
 800390c:	f107 030e 	add.w	r3, r7, #14
 8003910:	2102      	movs	r1, #2
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f92a 	bl	8003b6c <bootloader_uart_write_data>
			printmsg("BL_DEBUG_MSG:checksum fail !!\n");
		}
        bootloader_send_nack();
	}

}
 8003918:	e001      	b.n	800391e <bootloader_handle_read_sector_protection_status+0x56>
        bootloader_send_nack();
 800391a:	f000 f82b 	bl	8003974 <bootloader_send_nack>
}
 800391e:	bf00      	nop
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20000164 	.word	0x20000164

0800392c <bootloader_handle_read_otp>:

/*Helper function to handle BL_OTP_READ command */
void bootloader_handle_read_otp(uint8_t *pBuffer)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]


}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <bootloader_send_ack>:

/*This function sends ACK if CRC matches along with "len to follow"*/
void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	460a      	mov	r2, r1
 800394a:	71fb      	strb	r3, [r7, #7]
 800394c:	4613      	mov	r3, r2
 800394e:	71bb      	strb	r3, [r7, #6]
	 //here we send 2 byte.. first byte is ack and the second byte is len value
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 8003950:	23a5      	movs	r3, #165	; 0xa5
 8003952:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 8003954:	79bb      	ldrb	r3, [r7, #6]
 8003956:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(D_UART,ack_buf,2,HAL_MAX_DELAY);
 8003958:	f107 010c 	add.w	r1, r7, #12
 800395c:	f04f 33ff 	mov.w	r3, #4294967295
 8003960:	2202      	movs	r2, #2
 8003962:	4803      	ldr	r0, [pc, #12]	; (8003970 <bootloader_send_ack+0x30>)
 8003964:	f7fe ff87 	bl	8002876 <HAL_UART_Transmit>

}
 8003968:	bf00      	nop
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	200000f4 	.word	0x200000f4

08003974 <bootloader_send_nack>:

/*This function sends NACK */
void bootloader_send_nack(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 800397a:	237f      	movs	r3, #127	; 0x7f
 800397c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(D_UART,&nack,1,HAL_MAX_DELAY);
 800397e:	1df9      	adds	r1, r7, #7
 8003980:	f04f 33ff 	mov.w	r3, #4294967295
 8003984:	2201      	movs	r2, #1
 8003986:	4803      	ldr	r0, [pc, #12]	; (8003994 <bootloader_send_nack+0x20>)
 8003988:	f7fe ff75 	bl	8002876 <HAL_UART_Transmit>
}
 800398c:	bf00      	nop
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	200000f4 	.word	0x200000f4

08003998 <bootloader_verify_crc>:

//This verifies the CRC of the given buffer in pData .
uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
    uint32_t uwCRCValue;
    //uint32_t test = 0xf;
    CRC->CR |= CRC_CR_RESET;
 80039a4:	4b1a      	ldr	r3, [pc, #104]	; (8003a10 <bootloader_verify_crc+0x78>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	4a19      	ldr	r2, [pc, #100]	; (8003a10 <bootloader_verify_crc+0x78>)
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6093      	str	r3, [r2, #8]

    for (uint32_t i=0 ; i < len ; i++)
 80039b0:	2300      	movs	r3, #0
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	e014      	b.n	80039e0 <bootloader_verify_crc+0x48>
	{
        uint32_t i_data = pData[i];
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	4413      	add	r3, r2
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	613b      	str	r3, [r7, #16]
        uint32_t i_data_test = (uint32_t)pData[i];
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	4413      	add	r3, r2
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	617b      	str	r3, [r7, #20]
        uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 80039ca:	f107 0310 	add.w	r3, r7, #16
 80039ce:	2201      	movs	r2, #1
 80039d0:	4619      	mov	r1, r3
 80039d2:	4810      	ldr	r0, [pc, #64]	; (8003a14 <bootloader_verify_crc+0x7c>)
 80039d4:	f7fc fe0c 	bl	80005f0 <HAL_CRC_Accumulate>
 80039d8:	61f8      	str	r0, [r7, #28]
    for (uint32_t i=0 ; i < len ; i++)
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	3301      	adds	r3, #1
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d3e6      	bcc.n	80039b6 <bootloader_verify_crc+0x1e>
        //test = HAL_CRC_Accumulate(&hcrc, &i_data_test, 1);
	}

	 /* Reset CRC Calculation Unit */
  __HAL_CRC_DR_RESET(&hcrc);
 80039e8:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <bootloader_verify_crc+0x7c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <bootloader_verify_crc+0x7c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	609a      	str	r2, [r3, #8]

	if( uwCRCValue == crc_host)
 80039f8:	69fa      	ldr	r2, [r7, #28]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d101      	bne.n	8003a04 <bootloader_verify_crc+0x6c>
	{
		return VERIFY_CRC_SUCCESS;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e000      	b.n	8003a06 <bootloader_verify_crc+0x6e>
	}

	return VERIFY_CRC_FAIL;
 8003a04:	2301      	movs	r3, #1
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3720      	adds	r7, #32
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40023000 	.word	0x40023000
 8003a14:	200000d0 	.word	0x200000d0

08003a18 <bootloader_uart_read_data>:
	return VERIFY_CRC_FAIL;
}


void bootloader_uart_read_data(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
	uint8_t rcv_len = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef uart_t;

	//HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	while(1)
	{
		memset(bl_rx_buffer,0,200);
 8003a22:	22c8      	movs	r2, #200	; 0xc8
 8003a24:	2100      	movs	r1, #0
 8003a26:	4837      	ldr	r0, [pc, #220]	; (8003b04 <bootloader_uart_read_data+0xec>)
 8003a28:	f000 fd3a 	bl	80044a0 <memset>
		//here we will read and decode the commands coming from host
		//first read only one byte from the host , which is the "length" field of the command packet
		uart_t = HAL_UART_Receive(D_UART,bl_rx_buffer,1,HAL_MAX_DELAY);
 8003a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a30:	2201      	movs	r2, #1
 8003a32:	4934      	ldr	r1, [pc, #208]	; (8003b04 <bootloader_uart_read_data+0xec>)
 8003a34:	4834      	ldr	r0, [pc, #208]	; (8003b08 <bootloader_uart_read_data+0xf0>)
 8003a36:	f7fe ffab 	bl	8002990 <HAL_UART_Receive>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	71bb      	strb	r3, [r7, #6]
		rcv_len= bl_rx_buffer[0];
 8003a3e:	4b31      	ldr	r3, [pc, #196]	; (8003b04 <bootloader_uart_read_data+0xec>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	71fb      	strb	r3, [r7, #7]
		uart_t = HAL_UART_Receive(D_UART,&bl_rx_buffer[1],rcv_len,HAL_MAX_DELAY);
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4c:	492f      	ldr	r1, [pc, #188]	; (8003b0c <bootloader_uart_read_data+0xf4>)
 8003a4e:	482e      	ldr	r0, [pc, #184]	; (8003b08 <bootloader_uart_read_data+0xf0>)
 8003a50:	f7fe ff9e 	bl	8002990 <HAL_UART_Receive>
 8003a54:	4603      	mov	r3, r0
 8003a56:	71bb      	strb	r3, [r7, #6]
		switch(bl_rx_buffer[1])
 8003a58:	4b2a      	ldr	r3, [pc, #168]	; (8003b04 <bootloader_uart_read_data+0xec>)
 8003a5a:	785b      	ldrb	r3, [r3, #1]
 8003a5c:	3b51      	subs	r3, #81	; 0x51
 8003a5e:	2b0b      	cmp	r3, #11
 8003a60:	d84a      	bhi.n	8003af8 <bootloader_uart_read_data+0xe0>
 8003a62:	a201      	add	r2, pc, #4	; (adr r2, 8003a68 <bootloader_uart_read_data+0x50>)
 8003a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a68:	08003a99 	.word	0x08003a99
 8003a6c:	08003aa1 	.word	0x08003aa1
 8003a70:	08003aa9 	.word	0x08003aa9
 8003a74:	08003ab1 	.word	0x08003ab1
 8003a78:	08003ab9 	.word	0x08003ab9
 8003a7c:	08003ac1 	.word	0x08003ac1
 8003a80:	08003ac9 	.word	0x08003ac9
 8003a84:	08003ad1 	.word	0x08003ad1
 8003a88:	08003ad9 	.word	0x08003ad9
 8003a8c:	08003ae1 	.word	0x08003ae1
 8003a90:	08003ae9 	.word	0x08003ae9
 8003a94:	08003af1 	.word	0x08003af1
		{
            case BL_GET_VER:
                bootloader_handle_getver_cmd(bl_rx_buffer);
 8003a98:	481a      	ldr	r0, [pc, #104]	; (8003b04 <bootloader_uart_read_data+0xec>)
 8003a9a:	f7ff fccb 	bl	8003434 <bootloader_handle_getver_cmd>
                break;
 8003a9e:	e02f      	b.n	8003b00 <bootloader_uart_read_data+0xe8>
            case BL_GET_HELP:
                bootloader_handle_gethelp_cmd(bl_rx_buffer);
 8003aa0:	4818      	ldr	r0, [pc, #96]	; (8003b04 <bootloader_uart_read_data+0xec>)
 8003aa2:	f7ff fcff 	bl	80034a4 <bootloader_handle_gethelp_cmd>
                break;
 8003aa6:	e02b      	b.n	8003b00 <bootloader_uart_read_data+0xe8>
            case BL_GET_CID:
                bootloader_handle_getcid_cmd(bl_rx_buffer);
 8003aa8:	4816      	ldr	r0, [pc, #88]	; (8003b04 <bootloader_uart_read_data+0xec>)
 8003aaa:	f7ff fd29 	bl	8003500 <bootloader_handle_getcid_cmd>
                break;
 8003aae:	e027      	b.n	8003b00 <bootloader_uart_read_data+0xe8>
            case BL_GET_RDP_STATUS:
                bootloader_handle_getrdp_cmd(bl_rx_buffer);
 8003ab0:	4814      	ldr	r0, [pc, #80]	; (8003b04 <bootloader_uart_read_data+0xec>)
 8003ab2:	f7ff fd5d 	bl	8003570 <bootloader_handle_getrdp_cmd>
                break;
 8003ab6:	e023      	b.n	8003b00 <bootloader_uart_read_data+0xe8>
            case BL_GO_TO_ADDR:
                bootloader_handle_go_cmd(bl_rx_buffer);
 8003ab8:	4812      	ldr	r0, [pc, #72]	; (8003b04 <bootloader_uart_read_data+0xec>)
 8003aba:	f7ff fd8d 	bl	80035d8 <bootloader_handle_go_cmd>
                break;
 8003abe:	e01f      	b.n	8003b00 <bootloader_uart_read_data+0xe8>
            case BL_FLASH_ERASE:
                bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8003ac0:	4810      	ldr	r0, [pc, #64]	; (8003b04 <bootloader_uart_read_data+0xec>)
 8003ac2:	f7ff fdd5 	bl	8003670 <bootloader_handle_flash_erase_cmd>
                break;
 8003ac6:	e01b      	b.n	8003b00 <bootloader_uart_read_data+0xe8>
            case BL_MEM_WRITE:
                bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8003ac8:	480e      	ldr	r0, [pc, #56]	; (8003b04 <bootloader_uart_read_data+0xec>)
 8003aca:	f7ff fe19 	bl	8003700 <bootloader_handle_mem_write_cmd>
                break;
 8003ace:	e017      	b.n	8003b00 <bootloader_uart_read_data+0xe8>
            case BL_EN_RW_PROTECT:
                bootloader_handle_en_rw_protect(bl_rx_buffer);
 8003ad0:	480c      	ldr	r0, [pc, #48]	; (8003b04 <bootloader_uart_read_data+0xec>)
 8003ad2:	f7ff fe7d 	bl	80037d0 <bootloader_handle_en_rw_protect>
                break;
 8003ad6:	e013      	b.n	8003b00 <bootloader_uart_read_data+0xe8>
            case BL_MEM_READ:
                bootloader_handle_mem_read(bl_rx_buffer);
 8003ad8:	480a      	ldr	r0, [pc, #40]	; (8003b04 <bootloader_uart_read_data+0xec>)
 8003ada:	f7ff feeb 	bl	80038b4 <bootloader_handle_mem_read>
                break;
 8003ade:	e00f      	b.n	8003b00 <bootloader_uart_read_data+0xe8>
            case BL_READ_SECTOR_P_STATUS:
                bootloader_handle_read_sector_protection_status(bl_rx_buffer);
 8003ae0:	4808      	ldr	r0, [pc, #32]	; (8003b04 <bootloader_uart_read_data+0xec>)
 8003ae2:	f7ff fef1 	bl	80038c8 <bootloader_handle_read_sector_protection_status>
                break;
 8003ae6:	e00b      	b.n	8003b00 <bootloader_uart_read_data+0xe8>
            case BL_OTP_READ:
                bootloader_handle_read_otp(bl_rx_buffer);
 8003ae8:	4806      	ldr	r0, [pc, #24]	; (8003b04 <bootloader_uart_read_data+0xec>)
 8003aea:	f7ff ff1f 	bl	800392c <bootloader_handle_read_otp>
                break;
 8003aee:	e007      	b.n	8003b00 <bootloader_uart_read_data+0xe8>
			case BL_DIS_R_W_PROTECT:
                bootloader_handle_dis_rw_protect(bl_rx_buffer);
 8003af0:	4804      	ldr	r0, [pc, #16]	; (8003b04 <bootloader_uart_read_data+0xec>)
 8003af2:	f7ff fea9 	bl	8003848 <bootloader_handle_dis_rw_protect>
                break;
 8003af6:	e003      	b.n	8003b00 <bootloader_uart_read_data+0xe8>
             default:
                printmsg("BL_DEBUG_MSG:Invalid command code received from host \n");
 8003af8:	4805      	ldr	r0, [pc, #20]	; (8003b10 <bootloader_uart_read_data+0xf8>)
 8003afa:	f7ff fc75 	bl	80033e8 <printmsg>
                break;
 8003afe:	bf00      	nop
		memset(bl_rx_buffer,0,200);
 8003b00:	e78f      	b.n	8003a22 <bootloader_uart_read_data+0xa>
 8003b02:	bf00      	nop
 8003b04:	20000164 	.word	0x20000164
 8003b08:	200000f4 	.word	0x200000f4
 8003b0c:	20000165 	.word	0x20000165
 8003b10:	08004cf4 	.word	0x08004cf4

08003b14 <bootloader_jump_to_user_app>:

	}

}
void bootloader_jump_to_user_app(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
	void (*app_reset_handler)(void);
	printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\r\n");
 8003b1a:	480f      	ldr	r0, [pc, #60]	; (8003b58 <bootloader_jump_to_user_app+0x44>)
 8003b1c:	f7ff fc64 	bl	80033e8 <printmsg>
	uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 8003b20:	4b0e      	ldr	r3, [pc, #56]	; (8003b5c <bootloader_jump_to_user_app+0x48>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	60fb      	str	r3, [r7, #12]
	printmsg("BL_DEBUG_MSG:msp_value : %#x\r\n",msp_value);
 8003b26:	68f9      	ldr	r1, [r7, #12]
 8003b28:	480d      	ldr	r0, [pc, #52]	; (8003b60 <bootloader_jump_to_user_app+0x4c>)
 8003b2a:	f7ff fc5d 	bl	80033e8 <printmsg>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	f383 8808 	msr	MSP, r3

	__set_MSP(msp_value);

	// Now fetch reset handler address of user app
	uint32_t resethandler_address = *(volatile uint32_t *)(FLASH_SECTOR2_BASE_ADDRESS+4);
 8003b38:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <bootloader_jump_to_user_app+0x50>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	60bb      	str	r3, [r7, #8]
	app_reset_handler = (void*)resethandler_address;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	607b      	str	r3, [r7, #4]
	printmsg("BL_DEBUG_MSG: app reset handler addr: %#x\r\n",app_reset_handler);
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	4808      	ldr	r0, [pc, #32]	; (8003b68 <bootloader_jump_to_user_app+0x54>)
 8003b46:	f7ff fc4f 	bl	80033e8 <printmsg>
	app_reset_handler();
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4798      	blx	r3
}
 8003b4e:	bf00      	nop
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	08004d2c 	.word	0x08004d2c
 8003b5c:	08008000 	.word	0x08008000
 8003b60:	08004d58 	.word	0x08004d58
 8003b64:	08008004 	.word	0x08008004
 8003b68:	08004d78 	.word	0x08004d78

08003b6c <bootloader_uart_write_data>:


/* This function writes data in to C_UART */
void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
    /*you can replace the below ST's USART driver API call with your MCUs driver API call */
	HAL_UART_Transmit(D_UART,pBuffer,len,HAL_MAX_DELAY);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4803      	ldr	r0, [pc, #12]	; (8003b90 <bootloader_uart_write_data+0x24>)
 8003b82:	f7fe fe78 	bl	8002876 <HAL_UART_Transmit>

}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	200000f4 	.word	0x200000f4

08003b94 <get_bootloader_version>:


//Just returns the macro value .
uint8_t get_bootloader_version(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  return (uint8_t)BL_VERSION;
 8003b98:	2310      	movs	r3, #16
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <get_mcu_chip_id>:

//Read the chip identifier or device Identifier
uint16_t get_mcu_chip_id(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
	and the die revision. It is part of the DBG_MCU component and is mapped on the
	external PPB bus (see Section 33.16 on page 1304). This code is accessible using the
	JTAG debug pCat.2ort (4 to 5 pins) or the SW debug port (two pins) or by the user software.
	It is even accessible while the MCU is under system reset. */
	uint16_t cid;
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <get_mcu_chip_id+0x20>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb4:	80fb      	strh	r3, [r7, #6]
	return  cid;
 8003bb6:	88fb      	ldrh	r3, [r7, #6]

}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	e0042000 	.word	0xe0042000

08003bc8 <get_flash_rdp_level>:

/*This function reads the RDP ( Read protection option byte) value
 *For more info refer "Table 9. Description of the option bytes" in stm32f446xx RM
 */
uint8_t get_flash_rdp_level(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0

	uint8_t rdp_status=0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	71fb      	strb	r3, [r7, #7]
	FLASH_OBProgramInitTypeDef  ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
	rdp_status = (uint8_t)ob_handle.RDPLevel;
#else

	 volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFFF800;
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <get_flash_rdp_level+0x24>)
 8003bd4:	603b      	str	r3, [r7, #0]
	 rdp_status =  (uint8_t)(*pOB_addr & 0xFF) ;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	71fb      	strb	r3, [r7, #7]
#endif

	return rdp_status;
 8003bdc:	79fb      	ldrb	r3, [r7, #7]

}
 8003bde:	4618      	mov	r0, r3
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	1ffff800 	.word	0x1ffff800

08003bf0 <verify_address>:



//verify the address sent by the host .
uint8_t verify_address(uint32_t go_address)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
	//can we jump to backup sram memory ? yes
	//can we jump to peripheral memory ? its possible , but dont allow. so no
	//can we jump to external memory ? yes.

//incomplete -poorly written .. optimize it
	if ( go_address >= SRAM_BASE && go_address <= SRAM1_END)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bfe:	d305      	bcc.n	8003c0c <verify_address+0x1c>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a0b      	ldr	r2, [pc, #44]	; (8003c30 <verify_address+0x40>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d801      	bhi.n	8003c0c <verify_address+0x1c>
	{
		return ADDR_VALID;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e00a      	b.n	8003c22 <verify_address+0x32>
	}
	else if ( go_address >= FLASH_BASE && go_address <= 0x0807FFFFU)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c12:	d305      	bcc.n	8003c20 <verify_address+0x30>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a07      	ldr	r2, [pc, #28]	; (8003c34 <verify_address+0x44>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d801      	bhi.n	8003c20 <verify_address+0x30>
	{
		return ADDR_VALID;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	e000      	b.n	8003c22 <verify_address+0x32>
	}
	else
	{
		return ADDR_INVALID;
 8003c20:	2301      	movs	r3, #1
	}
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20014000 	.word	0x20014000
 8003c34:	0807ffff 	.word	0x0807ffff

08003c38 <execute_flash_erase>:

 uint8_t execute_flash_erase(uint8_t page_number , uint8_t number_of_page)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	; 0x28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	460a      	mov	r2, r1
 8003c42:	71fb      	strb	r3, [r7, #7]
 8003c44:	4613      	mov	r3, r2
 8003c46:	71bb      	strb	r3, [r7, #6]
	if( number_of_page > 255 )
		return INVALID_SECTOR;

	if( (page_number == 0xff ) || (page_number <= 255) )
	{
		if(page_number == (uint8_t) 0xff)
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	2bff      	cmp	r3, #255	; 0xff
 8003c4c:	d107      	bne.n	8003c5e <execute_flash_erase+0x26>
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	613b      	str	r3, [r7, #16]
			flashErase_handle.PageAddress = FLASH_BASE;
 8003c52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c56:	617b      	str	r3, [r7, #20]
			flashErase_handle.NbPages = 255;
 8003c58:	23ff      	movs	r3, #255	; 0xff
 8003c5a:	61bb      	str	r3, [r7, #24]
 8003c5c:	e01c      	b.n	8003c98 <execute_flash_erase+0x60>
		}
		else
		{
		    // Here we are just calculating how many sectors needs to erased
			uint8_t remanining_pages = 256 - page_number;
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	425b      	negs	r3, r3
 8003c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			uint32_t page_address = FLASH_BASE+(FLASH_PAGE_SIZE*page_number);
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	02db      	lsls	r3, r3, #11
 8003c6a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003c6e:	623b      	str	r3, [r7, #32]
            if( number_of_page > remanining_pages)
 8003c70:	79ba      	ldrb	r2, [r7, #6]
 8003c72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d903      	bls.n	8003c82 <execute_flash_erase+0x4a>
            {
            	number_of_page = remanining_pages;
 8003c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c7e:	71bb      	strb	r3, [r7, #6]
 8003c80:	e004      	b.n	8003c8c <execute_flash_erase+0x54>
            }
            else if(number_of_page < 1)
 8003c82:	79bb      	ldrb	r3, [r7, #6]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <execute_flash_erase+0x54>
            {
            	return INVALID_SECTOR;
 8003c88:	2304      	movs	r3, #4
 8003c8a:	e014      	b.n	8003cb6 <execute_flash_erase+0x7e>
            }
            else
            {
            	//do nothing
            }
			flashErase_handle.TypeErase = FLASH_TYPEERASE_PAGES;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]
			flashErase_handle.PageAddress = page_address; // this is the initial sector
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	617b      	str	r3, [r7, #20]
			flashErase_handle.NbPages = number_of_page;
 8003c94:	79bb      	ldrb	r3, [r7, #6]
 8003c96:	61bb      	str	r3, [r7, #24]
		}
		//flashErase_handle.Banks = FLASH_BANK_1;

		//Get access to touch the flash registers
		HAL_FLASH_Unlock();
 8003c98:	f7fc fea8 	bl	80009ec <HAL_FLASH_Unlock>
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &pageError);
 8003c9c:	f107 020c 	add.w	r2, r7, #12
 8003ca0:	f107 0310 	add.w	r3, r7, #16
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fc ff90 	bl	8000bcc <HAL_FLASHEx_Erase>
 8003cac:	4603      	mov	r3, r0
 8003cae:	77fb      	strb	r3, [r7, #31]
		HAL_FLASH_Lock();
 8003cb0:	f7fc fec2 	bl	8000a38 <HAL_FLASH_Lock>

		return status;
 8003cb4:	7ffb      	ldrb	r3, [r7, #31]
	}



	return INVALID_SECTOR;
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3728      	adds	r7, #40	; 0x28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <execute_mem_write>:

/*This function writes the contents of pBuffer to  "mem_address" byte by byte */
//Note1 : Currently this function supports writing to Flash only .
//Note2 : This functions does not check whether "mem_address" is a valid address of the flash range.
uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 8003cc0:	b590      	push	{r4, r7, lr}
 8003cc2:	b089      	sub	sp, #36	; 0x24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
    uint8_t status=HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	77fb      	strb	r3, [r7, #31]
    uint8_t count = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	77bb      	strb	r3, [r7, #30]
    uint16_t packed_data_u16 = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	83bb      	strh	r3, [r7, #28]
    uint64_t packed_data_u64 =0;
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	f04f 0400 	mov.w	r4, #0
 8003ce0:	e9c7 3404 	strd	r3, r4, [r7, #16]
		4. Wait until the BSY bit is reset in the FLASH_SR register.
		5. Check the EOP flag in the FLASH_SR register (it is set when the programming
			operation has succeeded), and then clear it by software.
     */

    if(IS_FLASH_PROGRAM_ADDRESS(mem_address))
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cea:	d35a      	bcc.n	8003da2 <execute_mem_write+0xe2>
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4a30      	ldr	r2, [pc, #192]	; (8003db0 <execute_mem_write+0xf0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d856      	bhi.n	8003da2 <execute_mem_write+0xe2>
    {
		//We have to unlock flash module to get control of registers
		HAL_FLASH_Unlock();
 8003cf4:	f7fc fe7a 	bl	80009ec <HAL_FLASH_Unlock>

		for(uint32_t i = 0 ; i <len ; i=i+2)
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	e04a      	b.n	8003d94 <execute_mem_write+0xd4>
		{
			count = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	77bb      	strb	r3, [r7, #30]
			packed_data_u16 = 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	83bb      	strh	r3, [r7, #28]
			packed_data_u64 = 0;
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	f04f 0400 	mov.w	r4, #0
 8003d0e:	e9c7 3404 	strd	r3, r4, [r7, #16]
			//Here we program the flash byte by byte but now we need two byte uint16
			//status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
			for(count = 0;count<2;count++)
 8003d12:	2300      	movs	r3, #0
 8003d14:	77bb      	strb	r3, [r7, #30]
 8003d16:	e028      	b.n	8003d6a <execute_mem_write+0xaa>
			{
				if(count == 0)
 8003d18:	7fbb      	ldrb	r3, [r7, #30]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d108      	bne.n	8003d30 <execute_mem_write+0x70>
				{
					packed_data_u16 ^= pBuffer[i];
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	4413      	add	r3, r2
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	8bbb      	ldrh	r3, [r7, #28]
 8003d2a:	4053      	eors	r3, r2
 8003d2c:	83bb      	strh	r3, [r7, #28]
 8003d2e:	e019      	b.n	8003d64 <execute_mem_write+0xa4>

				}
				else if(count == 1 && i+1 < len)
 8003d30:	7fbb      	ldrb	r3, [r7, #30]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d110      	bne.n	8003d58 <execute_mem_write+0x98>
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d90b      	bls.n	8003d58 <execute_mem_write+0x98>
				{
					packed_data_u16 ^= (uint16_t)(pBuffer[i+1] << 8);
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	3301      	adds	r3, #1
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4413      	add	r3, r2
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	8bbb      	ldrh	r3, [r7, #28]
 8003d52:	4053      	eors	r3, r2
 8003d54:	83bb      	strh	r3, [r7, #28]
 8003d56:	e005      	b.n	8003d64 <execute_mem_write+0xa4>
				}
				else
				{
					packed_data_u16 ^= 0xFF00u;
 8003d58:	8bbb      	ldrh	r3, [r7, #28]
 8003d5a:	f083 23ff 	eor.w	r3, r3, #4278255360	; 0xff00ff00
 8003d5e:	f483 037f 	eor.w	r3, r3, #16711680	; 0xff0000
 8003d62:	83bb      	strh	r3, [r7, #28]
			for(count = 0;count<2;count++)
 8003d64:	7fbb      	ldrb	r3, [r7, #30]
 8003d66:	3301      	adds	r3, #1
 8003d68:	77bb      	strb	r3, [r7, #30]
 8003d6a:	7fbb      	ldrb	r3, [r7, #30]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d9d3      	bls.n	8003d18 <execute_mem_write+0x58>
				}
			}
			// HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
			packed_data_u64 = (uint64_t)packed_data_u16;
 8003d70:	8bbb      	ldrh	r3, [r7, #28]
 8003d72:	f04f 0400 	mov.w	r4, #0
 8003d76:	e9c7 3404 	strd	r3, r4, [r7, #16]
			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,mem_address+i,packed_data_u64);
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	18d1      	adds	r1, r2, r3
 8003d80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d84:	2001      	movs	r0, #1
 8003d86:	f7fc fdc1 	bl	800090c <HAL_FLASH_Program>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	77fb      	strb	r3, [r7, #31]
		for(uint32_t i = 0 ; i <len ; i=i+2)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	3302      	adds	r3, #2
 8003d92:	61bb      	str	r3, [r7, #24]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d3b0      	bcc.n	8003cfe <execute_mem_write+0x3e>
		}

		HAL_FLASH_Lock();
 8003d9c:	f7fc fe4c 	bl	8000a38 <HAL_FLASH_Lock>
 8003da0:	e001      	b.n	8003da6 <execute_mem_write+0xe6>
	}
    else
    {
    	status = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 8003da6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3724      	adds	r7, #36	; 0x24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd90      	pop	{r4, r7, pc}
 8003db0:	0807ffff 	.word	0x0807ffff

08003db4 <page_details_to_2pages>:

uint32_t page_details_to_2pages(uint8_t page_details)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	71fb      	strb	r3, [r7, #7]
	uint32_t return_register = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
	if(page_details <= 15)
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	2b0f      	cmp	r3, #15
 8003dc6:	d82c      	bhi.n	8003e22 <page_details_to_2pages+0x6e>
	{
		//bits 0-7 reflect 2 pages WRP0 WRP0: Write-protects pages 0 to 15
		if(page_details < 2)
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d802      	bhi.n	8003dd4 <page_details_to_2pages+0x20>
		{
			return_register =1;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	e099      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
		else if(page_details < 4)
 8003dd4:	79fb      	ldrb	r3, [r7, #7]
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d802      	bhi.n	8003de0 <page_details_to_2pages+0x2c>
		{
			return_register =2;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	e093      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
		else if(page_details < 6)
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	2b05      	cmp	r3, #5
 8003de4:	d802      	bhi.n	8003dec <page_details_to_2pages+0x38>
		{
			return_register =4;
 8003de6:	2304      	movs	r3, #4
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	e08d      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
		else if(page_details < 8)
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	2b07      	cmp	r3, #7
 8003df0:	d802      	bhi.n	8003df8 <page_details_to_2pages+0x44>
		{
			return_register =8;
 8003df2:	2308      	movs	r3, #8
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	e087      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
		else if(page_details < 10)
 8003df8:	79fb      	ldrb	r3, [r7, #7]
 8003dfa:	2b09      	cmp	r3, #9
 8003dfc:	d802      	bhi.n	8003e04 <page_details_to_2pages+0x50>
		{
			return_register =16;
 8003dfe:	2310      	movs	r3, #16
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	e081      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
		else if(page_details < 12)
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	2b0b      	cmp	r3, #11
 8003e08:	d802      	bhi.n	8003e10 <page_details_to_2pages+0x5c>
		{
			return_register =32;
 8003e0a:	2320      	movs	r3, #32
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	e07b      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
		else if(page_details < 14)
 8003e10:	79fb      	ldrb	r3, [r7, #7]
 8003e12:	2b0d      	cmp	r3, #13
 8003e14:	d802      	bhi.n	8003e1c <page_details_to_2pages+0x68>
		{
			return_register =64;
 8003e16:	2340      	movs	r3, #64	; 0x40
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	e075      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
		else
		{
			return_register =128;
 8003e1c:	2380      	movs	r3, #128	; 0x80
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	e072      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
	}
	else if(page_details <= 31)
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	2b1f      	cmp	r3, #31
 8003e26:	d834      	bhi.n	8003e92 <page_details_to_2pages+0xde>
	{
		if(page_details < 18)
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	2b11      	cmp	r3, #17
 8003e2c:	d803      	bhi.n	8003e36 <page_details_to_2pages+0x82>
		{
			return_register =256;
 8003e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	e068      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
		else if(page_details < 20)
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	2b13      	cmp	r3, #19
 8003e3a:	d803      	bhi.n	8003e44 <page_details_to_2pages+0x90>
		{
			return_register =512;
 8003e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	e061      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
		else if(page_details < 22)
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	2b15      	cmp	r3, #21
 8003e48:	d803      	bhi.n	8003e52 <page_details_to_2pages+0x9e>
		{
			return_register =1024;
 8003e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	e05a      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
		else if(page_details < 24)
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	2b17      	cmp	r3, #23
 8003e56:	d803      	bhi.n	8003e60 <page_details_to_2pages+0xac>
		{
			return_register =2048;
 8003e58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	e053      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
		else if(page_details < 26)
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	2b19      	cmp	r3, #25
 8003e64:	d803      	bhi.n	8003e6e <page_details_to_2pages+0xba>
		{
			return_register =4096;
 8003e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	e04c      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
		else if(page_details < 28)
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	2b1b      	cmp	r3, #27
 8003e72:	d803      	bhi.n	8003e7c <page_details_to_2pages+0xc8>
		{
			return_register =8192;
 8003e74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	e045      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
		else if(page_details < 30)
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	2b1d      	cmp	r3, #29
 8003e80:	d803      	bhi.n	8003e8a <page_details_to_2pages+0xd6>
		{
			return_register =16384;
 8003e82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	e03e      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
		else
		{
			return_register =32768;
 8003e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	e03a      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
	}
	else if(page_details <= 47)
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	2b2f      	cmp	r3, #47	; 0x2f
 8003e96:	d834      	bhi.n	8003f02 <page_details_to_2pages+0x14e>
	{
		if(page_details < 34)
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	2b21      	cmp	r3, #33	; 0x21
 8003e9c:	d803      	bhi.n	8003ea6 <page_details_to_2pages+0xf2>
		{
			return_register =65536;
 8003e9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	e030      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
		else if(page_details < 36)
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	2b23      	cmp	r3, #35	; 0x23
 8003eaa:	d803      	bhi.n	8003eb4 <page_details_to_2pages+0x100>
		{
			return_register =131072;
 8003eac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	e029      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
		else if(page_details < 38)
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	2b25      	cmp	r3, #37	; 0x25
 8003eb8:	d803      	bhi.n	8003ec2 <page_details_to_2pages+0x10e>
		{
			return_register =262144;
 8003eba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	e022      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
		else if(page_details < 40)
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	2b27      	cmp	r3, #39	; 0x27
 8003ec6:	d803      	bhi.n	8003ed0 <page_details_to_2pages+0x11c>
		{
			return_register =524288;
 8003ec8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	e01b      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
		else if(page_details < 42)
 8003ed0:	79fb      	ldrb	r3, [r7, #7]
 8003ed2:	2b29      	cmp	r3, #41	; 0x29
 8003ed4:	d803      	bhi.n	8003ede <page_details_to_2pages+0x12a>
		{
			return_register =1048576;
 8003ed6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	e014      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
		else if(page_details < 44)
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	2b2b      	cmp	r3, #43	; 0x2b
 8003ee2:	d803      	bhi.n	8003eec <page_details_to_2pages+0x138>
		{
			return_register =2097152;
 8003ee4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	e00d      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
		else if(page_details < 46)
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	2b2d      	cmp	r3, #45	; 0x2d
 8003ef0:	d803      	bhi.n	8003efa <page_details_to_2pages+0x146>
		{
			return_register =4194304;
 8003ef2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	e006      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
		else
		{
			return_register =8388608;
 8003efa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	e002      	b.n	8003f08 <page_details_to_2pages+0x154>
		}
	}
	else
	{
		return_register =0xFF000000;
 8003f02:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003f06:	60fb      	str	r3, [r7, #12]
	}
	return return_register;
 8003f08:	68fb      	ldr	r3, [r7, #12]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <set_flash_rdp_level>:

HAL_StatusTypeDef set_flash_rdp_level(uint8_t level)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08a      	sub	sp, #40	; 0x28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef rdp_status = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Check the parameters */
	assert_param(IS_OB_RDP_LEVEL(level));
	HAL_FLASH_OB_Unlock();
 8003f28:	f7fc fd96 	bl	8000a58 <HAL_FLASH_OB_Unlock>
	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8003f2c:	bf00      	nop
 8003f2e:	4b1a      	ldr	r3, [pc, #104]	; (8003f98 <set_flash_rdp_level+0x80>)
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d0f9      	beq.n	8003f2e <set_flash_rdp_level+0x16>
	FLASH_OBProgramInitTypeDef  ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
 8003f3a:	f107 030c 	add.w	r3, r7, #12
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fc feae 	bl	8000ca0 <HAL_FLASHEx_OBGetConfig>


	/* Enable the Option Bytes Programming operation */
	SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8003f44:	4b14      	ldr	r3, [pc, #80]	; (8003f98 <set_flash_rdp_level+0x80>)
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	4a13      	ldr	r2, [pc, #76]	; (8003f98 <set_flash_rdp_level+0x80>)
 8003f4a:	f043 0310 	orr.w	r3, r3, #16
 8003f4e:	6113      	str	r3, [r2, #16]

	WRITE_REG(OB->RDP, level);
 8003f50:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <set_flash_rdp_level+0x84>)
 8003f52:	79fa      	ldrb	r2, [r7, #7]
 8003f54:	b292      	uxth	r2, r2
 8003f56:	801a      	strh	r2, [r3, #0]

	/* Wait for last operation to be completed */
	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8003f58:	bf00      	nop
 8003f5a:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <set_flash_rdp_level+0x80>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d0f9      	beq.n	8003f5a <set_flash_rdp_level+0x42>

	/* if the program operation is completed, disable the OPTPG Bit */
	CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8003f66:	4b0c      	ldr	r3, [pc, #48]	; (8003f98 <set_flash_rdp_level+0x80>)
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	4a0b      	ldr	r2, [pc, #44]	; (8003f98 <set_flash_rdp_level+0x80>)
 8003f6c:	f023 0310 	bic.w	r3, r3, #16
 8003f70:	6113      	str	r3, [r2, #16]

	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8003f72:	bf00      	nop
 8003f74:	4b08      	ldr	r3, [pc, #32]	; (8003f98 <set_flash_rdp_level+0x80>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d0f9      	beq.n	8003f74 <set_flash_rdp_level+0x5c>
	HAL_FLASH_OB_Lock();
 8003f80:	f7fc fd86 	bl	8000a90 <HAL_FLASH_OB_Lock>

	rdp_status = ob_handle.RDPLevel;
 8003f84:	7e3b      	ldrb	r3, [r7, #24]
 8003f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return rdp_status;
 8003f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27

}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3728      	adds	r7, #40	; 0x28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40022000 	.word	0x40022000
 8003f9c:	1ffff800 	.word	0x1ffff800

08003fa0 <disable_write_flash_prot>:

HAL_StatusTypeDef disable_write_flash_prot(uint8_t page_number)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	71fb      	strb	r3, [r7, #7]
    uint16_t WRP0_Data = 0xFFFFU;
 8003faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fae:	83bb      	strh	r3, [r7, #28]
    uint16_t WRP1_Data = 0xFFFFU;
 8003fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fb4:	837b      	strh	r3, [r7, #26]
    uint16_t WRP2_Data = 0xFFFFU;
 8003fb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fba:	833b      	strh	r3, [r7, #24]
    uint16_t WRP3_Data = 0xFFFFU;
 8003fbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fc0:	82fb      	strh	r3, [r7, #22]
    uint32_t flash_reg = (uint32_t)(READ_REG(FLASH->WRPR));
 8003fc2:	4b49      	ldr	r3, [pc, #292]	; (80040e8 <disable_write_flash_prot+0x148>)
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	613b      	str	r3, [r7, #16]
    uint32_t WriteProtectPage = 1;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	60fb      	str	r3, [r7, #12]
    HAL_StatusTypeDef status = HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	77fb      	strb	r3, [r7, #31]
    status = HAL_FLASH_OB_Unlock();
 8003fd0:	f7fc fd42 	bl	8000a58 <HAL_FLASH_OB_Unlock>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	77fb      	strb	r3, [r7, #31]
    	WriteProtectPage = page_details_to_2pages(page_number);
 8003fd8:	79fb      	ldrb	r3, [r7, #7]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff feea 	bl	8003db4 <page_details_to_2pages>
 8003fe0:	60f8      	str	r0, [r7, #12]
    	assert_param(IS_OB_WRP(WriteProtectPage));
    	WriteProtectPage = (flash_reg | WriteProtectPage);
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
		#if defined(OB_WRP_PAGES0TO15MASK)
		  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	83bb      	strh	r3, [r7, #28]
		#endif /* OB_WRP_PAGES0TO31MASK */

		#if defined(OB_WRP_PAGES16TO31MASK)
		  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	0a1b      	lsrs	r3, r3, #8
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	837b      	strh	r3, [r7, #26]
		#endif /* OB_WRP_PAGES32TO63MASK */

		#if defined(OB_WRP_PAGES32TO47MASK)
		  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	0c1b      	lsrs	r3, r3, #16
 8004000:	b29b      	uxth	r3, r3
 8004002:	b2db      	uxtb	r3, r3
 8004004:	833b      	strh	r3, [r7, #24]
		#endif /* OB_WRP_PAGES32TO47MASK */

		#if defined(OB_WRP_PAGES48TO127MASK)
		  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U);
		#elif defined(OB_WRP_PAGES48TO255MASK)
		  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO255MASK) >> 24U);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	0e1b      	lsrs	r3, r3, #24
 800400a:	82fb      	strh	r3, [r7, #22]
		#endif

	if (status == HAL_OK)
 800400c:	7ffb      	ldrb	r3, [r7, #31]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d162      	bne.n	80040d8 <disable_write_flash_prot+0x138>
	{
		SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8004012:	4b35      	ldr	r3, [pc, #212]	; (80040e8 <disable_write_flash_prot+0x148>)
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	4a34      	ldr	r2, [pc, #208]	; (80040e8 <disable_write_flash_prot+0x148>)
 8004018:	f043 0310 	orr.w	r3, r3, #16
 800401c:	6113      	str	r3, [r2, #16]
		#if defined(OB_WRP0_WRP0)
			  if(WRP0_Data != 0xFFU)
 800401e:	8bbb      	ldrh	r3, [r7, #28]
 8004020:	2bff      	cmp	r3, #255	; 0xff
 8004022:	d00d      	beq.n	8004040 <disable_write_flash_prot+0xa0>
			  {
				OB->WRP0 |= WRP0_Data;
 8004024:	4b31      	ldr	r3, [pc, #196]	; (80040ec <disable_write_flash_prot+0x14c>)
 8004026:	891b      	ldrh	r3, [r3, #8]
 8004028:	b29a      	uxth	r2, r3
 800402a:	4930      	ldr	r1, [pc, #192]	; (80040ec <disable_write_flash_prot+0x14c>)
 800402c:	8bbb      	ldrh	r3, [r7, #28]
 800402e:	4313      	orrs	r3, r2
 8004030:	b29b      	uxth	r3, r3
 8004032:	810b      	strh	r3, [r1, #8]

				/* Wait for last operation to be completed */
				status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004034:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004038:	f7fc fd56 	bl	8000ae8 <FLASH_WaitForLastOperation>
 800403c:	4603      	mov	r3, r0
 800403e:	77fb      	strb	r3, [r7, #31]
			  }
		#endif /* OB_WRP0_WRP0 */

		#if defined(OB_WRP1_WRP1)
			  if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8004040:	7ffb      	ldrb	r3, [r7, #31]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d111      	bne.n	800406a <disable_write_flash_prot+0xca>
 8004046:	8b7b      	ldrh	r3, [r7, #26]
 8004048:	2bff      	cmp	r3, #255	; 0xff
 800404a:	d00e      	beq.n	800406a <disable_write_flash_prot+0xca>
			  {
				OB->WRP1 |= WRP1_Data;
 800404c:	4b27      	ldr	r3, [pc, #156]	; (80040ec <disable_write_flash_prot+0x14c>)
 800404e:	895b      	ldrh	r3, [r3, #10]
 8004050:	b29a      	uxth	r2, r3
 8004052:	4926      	ldr	r1, [pc, #152]	; (80040ec <disable_write_flash_prot+0x14c>)
 8004054:	8b7b      	ldrh	r3, [r7, #26]
 8004056:	4313      	orrs	r3, r2
 8004058:	b29b      	uxth	r3, r3
 800405a:	814b      	strh	r3, [r1, #10]

				/* Wait for last operation to be completed */
				while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 800405c:	bf00      	nop
 800405e:	4b22      	ldr	r3, [pc, #136]	; (80040e8 <disable_write_flash_prot+0x148>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b01      	cmp	r3, #1
 8004068:	d0f9      	beq.n	800405e <disable_write_flash_prot+0xbe>
			  }
		#endif /* OB_WRP1_WRP1 */

		#if defined(OB_WRP2_WRP2)
			  if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 800406a:	7ffb      	ldrb	r3, [r7, #31]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d111      	bne.n	8004094 <disable_write_flash_prot+0xf4>
 8004070:	8b3b      	ldrh	r3, [r7, #24]
 8004072:	2bff      	cmp	r3, #255	; 0xff
 8004074:	d00e      	beq.n	8004094 <disable_write_flash_prot+0xf4>
			  {
				OB->WRP2 |= WRP2_Data;
 8004076:	4b1d      	ldr	r3, [pc, #116]	; (80040ec <disable_write_flash_prot+0x14c>)
 8004078:	899b      	ldrh	r3, [r3, #12]
 800407a:	b29a      	uxth	r2, r3
 800407c:	491b      	ldr	r1, [pc, #108]	; (80040ec <disable_write_flash_prot+0x14c>)
 800407e:	8b3b      	ldrh	r3, [r7, #24]
 8004080:	4313      	orrs	r3, r2
 8004082:	b29b      	uxth	r3, r3
 8004084:	818b      	strh	r3, [r1, #12]

				/* Wait for last operation to be completed */
				while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8004086:	bf00      	nop
 8004088:	4b17      	ldr	r3, [pc, #92]	; (80040e8 <disable_write_flash_prot+0x148>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b01      	cmp	r3, #1
 8004092:	d0f9      	beq.n	8004088 <disable_write_flash_prot+0xe8>
			  }
		#endif /* OB_WRP2_WRP2 */

		#if defined(OB_WRP3_WRP3)
			  if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8004094:	7ffb      	ldrb	r3, [r7, #31]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d111      	bne.n	80040be <disable_write_flash_prot+0x11e>
 800409a:	8afb      	ldrh	r3, [r7, #22]
 800409c:	2bff      	cmp	r3, #255	; 0xff
 800409e:	d00e      	beq.n	80040be <disable_write_flash_prot+0x11e>
			  {
				OB->WRP3 |= WRP3_Data;
 80040a0:	4b12      	ldr	r3, [pc, #72]	; (80040ec <disable_write_flash_prot+0x14c>)
 80040a2:	89db      	ldrh	r3, [r3, #14]
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	4911      	ldr	r1, [pc, #68]	; (80040ec <disable_write_flash_prot+0x14c>)
 80040a8:	8afb      	ldrh	r3, [r7, #22]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	81cb      	strh	r3, [r1, #14]

				/* Wait for last operation to be completed */
				while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80040b0:	bf00      	nop
 80040b2:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <disable_write_flash_prot+0x148>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d0f9      	beq.n	80040b2 <disable_write_flash_prot+0x112>
			  }
		#endif /* OB_WRP3_WRP3 */
		CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <disable_write_flash_prot+0x148>)
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	4a09      	ldr	r2, [pc, #36]	; (80040e8 <disable_write_flash_prot+0x148>)
 80040c4:	f023 0310 	bic.w	r3, r3, #16
 80040c8:	6113      	str	r3, [r2, #16]
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80040ca:	bf00      	nop
 80040cc:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <disable_write_flash_prot+0x148>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d0f9      	beq.n	80040cc <disable_write_flash_prot+0x12c>
	else
	{

	}

    HAL_FLASH_OB_Lock();
 80040d8:	f7fc fcda 	bl	8000a90 <HAL_FLASH_OB_Lock>
    return status;
 80040dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3720      	adds	r7, #32
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40022000 	.word	0x40022000
 80040ec:	1ffff800 	.word	0x1ffff800

080040f0 <configure_flash_sector_rw_protection>:
2. Write the desired option value in the FLASH_OPTCR register.
3. Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
4. Wait for the BSY bit to be cleared.
*/
uint8_t configure_flash_sector_rw_protection(uint8_t page_details, uint8_t protection_mode, uint8_t disable)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	4603      	mov	r3, r0
 80040f8:	71fb      	strb	r3, [r7, #7]
 80040fa:	460b      	mov	r3, r1
 80040fc:	71bb      	strb	r3, [r7, #6]
 80040fe:	4613      	mov	r3, r2
 8004100:	717b      	strb	r3, [r7, #5]
	protection option. If the user wants to change an option other than the read protection
	option, then the mass erase is not performed. The erased state of the read protection option
	byte protects the Flash memory.
*/
	 //Flash control register (FLASH_CR) 0x4002 2010 - 0x4002 2013 4 FLASH_CR
    volatile uint32_t *pFLASH_CR = (uint32_t*) 0x40022010;
 8004102:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <configure_flash_sector_rw_protection+0x80>)
 8004104:	613b      	str	r3, [r7, #16]
    uint8_t read_protection = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	73fb      	strb	r3, [r7, #15]
    //AA - Level 0, XX - Level 1, CC = Level 2
    read_protection = get_flash_rdp_level();
 800410a:	f7ff fd5d 	bl	8003bc8 <get_flash_rdp_level>
 800410e:	4603      	mov	r3, r0
 8004110:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef rdp_return = HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef wrp_return = HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	737b      	strb	r3, [r7, #13]
    uint32_t page_value = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]



    if(disable == 0)
 800411e:	797b      	ldrb	r3, [r7, #5]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d104      	bne.n	800412e <configure_flash_sector_rw_protection+0x3e>
    {
    	page_value = page_details_to_2pages(page_details);
 8004124:	79fb      	ldrb	r3, [r7, #7]
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff fe44 	bl	8003db4 <page_details_to_2pages>
 800412c:	60b8      	str	r0, [r7, #8]
    }


	  if(disable)
 800412e:	797b      	ldrb	r3, [r7, #5]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d018      	beq.n	8004166 <configure_flash_sector_rw_protection+0x76>
				To validate the protection level change, the option bytes must be reloaded through the
				OBL_LAUNCH bit in Flash control register
		   */

		  /* Only allow */
		  	if(read_protection != 0xAA)
 8004134:	7bfb      	ldrb	r3, [r7, #15]
 8004136:	2baa      	cmp	r3, #170	; 0xaa
 8004138:	d004      	beq.n	8004144 <configure_flash_sector_rw_protection+0x54>
		  	{
		  		//Level 0 no protection
		  		//no change needed

		  		rdp_return = set_flash_rdp_level(OB_RDP_LEVEL_0);
 800413a:	20aa      	movs	r0, #170	; 0xaa
 800413c:	f7ff feec 	bl	8003f18 <set_flash_rdp_level>
 8004140:	4603      	mov	r3, r0
 8004142:	73bb      	strb	r3, [r7, #14]
		  	}


		  	for(uint8_t idx=0;idx<255;idx++)
 8004144:	2300      	movs	r3, #0
 8004146:	75fb      	strb	r3, [r7, #23]
 8004148:	e008      	b.n	800415c <configure_flash_sector_rw_protection+0x6c>
		  	{
		  		wrp_return =  disable_write_flash_prot(idx);
 800414a:	7dfb      	ldrb	r3, [r7, #23]
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff ff27 	bl	8003fa0 <disable_write_flash_prot>
 8004152:	4603      	mov	r3, r0
 8004154:	737b      	strb	r3, [r7, #13]
		  	for(uint8_t idx=0;idx<255;idx++)
 8004156:	7dfb      	ldrb	r3, [r7, #23]
 8004158:	3301      	adds	r3, #1
 800415a:	75fb      	strb	r3, [r7, #23]
 800415c:	7dfb      	ldrb	r3, [r7, #23]
 800415e:	2bff      	cmp	r3, #255	; 0xff
 8004160:	d1f3      	bne.n	800414a <configure_flash_sector_rw_protection+0x5a>
		  	}
		  	//HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
		  	//wrp_return = FLASH_OB_DisableWRP(page_value);
			//Option byte configuration unlock

			return 0;
 8004162:	2300      	movs	r3, #0
 8004164:	e000      	b.n	8004168 <configure_flash_sector_rw_protection+0x78>
    {
	  	//Option byte configuration unlock
		//not supported
    }

		return 0;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40022010 	.word	0x40022010

08004174 <read_OB_rw_protection_status>:

uint16_t read_OB_rw_protection_status(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
    //This structure is given by ST Flash driver to hold the OB(Option Byte) contents .
	FLASH_OBProgramInitTypeDef OBInit;

	//First unlock the OB(Option Byte) memory access
	HAL_FLASH_OB_Unlock();
 800417a:	f7fc fc6d 	bl	8000a58 <HAL_FLASH_OB_Unlock>
	//get the OB configuration details
	HAL_FLASHEx_OBGetConfig(&OBInit);
 800417e:	463b      	mov	r3, r7
 8004180:	4618      	mov	r0, r3
 8004182:	f7fc fd8d 	bl	8000ca0 <HAL_FLASHEx_OBGetConfig>
	//Lock back .
	HAL_FLASH_Lock();
 8004186:	f7fc fc57 	bl	8000a38 <HAL_FLASH_Lock>

	//We are just interested in r/w protection status of the PAGES.
	return (uint16_t)OBInit.WRPPage;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	b29b      	uxth	r3, r3

}
 800418e:	4618      	mov	r0, r3
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004196:	b480      	push	{r7}
 8004198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800419a:	bf00      	nop
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041aa:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <HAL_MspInit+0x44>)
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	4a0e      	ldr	r2, [pc, #56]	; (80041e8 <HAL_MspInit+0x44>)
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	6193      	str	r3, [r2, #24]
 80041b6:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <HAL_MspInit+0x44>)
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	607b      	str	r3, [r7, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041c2:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <HAL_MspInit+0x44>)
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	4a08      	ldr	r2, [pc, #32]	; (80041e8 <HAL_MspInit+0x44>)
 80041c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041cc:	61d3      	str	r3, [r2, #28]
 80041ce:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <HAL_MspInit+0x44>)
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80041da:	2007      	movs	r0, #7
 80041dc:	f7fc f970 	bl	80004c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041e0:	bf00      	nop
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40021000 	.word	0x40021000

080041ec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <HAL_CRC_MspInit+0x38>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d10b      	bne.n	8004216 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80041fe:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <HAL_CRC_MspInit+0x3c>)
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	4a09      	ldr	r2, [pc, #36]	; (8004228 <HAL_CRC_MspInit+0x3c>)
 8004204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004208:	6153      	str	r3, [r2, #20]
 800420a:	4b07      	ldr	r3, [pc, #28]	; (8004228 <HAL_CRC_MspInit+0x3c>)
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004216:	bf00      	nop
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40023000 	.word	0x40023000
 8004228:	40021000 	.word	0x40021000

0800422c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08a      	sub	sp, #40	; 0x28
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004234:	f107 0314 	add.w	r3, r7, #20
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a17      	ldr	r2, [pc, #92]	; (80042a8 <HAL_UART_MspInit+0x7c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d128      	bne.n	80042a0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800424e:	4b17      	ldr	r3, [pc, #92]	; (80042ac <HAL_UART_MspInit+0x80>)
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	4a16      	ldr	r2, [pc, #88]	; (80042ac <HAL_UART_MspInit+0x80>)
 8004254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004258:	61d3      	str	r3, [r2, #28]
 800425a:	4b14      	ldr	r3, [pc, #80]	; (80042ac <HAL_UART_MspInit+0x80>)
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004262:	613b      	str	r3, [r7, #16]
 8004264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004266:	4b11      	ldr	r3, [pc, #68]	; (80042ac <HAL_UART_MspInit+0x80>)
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	4a10      	ldr	r2, [pc, #64]	; (80042ac <HAL_UART_MspInit+0x80>)
 800426c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004270:	6153      	str	r3, [r2, #20]
 8004272:	4b0e      	ldr	r3, [pc, #56]	; (80042ac <HAL_UART_MspInit+0x80>)
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800427e:	230c      	movs	r3, #12
 8004280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004282:	2302      	movs	r3, #2
 8004284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800428a:	2303      	movs	r3, #3
 800428c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800428e:	2307      	movs	r3, #7
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004292:	f107 0314 	add.w	r3, r7, #20
 8004296:	4619      	mov	r1, r3
 8004298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800429c:	f7fc fd9c 	bl	8000dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80042a0:	bf00      	nop
 80042a2:	3728      	adds	r7, #40	; 0x28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40004400 	.word	0x40004400
 80042ac:	40021000 	.word	0x40021000

080042b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042b4:	bf00      	nop
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042be:	b480      	push	{r7}
 80042c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042c2:	e7fe      	b.n	80042c2 <HardFault_Handler+0x4>

080042c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042c8:	e7fe      	b.n	80042c8 <MemManage_Handler+0x4>

080042ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042ca:	b480      	push	{r7}
 80042cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042ce:	e7fe      	b.n	80042ce <BusFault_Handler+0x4>

080042d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042d4:	e7fe      	b.n	80042d4 <UsageFault_Handler+0x4>

080042d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042d6:	b480      	push	{r7}
 80042d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042e8:	bf00      	nop
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042f2:	b480      	push	{r7}
 80042f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042f6:	bf00      	nop
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004304:	f7fc f80a 	bl	800031c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004308:	bf00      	nop
 800430a:	bd80      	pop	{r7, pc}

0800430c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004314:	4b11      	ldr	r3, [pc, #68]	; (800435c <_sbrk+0x50>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d102      	bne.n	8004322 <_sbrk+0x16>
		heap_end = &end;
 800431c:	4b0f      	ldr	r3, [pc, #60]	; (800435c <_sbrk+0x50>)
 800431e:	4a10      	ldr	r2, [pc, #64]	; (8004360 <_sbrk+0x54>)
 8004320:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004322:	4b0e      	ldr	r3, [pc, #56]	; (800435c <_sbrk+0x50>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <_sbrk+0x50>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4413      	add	r3, r2
 8004330:	466a      	mov	r2, sp
 8004332:	4293      	cmp	r3, r2
 8004334:	d907      	bls.n	8004346 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004336:	f000 f889 	bl	800444c <__errno>
 800433a:	4602      	mov	r2, r0
 800433c:	230c      	movs	r3, #12
 800433e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004340:	f04f 33ff 	mov.w	r3, #4294967295
 8004344:	e006      	b.n	8004354 <_sbrk+0x48>
	}

	heap_end += incr;
 8004346:	4b05      	ldr	r3, [pc, #20]	; (800435c <_sbrk+0x50>)
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4413      	add	r3, r2
 800434e:	4a03      	ldr	r2, [pc, #12]	; (800435c <_sbrk+0x50>)
 8004350:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004352:	68fb      	ldr	r3, [r7, #12]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	200000a0 	.word	0x200000a0
 8004360:	20000230 	.word	0x20000230

08004364 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004368:	4b1f      	ldr	r3, [pc, #124]	; (80043e8 <SystemInit+0x84>)
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436e:	4a1e      	ldr	r2, [pc, #120]	; (80043e8 <SystemInit+0x84>)
 8004370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004378:	4b1c      	ldr	r3, [pc, #112]	; (80043ec <SystemInit+0x88>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1b      	ldr	r2, [pc, #108]	; (80043ec <SystemInit+0x88>)
 800437e:	f043 0301 	orr.w	r3, r3, #1
 8004382:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004384:	4b19      	ldr	r3, [pc, #100]	; (80043ec <SystemInit+0x88>)
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	4918      	ldr	r1, [pc, #96]	; (80043ec <SystemInit+0x88>)
 800438a:	4b19      	ldr	r3, [pc, #100]	; (80043f0 <SystemInit+0x8c>)
 800438c:	4013      	ands	r3, r2
 800438e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004390:	4b16      	ldr	r3, [pc, #88]	; (80043ec <SystemInit+0x88>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a15      	ldr	r2, [pc, #84]	; (80043ec <SystemInit+0x88>)
 8004396:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800439a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800439e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80043a0:	4b12      	ldr	r3, [pc, #72]	; (80043ec <SystemInit+0x88>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a11      	ldr	r2, [pc, #68]	; (80043ec <SystemInit+0x88>)
 80043a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043aa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80043ac:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <SystemInit+0x88>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	4a0e      	ldr	r2, [pc, #56]	; (80043ec <SystemInit+0x88>)
 80043b2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80043b6:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80043b8:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <SystemInit+0x88>)
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	4a0b      	ldr	r2, [pc, #44]	; (80043ec <SystemInit+0x88>)
 80043be:	f023 030f 	bic.w	r3, r3, #15
 80043c2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80043c4:	4b09      	ldr	r3, [pc, #36]	; (80043ec <SystemInit+0x88>)
 80043c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c8:	4908      	ldr	r1, [pc, #32]	; (80043ec <SystemInit+0x88>)
 80043ca:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <SystemInit+0x90>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80043d0:	4b06      	ldr	r3, [pc, #24]	; (80043ec <SystemInit+0x88>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80043d6:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <SystemInit+0x84>)
 80043d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043dc:	609a      	str	r2, [r3, #8]
#endif
}
 80043de:	bf00      	nop
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	e000ed00 	.word	0xe000ed00
 80043ec:	40021000 	.word	0x40021000
 80043f0:	f87fc00c 	.word	0xf87fc00c
 80043f4:	ff00fccc 	.word	0xff00fccc

080043f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80043f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004430 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80043fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80043fe:	e003      	b.n	8004408 <LoopCopyDataInit>

08004400 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004400:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004402:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004404:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004406:	3104      	adds	r1, #4

08004408 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004408:	480b      	ldr	r0, [pc, #44]	; (8004438 <LoopForever+0xa>)
	ldr	r3, =_edata
 800440a:	4b0c      	ldr	r3, [pc, #48]	; (800443c <LoopForever+0xe>)
	adds	r2, r0, r1
 800440c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800440e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004410:	d3f6      	bcc.n	8004400 <CopyDataInit>
	ldr	r2, =_sbss
 8004412:	4a0b      	ldr	r2, [pc, #44]	; (8004440 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004414:	e002      	b.n	800441c <LoopFillZerobss>

08004416 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004416:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004418:	f842 3b04 	str.w	r3, [r2], #4

0800441c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800441c:	4b09      	ldr	r3, [pc, #36]	; (8004444 <LoopForever+0x16>)
	cmp	r2, r3
 800441e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004420:	d3f9      	bcc.n	8004416 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004422:	f7ff ff9f 	bl	8004364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004426:	f000 f817 	bl	8004458 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800442a:	f7fe febb 	bl	80031a4 <main>

0800442e <LoopForever>:

LoopForever:
    b LoopForever
 800442e:	e7fe      	b.n	800442e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004430:	2000ffff 	.word	0x2000ffff
	ldr	r3, =_sidata
 8004434:	08004e18 	.word	0x08004e18
	ldr	r0, =_sdata
 8004438:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800443c:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 8004440:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8004444:	20000230 	.word	0x20000230

08004448 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004448:	e7fe      	b.n	8004448 <ADC1_2_IRQHandler>
	...

0800444c <__errno>:
 800444c:	4b01      	ldr	r3, [pc, #4]	; (8004454 <__errno+0x8>)
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	2000001c 	.word	0x2000001c

08004458 <__libc_init_array>:
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	4e0d      	ldr	r6, [pc, #52]	; (8004490 <__libc_init_array+0x38>)
 800445c:	4c0d      	ldr	r4, [pc, #52]	; (8004494 <__libc_init_array+0x3c>)
 800445e:	1ba4      	subs	r4, r4, r6
 8004460:	10a4      	asrs	r4, r4, #2
 8004462:	2500      	movs	r5, #0
 8004464:	42a5      	cmp	r5, r4
 8004466:	d109      	bne.n	800447c <__libc_init_array+0x24>
 8004468:	4e0b      	ldr	r6, [pc, #44]	; (8004498 <__libc_init_array+0x40>)
 800446a:	4c0c      	ldr	r4, [pc, #48]	; (800449c <__libc_init_array+0x44>)
 800446c:	f000 fc26 	bl	8004cbc <_init>
 8004470:	1ba4      	subs	r4, r4, r6
 8004472:	10a4      	asrs	r4, r4, #2
 8004474:	2500      	movs	r5, #0
 8004476:	42a5      	cmp	r5, r4
 8004478:	d105      	bne.n	8004486 <__libc_init_array+0x2e>
 800447a:	bd70      	pop	{r4, r5, r6, pc}
 800447c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004480:	4798      	blx	r3
 8004482:	3501      	adds	r5, #1
 8004484:	e7ee      	b.n	8004464 <__libc_init_array+0xc>
 8004486:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800448a:	4798      	blx	r3
 800448c:	3501      	adds	r5, #1
 800448e:	e7f2      	b.n	8004476 <__libc_init_array+0x1e>
 8004490:	08004e10 	.word	0x08004e10
 8004494:	08004e10 	.word	0x08004e10
 8004498:	08004e10 	.word	0x08004e10
 800449c:	08004e14 	.word	0x08004e14

080044a0 <memset>:
 80044a0:	4402      	add	r2, r0
 80044a2:	4603      	mov	r3, r0
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d100      	bne.n	80044aa <memset+0xa>
 80044a8:	4770      	bx	lr
 80044aa:	f803 1b01 	strb.w	r1, [r3], #1
 80044ae:	e7f9      	b.n	80044a4 <memset+0x4>

080044b0 <_vsiprintf_r>:
 80044b0:	b500      	push	{lr}
 80044b2:	b09b      	sub	sp, #108	; 0x6c
 80044b4:	9100      	str	r1, [sp, #0]
 80044b6:	9104      	str	r1, [sp, #16]
 80044b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044bc:	9105      	str	r1, [sp, #20]
 80044be:	9102      	str	r1, [sp, #8]
 80044c0:	4905      	ldr	r1, [pc, #20]	; (80044d8 <_vsiprintf_r+0x28>)
 80044c2:	9103      	str	r1, [sp, #12]
 80044c4:	4669      	mov	r1, sp
 80044c6:	f000 f86d 	bl	80045a4 <_svfiprintf_r>
 80044ca:	9b00      	ldr	r3, [sp, #0]
 80044cc:	2200      	movs	r2, #0
 80044ce:	701a      	strb	r2, [r3, #0]
 80044d0:	b01b      	add	sp, #108	; 0x6c
 80044d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80044d6:	bf00      	nop
 80044d8:	ffff0208 	.word	0xffff0208

080044dc <vsiprintf>:
 80044dc:	4613      	mov	r3, r2
 80044de:	460a      	mov	r2, r1
 80044e0:	4601      	mov	r1, r0
 80044e2:	4802      	ldr	r0, [pc, #8]	; (80044ec <vsiprintf+0x10>)
 80044e4:	6800      	ldr	r0, [r0, #0]
 80044e6:	f7ff bfe3 	b.w	80044b0 <_vsiprintf_r>
 80044ea:	bf00      	nop
 80044ec:	2000001c 	.word	0x2000001c

080044f0 <__ssputs_r>:
 80044f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044f4:	688e      	ldr	r6, [r1, #8]
 80044f6:	429e      	cmp	r6, r3
 80044f8:	4682      	mov	sl, r0
 80044fa:	460c      	mov	r4, r1
 80044fc:	4690      	mov	r8, r2
 80044fe:	4699      	mov	r9, r3
 8004500:	d837      	bhi.n	8004572 <__ssputs_r+0x82>
 8004502:	898a      	ldrh	r2, [r1, #12]
 8004504:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004508:	d031      	beq.n	800456e <__ssputs_r+0x7e>
 800450a:	6825      	ldr	r5, [r4, #0]
 800450c:	6909      	ldr	r1, [r1, #16]
 800450e:	1a6f      	subs	r7, r5, r1
 8004510:	6965      	ldr	r5, [r4, #20]
 8004512:	2302      	movs	r3, #2
 8004514:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004518:	fb95 f5f3 	sdiv	r5, r5, r3
 800451c:	f109 0301 	add.w	r3, r9, #1
 8004520:	443b      	add	r3, r7
 8004522:	429d      	cmp	r5, r3
 8004524:	bf38      	it	cc
 8004526:	461d      	movcc	r5, r3
 8004528:	0553      	lsls	r3, r2, #21
 800452a:	d530      	bpl.n	800458e <__ssputs_r+0x9e>
 800452c:	4629      	mov	r1, r5
 800452e:	f000 fb2b 	bl	8004b88 <_malloc_r>
 8004532:	4606      	mov	r6, r0
 8004534:	b950      	cbnz	r0, 800454c <__ssputs_r+0x5c>
 8004536:	230c      	movs	r3, #12
 8004538:	f8ca 3000 	str.w	r3, [sl]
 800453c:	89a3      	ldrh	r3, [r4, #12]
 800453e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004542:	81a3      	strh	r3, [r4, #12]
 8004544:	f04f 30ff 	mov.w	r0, #4294967295
 8004548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800454c:	463a      	mov	r2, r7
 800454e:	6921      	ldr	r1, [r4, #16]
 8004550:	f000 faa8 	bl	8004aa4 <memcpy>
 8004554:	89a3      	ldrh	r3, [r4, #12]
 8004556:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800455a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800455e:	81a3      	strh	r3, [r4, #12]
 8004560:	6126      	str	r6, [r4, #16]
 8004562:	6165      	str	r5, [r4, #20]
 8004564:	443e      	add	r6, r7
 8004566:	1bed      	subs	r5, r5, r7
 8004568:	6026      	str	r6, [r4, #0]
 800456a:	60a5      	str	r5, [r4, #8]
 800456c:	464e      	mov	r6, r9
 800456e:	454e      	cmp	r6, r9
 8004570:	d900      	bls.n	8004574 <__ssputs_r+0x84>
 8004572:	464e      	mov	r6, r9
 8004574:	4632      	mov	r2, r6
 8004576:	4641      	mov	r1, r8
 8004578:	6820      	ldr	r0, [r4, #0]
 800457a:	f000 fa9e 	bl	8004aba <memmove>
 800457e:	68a3      	ldr	r3, [r4, #8]
 8004580:	1b9b      	subs	r3, r3, r6
 8004582:	60a3      	str	r3, [r4, #8]
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	441e      	add	r6, r3
 8004588:	6026      	str	r6, [r4, #0]
 800458a:	2000      	movs	r0, #0
 800458c:	e7dc      	b.n	8004548 <__ssputs_r+0x58>
 800458e:	462a      	mov	r2, r5
 8004590:	f000 fb54 	bl	8004c3c <_realloc_r>
 8004594:	4606      	mov	r6, r0
 8004596:	2800      	cmp	r0, #0
 8004598:	d1e2      	bne.n	8004560 <__ssputs_r+0x70>
 800459a:	6921      	ldr	r1, [r4, #16]
 800459c:	4650      	mov	r0, sl
 800459e:	f000 faa5 	bl	8004aec <_free_r>
 80045a2:	e7c8      	b.n	8004536 <__ssputs_r+0x46>

080045a4 <_svfiprintf_r>:
 80045a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a8:	461d      	mov	r5, r3
 80045aa:	898b      	ldrh	r3, [r1, #12]
 80045ac:	061f      	lsls	r7, r3, #24
 80045ae:	b09d      	sub	sp, #116	; 0x74
 80045b0:	4680      	mov	r8, r0
 80045b2:	460c      	mov	r4, r1
 80045b4:	4616      	mov	r6, r2
 80045b6:	d50f      	bpl.n	80045d8 <_svfiprintf_r+0x34>
 80045b8:	690b      	ldr	r3, [r1, #16]
 80045ba:	b96b      	cbnz	r3, 80045d8 <_svfiprintf_r+0x34>
 80045bc:	2140      	movs	r1, #64	; 0x40
 80045be:	f000 fae3 	bl	8004b88 <_malloc_r>
 80045c2:	6020      	str	r0, [r4, #0]
 80045c4:	6120      	str	r0, [r4, #16]
 80045c6:	b928      	cbnz	r0, 80045d4 <_svfiprintf_r+0x30>
 80045c8:	230c      	movs	r3, #12
 80045ca:	f8c8 3000 	str.w	r3, [r8]
 80045ce:	f04f 30ff 	mov.w	r0, #4294967295
 80045d2:	e0c8      	b.n	8004766 <_svfiprintf_r+0x1c2>
 80045d4:	2340      	movs	r3, #64	; 0x40
 80045d6:	6163      	str	r3, [r4, #20]
 80045d8:	2300      	movs	r3, #0
 80045da:	9309      	str	r3, [sp, #36]	; 0x24
 80045dc:	2320      	movs	r3, #32
 80045de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045e2:	2330      	movs	r3, #48	; 0x30
 80045e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045e8:	9503      	str	r5, [sp, #12]
 80045ea:	f04f 0b01 	mov.w	fp, #1
 80045ee:	4637      	mov	r7, r6
 80045f0:	463d      	mov	r5, r7
 80045f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80045f6:	b10b      	cbz	r3, 80045fc <_svfiprintf_r+0x58>
 80045f8:	2b25      	cmp	r3, #37	; 0x25
 80045fa:	d13e      	bne.n	800467a <_svfiprintf_r+0xd6>
 80045fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8004600:	d00b      	beq.n	800461a <_svfiprintf_r+0x76>
 8004602:	4653      	mov	r3, sl
 8004604:	4632      	mov	r2, r6
 8004606:	4621      	mov	r1, r4
 8004608:	4640      	mov	r0, r8
 800460a:	f7ff ff71 	bl	80044f0 <__ssputs_r>
 800460e:	3001      	adds	r0, #1
 8004610:	f000 80a4 	beq.w	800475c <_svfiprintf_r+0x1b8>
 8004614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004616:	4453      	add	r3, sl
 8004618:	9309      	str	r3, [sp, #36]	; 0x24
 800461a:	783b      	ldrb	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 809d 	beq.w	800475c <_svfiprintf_r+0x1b8>
 8004622:	2300      	movs	r3, #0
 8004624:	f04f 32ff 	mov.w	r2, #4294967295
 8004628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800462c:	9304      	str	r3, [sp, #16]
 800462e:	9307      	str	r3, [sp, #28]
 8004630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004634:	931a      	str	r3, [sp, #104]	; 0x68
 8004636:	462f      	mov	r7, r5
 8004638:	2205      	movs	r2, #5
 800463a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800463e:	4850      	ldr	r0, [pc, #320]	; (8004780 <_svfiprintf_r+0x1dc>)
 8004640:	f7fb fdd6 	bl	80001f0 <memchr>
 8004644:	9b04      	ldr	r3, [sp, #16]
 8004646:	b9d0      	cbnz	r0, 800467e <_svfiprintf_r+0xda>
 8004648:	06d9      	lsls	r1, r3, #27
 800464a:	bf44      	itt	mi
 800464c:	2220      	movmi	r2, #32
 800464e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004652:	071a      	lsls	r2, r3, #28
 8004654:	bf44      	itt	mi
 8004656:	222b      	movmi	r2, #43	; 0x2b
 8004658:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800465c:	782a      	ldrb	r2, [r5, #0]
 800465e:	2a2a      	cmp	r2, #42	; 0x2a
 8004660:	d015      	beq.n	800468e <_svfiprintf_r+0xea>
 8004662:	9a07      	ldr	r2, [sp, #28]
 8004664:	462f      	mov	r7, r5
 8004666:	2000      	movs	r0, #0
 8004668:	250a      	movs	r5, #10
 800466a:	4639      	mov	r1, r7
 800466c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004670:	3b30      	subs	r3, #48	; 0x30
 8004672:	2b09      	cmp	r3, #9
 8004674:	d94d      	bls.n	8004712 <_svfiprintf_r+0x16e>
 8004676:	b1b8      	cbz	r0, 80046a8 <_svfiprintf_r+0x104>
 8004678:	e00f      	b.n	800469a <_svfiprintf_r+0xf6>
 800467a:	462f      	mov	r7, r5
 800467c:	e7b8      	b.n	80045f0 <_svfiprintf_r+0x4c>
 800467e:	4a40      	ldr	r2, [pc, #256]	; (8004780 <_svfiprintf_r+0x1dc>)
 8004680:	1a80      	subs	r0, r0, r2
 8004682:	fa0b f000 	lsl.w	r0, fp, r0
 8004686:	4318      	orrs	r0, r3
 8004688:	9004      	str	r0, [sp, #16]
 800468a:	463d      	mov	r5, r7
 800468c:	e7d3      	b.n	8004636 <_svfiprintf_r+0x92>
 800468e:	9a03      	ldr	r2, [sp, #12]
 8004690:	1d11      	adds	r1, r2, #4
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	9103      	str	r1, [sp, #12]
 8004696:	2a00      	cmp	r2, #0
 8004698:	db01      	blt.n	800469e <_svfiprintf_r+0xfa>
 800469a:	9207      	str	r2, [sp, #28]
 800469c:	e004      	b.n	80046a8 <_svfiprintf_r+0x104>
 800469e:	4252      	negs	r2, r2
 80046a0:	f043 0302 	orr.w	r3, r3, #2
 80046a4:	9207      	str	r2, [sp, #28]
 80046a6:	9304      	str	r3, [sp, #16]
 80046a8:	783b      	ldrb	r3, [r7, #0]
 80046aa:	2b2e      	cmp	r3, #46	; 0x2e
 80046ac:	d10c      	bne.n	80046c8 <_svfiprintf_r+0x124>
 80046ae:	787b      	ldrb	r3, [r7, #1]
 80046b0:	2b2a      	cmp	r3, #42	; 0x2a
 80046b2:	d133      	bne.n	800471c <_svfiprintf_r+0x178>
 80046b4:	9b03      	ldr	r3, [sp, #12]
 80046b6:	1d1a      	adds	r2, r3, #4
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	9203      	str	r2, [sp, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bfb8      	it	lt
 80046c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80046c4:	3702      	adds	r7, #2
 80046c6:	9305      	str	r3, [sp, #20]
 80046c8:	4d2e      	ldr	r5, [pc, #184]	; (8004784 <_svfiprintf_r+0x1e0>)
 80046ca:	7839      	ldrb	r1, [r7, #0]
 80046cc:	2203      	movs	r2, #3
 80046ce:	4628      	mov	r0, r5
 80046d0:	f7fb fd8e 	bl	80001f0 <memchr>
 80046d4:	b138      	cbz	r0, 80046e6 <_svfiprintf_r+0x142>
 80046d6:	2340      	movs	r3, #64	; 0x40
 80046d8:	1b40      	subs	r0, r0, r5
 80046da:	fa03 f000 	lsl.w	r0, r3, r0
 80046de:	9b04      	ldr	r3, [sp, #16]
 80046e0:	4303      	orrs	r3, r0
 80046e2:	3701      	adds	r7, #1
 80046e4:	9304      	str	r3, [sp, #16]
 80046e6:	7839      	ldrb	r1, [r7, #0]
 80046e8:	4827      	ldr	r0, [pc, #156]	; (8004788 <_svfiprintf_r+0x1e4>)
 80046ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046ee:	2206      	movs	r2, #6
 80046f0:	1c7e      	adds	r6, r7, #1
 80046f2:	f7fb fd7d 	bl	80001f0 <memchr>
 80046f6:	2800      	cmp	r0, #0
 80046f8:	d038      	beq.n	800476c <_svfiprintf_r+0x1c8>
 80046fa:	4b24      	ldr	r3, [pc, #144]	; (800478c <_svfiprintf_r+0x1e8>)
 80046fc:	bb13      	cbnz	r3, 8004744 <_svfiprintf_r+0x1a0>
 80046fe:	9b03      	ldr	r3, [sp, #12]
 8004700:	3307      	adds	r3, #7
 8004702:	f023 0307 	bic.w	r3, r3, #7
 8004706:	3308      	adds	r3, #8
 8004708:	9303      	str	r3, [sp, #12]
 800470a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800470c:	444b      	add	r3, r9
 800470e:	9309      	str	r3, [sp, #36]	; 0x24
 8004710:	e76d      	b.n	80045ee <_svfiprintf_r+0x4a>
 8004712:	fb05 3202 	mla	r2, r5, r2, r3
 8004716:	2001      	movs	r0, #1
 8004718:	460f      	mov	r7, r1
 800471a:	e7a6      	b.n	800466a <_svfiprintf_r+0xc6>
 800471c:	2300      	movs	r3, #0
 800471e:	3701      	adds	r7, #1
 8004720:	9305      	str	r3, [sp, #20]
 8004722:	4619      	mov	r1, r3
 8004724:	250a      	movs	r5, #10
 8004726:	4638      	mov	r0, r7
 8004728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800472c:	3a30      	subs	r2, #48	; 0x30
 800472e:	2a09      	cmp	r2, #9
 8004730:	d903      	bls.n	800473a <_svfiprintf_r+0x196>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0c8      	beq.n	80046c8 <_svfiprintf_r+0x124>
 8004736:	9105      	str	r1, [sp, #20]
 8004738:	e7c6      	b.n	80046c8 <_svfiprintf_r+0x124>
 800473a:	fb05 2101 	mla	r1, r5, r1, r2
 800473e:	2301      	movs	r3, #1
 8004740:	4607      	mov	r7, r0
 8004742:	e7f0      	b.n	8004726 <_svfiprintf_r+0x182>
 8004744:	ab03      	add	r3, sp, #12
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	4622      	mov	r2, r4
 800474a:	4b11      	ldr	r3, [pc, #68]	; (8004790 <_svfiprintf_r+0x1ec>)
 800474c:	a904      	add	r1, sp, #16
 800474e:	4640      	mov	r0, r8
 8004750:	f3af 8000 	nop.w
 8004754:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004758:	4681      	mov	r9, r0
 800475a:	d1d6      	bne.n	800470a <_svfiprintf_r+0x166>
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	065b      	lsls	r3, r3, #25
 8004760:	f53f af35 	bmi.w	80045ce <_svfiprintf_r+0x2a>
 8004764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004766:	b01d      	add	sp, #116	; 0x74
 8004768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800476c:	ab03      	add	r3, sp, #12
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	4622      	mov	r2, r4
 8004772:	4b07      	ldr	r3, [pc, #28]	; (8004790 <_svfiprintf_r+0x1ec>)
 8004774:	a904      	add	r1, sp, #16
 8004776:	4640      	mov	r0, r8
 8004778:	f000 f882 	bl	8004880 <_printf_i>
 800477c:	e7ea      	b.n	8004754 <_svfiprintf_r+0x1b0>
 800477e:	bf00      	nop
 8004780:	08004ddc 	.word	0x08004ddc
 8004784:	08004de2 	.word	0x08004de2
 8004788:	08004de6 	.word	0x08004de6
 800478c:	00000000 	.word	0x00000000
 8004790:	080044f1 	.word	0x080044f1

08004794 <_printf_common>:
 8004794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004798:	4691      	mov	r9, r2
 800479a:	461f      	mov	r7, r3
 800479c:	688a      	ldr	r2, [r1, #8]
 800479e:	690b      	ldr	r3, [r1, #16]
 80047a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047a4:	4293      	cmp	r3, r2
 80047a6:	bfb8      	it	lt
 80047a8:	4613      	movlt	r3, r2
 80047aa:	f8c9 3000 	str.w	r3, [r9]
 80047ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047b2:	4606      	mov	r6, r0
 80047b4:	460c      	mov	r4, r1
 80047b6:	b112      	cbz	r2, 80047be <_printf_common+0x2a>
 80047b8:	3301      	adds	r3, #1
 80047ba:	f8c9 3000 	str.w	r3, [r9]
 80047be:	6823      	ldr	r3, [r4, #0]
 80047c0:	0699      	lsls	r1, r3, #26
 80047c2:	bf42      	ittt	mi
 80047c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80047c8:	3302      	addmi	r3, #2
 80047ca:	f8c9 3000 	strmi.w	r3, [r9]
 80047ce:	6825      	ldr	r5, [r4, #0]
 80047d0:	f015 0506 	ands.w	r5, r5, #6
 80047d4:	d107      	bne.n	80047e6 <_printf_common+0x52>
 80047d6:	f104 0a19 	add.w	sl, r4, #25
 80047da:	68e3      	ldr	r3, [r4, #12]
 80047dc:	f8d9 2000 	ldr.w	r2, [r9]
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	42ab      	cmp	r3, r5
 80047e4:	dc28      	bgt.n	8004838 <_printf_common+0xa4>
 80047e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80047ea:	6822      	ldr	r2, [r4, #0]
 80047ec:	3300      	adds	r3, #0
 80047ee:	bf18      	it	ne
 80047f0:	2301      	movne	r3, #1
 80047f2:	0692      	lsls	r2, r2, #26
 80047f4:	d42d      	bmi.n	8004852 <_printf_common+0xbe>
 80047f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047fa:	4639      	mov	r1, r7
 80047fc:	4630      	mov	r0, r6
 80047fe:	47c0      	blx	r8
 8004800:	3001      	adds	r0, #1
 8004802:	d020      	beq.n	8004846 <_printf_common+0xb2>
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	68e5      	ldr	r5, [r4, #12]
 8004808:	f8d9 2000 	ldr.w	r2, [r9]
 800480c:	f003 0306 	and.w	r3, r3, #6
 8004810:	2b04      	cmp	r3, #4
 8004812:	bf08      	it	eq
 8004814:	1aad      	subeq	r5, r5, r2
 8004816:	68a3      	ldr	r3, [r4, #8]
 8004818:	6922      	ldr	r2, [r4, #16]
 800481a:	bf0c      	ite	eq
 800481c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004820:	2500      	movne	r5, #0
 8004822:	4293      	cmp	r3, r2
 8004824:	bfc4      	itt	gt
 8004826:	1a9b      	subgt	r3, r3, r2
 8004828:	18ed      	addgt	r5, r5, r3
 800482a:	f04f 0900 	mov.w	r9, #0
 800482e:	341a      	adds	r4, #26
 8004830:	454d      	cmp	r5, r9
 8004832:	d11a      	bne.n	800486a <_printf_common+0xd6>
 8004834:	2000      	movs	r0, #0
 8004836:	e008      	b.n	800484a <_printf_common+0xb6>
 8004838:	2301      	movs	r3, #1
 800483a:	4652      	mov	r2, sl
 800483c:	4639      	mov	r1, r7
 800483e:	4630      	mov	r0, r6
 8004840:	47c0      	blx	r8
 8004842:	3001      	adds	r0, #1
 8004844:	d103      	bne.n	800484e <_printf_common+0xba>
 8004846:	f04f 30ff 	mov.w	r0, #4294967295
 800484a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800484e:	3501      	adds	r5, #1
 8004850:	e7c3      	b.n	80047da <_printf_common+0x46>
 8004852:	18e1      	adds	r1, r4, r3
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	2030      	movs	r0, #48	; 0x30
 8004858:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800485c:	4422      	add	r2, r4
 800485e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004862:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004866:	3302      	adds	r3, #2
 8004868:	e7c5      	b.n	80047f6 <_printf_common+0x62>
 800486a:	2301      	movs	r3, #1
 800486c:	4622      	mov	r2, r4
 800486e:	4639      	mov	r1, r7
 8004870:	4630      	mov	r0, r6
 8004872:	47c0      	blx	r8
 8004874:	3001      	adds	r0, #1
 8004876:	d0e6      	beq.n	8004846 <_printf_common+0xb2>
 8004878:	f109 0901 	add.w	r9, r9, #1
 800487c:	e7d8      	b.n	8004830 <_printf_common+0x9c>
	...

08004880 <_printf_i>:
 8004880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004884:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004888:	460c      	mov	r4, r1
 800488a:	7e09      	ldrb	r1, [r1, #24]
 800488c:	b085      	sub	sp, #20
 800488e:	296e      	cmp	r1, #110	; 0x6e
 8004890:	4617      	mov	r7, r2
 8004892:	4606      	mov	r6, r0
 8004894:	4698      	mov	r8, r3
 8004896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004898:	f000 80b3 	beq.w	8004a02 <_printf_i+0x182>
 800489c:	d822      	bhi.n	80048e4 <_printf_i+0x64>
 800489e:	2963      	cmp	r1, #99	; 0x63
 80048a0:	d036      	beq.n	8004910 <_printf_i+0x90>
 80048a2:	d80a      	bhi.n	80048ba <_printf_i+0x3a>
 80048a4:	2900      	cmp	r1, #0
 80048a6:	f000 80b9 	beq.w	8004a1c <_printf_i+0x19c>
 80048aa:	2958      	cmp	r1, #88	; 0x58
 80048ac:	f000 8083 	beq.w	80049b6 <_printf_i+0x136>
 80048b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80048b8:	e032      	b.n	8004920 <_printf_i+0xa0>
 80048ba:	2964      	cmp	r1, #100	; 0x64
 80048bc:	d001      	beq.n	80048c2 <_printf_i+0x42>
 80048be:	2969      	cmp	r1, #105	; 0x69
 80048c0:	d1f6      	bne.n	80048b0 <_printf_i+0x30>
 80048c2:	6820      	ldr	r0, [r4, #0]
 80048c4:	6813      	ldr	r3, [r2, #0]
 80048c6:	0605      	lsls	r5, r0, #24
 80048c8:	f103 0104 	add.w	r1, r3, #4
 80048cc:	d52a      	bpl.n	8004924 <_printf_i+0xa4>
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6011      	str	r1, [r2, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	da03      	bge.n	80048de <_printf_i+0x5e>
 80048d6:	222d      	movs	r2, #45	; 0x2d
 80048d8:	425b      	negs	r3, r3
 80048da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80048de:	486f      	ldr	r0, [pc, #444]	; (8004a9c <_printf_i+0x21c>)
 80048e0:	220a      	movs	r2, #10
 80048e2:	e039      	b.n	8004958 <_printf_i+0xd8>
 80048e4:	2973      	cmp	r1, #115	; 0x73
 80048e6:	f000 809d 	beq.w	8004a24 <_printf_i+0x1a4>
 80048ea:	d808      	bhi.n	80048fe <_printf_i+0x7e>
 80048ec:	296f      	cmp	r1, #111	; 0x6f
 80048ee:	d020      	beq.n	8004932 <_printf_i+0xb2>
 80048f0:	2970      	cmp	r1, #112	; 0x70
 80048f2:	d1dd      	bne.n	80048b0 <_printf_i+0x30>
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	f043 0320 	orr.w	r3, r3, #32
 80048fa:	6023      	str	r3, [r4, #0]
 80048fc:	e003      	b.n	8004906 <_printf_i+0x86>
 80048fe:	2975      	cmp	r1, #117	; 0x75
 8004900:	d017      	beq.n	8004932 <_printf_i+0xb2>
 8004902:	2978      	cmp	r1, #120	; 0x78
 8004904:	d1d4      	bne.n	80048b0 <_printf_i+0x30>
 8004906:	2378      	movs	r3, #120	; 0x78
 8004908:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800490c:	4864      	ldr	r0, [pc, #400]	; (8004aa0 <_printf_i+0x220>)
 800490e:	e055      	b.n	80049bc <_printf_i+0x13c>
 8004910:	6813      	ldr	r3, [r2, #0]
 8004912:	1d19      	adds	r1, r3, #4
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6011      	str	r1, [r2, #0]
 8004918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800491c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004920:	2301      	movs	r3, #1
 8004922:	e08c      	b.n	8004a3e <_printf_i+0x1be>
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6011      	str	r1, [r2, #0]
 8004928:	f010 0f40 	tst.w	r0, #64	; 0x40
 800492c:	bf18      	it	ne
 800492e:	b21b      	sxthne	r3, r3
 8004930:	e7cf      	b.n	80048d2 <_printf_i+0x52>
 8004932:	6813      	ldr	r3, [r2, #0]
 8004934:	6825      	ldr	r5, [r4, #0]
 8004936:	1d18      	adds	r0, r3, #4
 8004938:	6010      	str	r0, [r2, #0]
 800493a:	0628      	lsls	r0, r5, #24
 800493c:	d501      	bpl.n	8004942 <_printf_i+0xc2>
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	e002      	b.n	8004948 <_printf_i+0xc8>
 8004942:	0668      	lsls	r0, r5, #25
 8004944:	d5fb      	bpl.n	800493e <_printf_i+0xbe>
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	4854      	ldr	r0, [pc, #336]	; (8004a9c <_printf_i+0x21c>)
 800494a:	296f      	cmp	r1, #111	; 0x6f
 800494c:	bf14      	ite	ne
 800494e:	220a      	movne	r2, #10
 8004950:	2208      	moveq	r2, #8
 8004952:	2100      	movs	r1, #0
 8004954:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004958:	6865      	ldr	r5, [r4, #4]
 800495a:	60a5      	str	r5, [r4, #8]
 800495c:	2d00      	cmp	r5, #0
 800495e:	f2c0 8095 	blt.w	8004a8c <_printf_i+0x20c>
 8004962:	6821      	ldr	r1, [r4, #0]
 8004964:	f021 0104 	bic.w	r1, r1, #4
 8004968:	6021      	str	r1, [r4, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d13d      	bne.n	80049ea <_printf_i+0x16a>
 800496e:	2d00      	cmp	r5, #0
 8004970:	f040 808e 	bne.w	8004a90 <_printf_i+0x210>
 8004974:	4665      	mov	r5, ip
 8004976:	2a08      	cmp	r2, #8
 8004978:	d10b      	bne.n	8004992 <_printf_i+0x112>
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	07db      	lsls	r3, r3, #31
 800497e:	d508      	bpl.n	8004992 <_printf_i+0x112>
 8004980:	6923      	ldr	r3, [r4, #16]
 8004982:	6862      	ldr	r2, [r4, #4]
 8004984:	429a      	cmp	r2, r3
 8004986:	bfde      	ittt	le
 8004988:	2330      	movle	r3, #48	; 0x30
 800498a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800498e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004992:	ebac 0305 	sub.w	r3, ip, r5
 8004996:	6123      	str	r3, [r4, #16]
 8004998:	f8cd 8000 	str.w	r8, [sp]
 800499c:	463b      	mov	r3, r7
 800499e:	aa03      	add	r2, sp, #12
 80049a0:	4621      	mov	r1, r4
 80049a2:	4630      	mov	r0, r6
 80049a4:	f7ff fef6 	bl	8004794 <_printf_common>
 80049a8:	3001      	adds	r0, #1
 80049aa:	d14d      	bne.n	8004a48 <_printf_i+0x1c8>
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295
 80049b0:	b005      	add	sp, #20
 80049b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049b6:	4839      	ldr	r0, [pc, #228]	; (8004a9c <_printf_i+0x21c>)
 80049b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80049bc:	6813      	ldr	r3, [r2, #0]
 80049be:	6821      	ldr	r1, [r4, #0]
 80049c0:	1d1d      	adds	r5, r3, #4
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6015      	str	r5, [r2, #0]
 80049c6:	060a      	lsls	r2, r1, #24
 80049c8:	d50b      	bpl.n	80049e2 <_printf_i+0x162>
 80049ca:	07ca      	lsls	r2, r1, #31
 80049cc:	bf44      	itt	mi
 80049ce:	f041 0120 	orrmi.w	r1, r1, #32
 80049d2:	6021      	strmi	r1, [r4, #0]
 80049d4:	b91b      	cbnz	r3, 80049de <_printf_i+0x15e>
 80049d6:	6822      	ldr	r2, [r4, #0]
 80049d8:	f022 0220 	bic.w	r2, r2, #32
 80049dc:	6022      	str	r2, [r4, #0]
 80049de:	2210      	movs	r2, #16
 80049e0:	e7b7      	b.n	8004952 <_printf_i+0xd2>
 80049e2:	064d      	lsls	r5, r1, #25
 80049e4:	bf48      	it	mi
 80049e6:	b29b      	uxthmi	r3, r3
 80049e8:	e7ef      	b.n	80049ca <_printf_i+0x14a>
 80049ea:	4665      	mov	r5, ip
 80049ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80049f0:	fb02 3311 	mls	r3, r2, r1, r3
 80049f4:	5cc3      	ldrb	r3, [r0, r3]
 80049f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80049fa:	460b      	mov	r3, r1
 80049fc:	2900      	cmp	r1, #0
 80049fe:	d1f5      	bne.n	80049ec <_printf_i+0x16c>
 8004a00:	e7b9      	b.n	8004976 <_printf_i+0xf6>
 8004a02:	6813      	ldr	r3, [r2, #0]
 8004a04:	6825      	ldr	r5, [r4, #0]
 8004a06:	6961      	ldr	r1, [r4, #20]
 8004a08:	1d18      	adds	r0, r3, #4
 8004a0a:	6010      	str	r0, [r2, #0]
 8004a0c:	0628      	lsls	r0, r5, #24
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	d501      	bpl.n	8004a16 <_printf_i+0x196>
 8004a12:	6019      	str	r1, [r3, #0]
 8004a14:	e002      	b.n	8004a1c <_printf_i+0x19c>
 8004a16:	066a      	lsls	r2, r5, #25
 8004a18:	d5fb      	bpl.n	8004a12 <_printf_i+0x192>
 8004a1a:	8019      	strh	r1, [r3, #0]
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	6123      	str	r3, [r4, #16]
 8004a20:	4665      	mov	r5, ip
 8004a22:	e7b9      	b.n	8004998 <_printf_i+0x118>
 8004a24:	6813      	ldr	r3, [r2, #0]
 8004a26:	1d19      	adds	r1, r3, #4
 8004a28:	6011      	str	r1, [r2, #0]
 8004a2a:	681d      	ldr	r5, [r3, #0]
 8004a2c:	6862      	ldr	r2, [r4, #4]
 8004a2e:	2100      	movs	r1, #0
 8004a30:	4628      	mov	r0, r5
 8004a32:	f7fb fbdd 	bl	80001f0 <memchr>
 8004a36:	b108      	cbz	r0, 8004a3c <_printf_i+0x1bc>
 8004a38:	1b40      	subs	r0, r0, r5
 8004a3a:	6060      	str	r0, [r4, #4]
 8004a3c:	6863      	ldr	r3, [r4, #4]
 8004a3e:	6123      	str	r3, [r4, #16]
 8004a40:	2300      	movs	r3, #0
 8004a42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a46:	e7a7      	b.n	8004998 <_printf_i+0x118>
 8004a48:	6923      	ldr	r3, [r4, #16]
 8004a4a:	462a      	mov	r2, r5
 8004a4c:	4639      	mov	r1, r7
 8004a4e:	4630      	mov	r0, r6
 8004a50:	47c0      	blx	r8
 8004a52:	3001      	adds	r0, #1
 8004a54:	d0aa      	beq.n	80049ac <_printf_i+0x12c>
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	079b      	lsls	r3, r3, #30
 8004a5a:	d413      	bmi.n	8004a84 <_printf_i+0x204>
 8004a5c:	68e0      	ldr	r0, [r4, #12]
 8004a5e:	9b03      	ldr	r3, [sp, #12]
 8004a60:	4298      	cmp	r0, r3
 8004a62:	bfb8      	it	lt
 8004a64:	4618      	movlt	r0, r3
 8004a66:	e7a3      	b.n	80049b0 <_printf_i+0x130>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	464a      	mov	r2, r9
 8004a6c:	4639      	mov	r1, r7
 8004a6e:	4630      	mov	r0, r6
 8004a70:	47c0      	blx	r8
 8004a72:	3001      	adds	r0, #1
 8004a74:	d09a      	beq.n	80049ac <_printf_i+0x12c>
 8004a76:	3501      	adds	r5, #1
 8004a78:	68e3      	ldr	r3, [r4, #12]
 8004a7a:	9a03      	ldr	r2, [sp, #12]
 8004a7c:	1a9b      	subs	r3, r3, r2
 8004a7e:	42ab      	cmp	r3, r5
 8004a80:	dcf2      	bgt.n	8004a68 <_printf_i+0x1e8>
 8004a82:	e7eb      	b.n	8004a5c <_printf_i+0x1dc>
 8004a84:	2500      	movs	r5, #0
 8004a86:	f104 0919 	add.w	r9, r4, #25
 8004a8a:	e7f5      	b.n	8004a78 <_printf_i+0x1f8>
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1ac      	bne.n	80049ea <_printf_i+0x16a>
 8004a90:	7803      	ldrb	r3, [r0, #0]
 8004a92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a9a:	e76c      	b.n	8004976 <_printf_i+0xf6>
 8004a9c:	08004ded 	.word	0x08004ded
 8004aa0:	08004dfe 	.word	0x08004dfe

08004aa4 <memcpy>:
 8004aa4:	b510      	push	{r4, lr}
 8004aa6:	1e43      	subs	r3, r0, #1
 8004aa8:	440a      	add	r2, r1
 8004aaa:	4291      	cmp	r1, r2
 8004aac:	d100      	bne.n	8004ab0 <memcpy+0xc>
 8004aae:	bd10      	pop	{r4, pc}
 8004ab0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ab4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ab8:	e7f7      	b.n	8004aaa <memcpy+0x6>

08004aba <memmove>:
 8004aba:	4288      	cmp	r0, r1
 8004abc:	b510      	push	{r4, lr}
 8004abe:	eb01 0302 	add.w	r3, r1, r2
 8004ac2:	d807      	bhi.n	8004ad4 <memmove+0x1a>
 8004ac4:	1e42      	subs	r2, r0, #1
 8004ac6:	4299      	cmp	r1, r3
 8004ac8:	d00a      	beq.n	8004ae0 <memmove+0x26>
 8004aca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ace:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004ad2:	e7f8      	b.n	8004ac6 <memmove+0xc>
 8004ad4:	4283      	cmp	r3, r0
 8004ad6:	d9f5      	bls.n	8004ac4 <memmove+0xa>
 8004ad8:	1881      	adds	r1, r0, r2
 8004ada:	1ad2      	subs	r2, r2, r3
 8004adc:	42d3      	cmn	r3, r2
 8004ade:	d100      	bne.n	8004ae2 <memmove+0x28>
 8004ae0:	bd10      	pop	{r4, pc}
 8004ae2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ae6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004aea:	e7f7      	b.n	8004adc <memmove+0x22>

08004aec <_free_r>:
 8004aec:	b538      	push	{r3, r4, r5, lr}
 8004aee:	4605      	mov	r5, r0
 8004af0:	2900      	cmp	r1, #0
 8004af2:	d045      	beq.n	8004b80 <_free_r+0x94>
 8004af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004af8:	1f0c      	subs	r4, r1, #4
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	bfb8      	it	lt
 8004afe:	18e4      	addlt	r4, r4, r3
 8004b00:	f000 f8d2 	bl	8004ca8 <__malloc_lock>
 8004b04:	4a1f      	ldr	r2, [pc, #124]	; (8004b84 <_free_r+0x98>)
 8004b06:	6813      	ldr	r3, [r2, #0]
 8004b08:	4610      	mov	r0, r2
 8004b0a:	b933      	cbnz	r3, 8004b1a <_free_r+0x2e>
 8004b0c:	6063      	str	r3, [r4, #4]
 8004b0e:	6014      	str	r4, [r2, #0]
 8004b10:	4628      	mov	r0, r5
 8004b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b16:	f000 b8c8 	b.w	8004caa <__malloc_unlock>
 8004b1a:	42a3      	cmp	r3, r4
 8004b1c:	d90c      	bls.n	8004b38 <_free_r+0x4c>
 8004b1e:	6821      	ldr	r1, [r4, #0]
 8004b20:	1862      	adds	r2, r4, r1
 8004b22:	4293      	cmp	r3, r2
 8004b24:	bf04      	itt	eq
 8004b26:	681a      	ldreq	r2, [r3, #0]
 8004b28:	685b      	ldreq	r3, [r3, #4]
 8004b2a:	6063      	str	r3, [r4, #4]
 8004b2c:	bf04      	itt	eq
 8004b2e:	1852      	addeq	r2, r2, r1
 8004b30:	6022      	streq	r2, [r4, #0]
 8004b32:	6004      	str	r4, [r0, #0]
 8004b34:	e7ec      	b.n	8004b10 <_free_r+0x24>
 8004b36:	4613      	mov	r3, r2
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	b10a      	cbz	r2, 8004b40 <_free_r+0x54>
 8004b3c:	42a2      	cmp	r2, r4
 8004b3e:	d9fa      	bls.n	8004b36 <_free_r+0x4a>
 8004b40:	6819      	ldr	r1, [r3, #0]
 8004b42:	1858      	adds	r0, r3, r1
 8004b44:	42a0      	cmp	r0, r4
 8004b46:	d10b      	bne.n	8004b60 <_free_r+0x74>
 8004b48:	6820      	ldr	r0, [r4, #0]
 8004b4a:	4401      	add	r1, r0
 8004b4c:	1858      	adds	r0, r3, r1
 8004b4e:	4282      	cmp	r2, r0
 8004b50:	6019      	str	r1, [r3, #0]
 8004b52:	d1dd      	bne.n	8004b10 <_free_r+0x24>
 8004b54:	6810      	ldr	r0, [r2, #0]
 8004b56:	6852      	ldr	r2, [r2, #4]
 8004b58:	605a      	str	r2, [r3, #4]
 8004b5a:	4401      	add	r1, r0
 8004b5c:	6019      	str	r1, [r3, #0]
 8004b5e:	e7d7      	b.n	8004b10 <_free_r+0x24>
 8004b60:	d902      	bls.n	8004b68 <_free_r+0x7c>
 8004b62:	230c      	movs	r3, #12
 8004b64:	602b      	str	r3, [r5, #0]
 8004b66:	e7d3      	b.n	8004b10 <_free_r+0x24>
 8004b68:	6820      	ldr	r0, [r4, #0]
 8004b6a:	1821      	adds	r1, r4, r0
 8004b6c:	428a      	cmp	r2, r1
 8004b6e:	bf04      	itt	eq
 8004b70:	6811      	ldreq	r1, [r2, #0]
 8004b72:	6852      	ldreq	r2, [r2, #4]
 8004b74:	6062      	str	r2, [r4, #4]
 8004b76:	bf04      	itt	eq
 8004b78:	1809      	addeq	r1, r1, r0
 8004b7a:	6021      	streq	r1, [r4, #0]
 8004b7c:	605c      	str	r4, [r3, #4]
 8004b7e:	e7c7      	b.n	8004b10 <_free_r+0x24>
 8004b80:	bd38      	pop	{r3, r4, r5, pc}
 8004b82:	bf00      	nop
 8004b84:	200000a4 	.word	0x200000a4

08004b88 <_malloc_r>:
 8004b88:	b570      	push	{r4, r5, r6, lr}
 8004b8a:	1ccd      	adds	r5, r1, #3
 8004b8c:	f025 0503 	bic.w	r5, r5, #3
 8004b90:	3508      	adds	r5, #8
 8004b92:	2d0c      	cmp	r5, #12
 8004b94:	bf38      	it	cc
 8004b96:	250c      	movcc	r5, #12
 8004b98:	2d00      	cmp	r5, #0
 8004b9a:	4606      	mov	r6, r0
 8004b9c:	db01      	blt.n	8004ba2 <_malloc_r+0x1a>
 8004b9e:	42a9      	cmp	r1, r5
 8004ba0:	d903      	bls.n	8004baa <_malloc_r+0x22>
 8004ba2:	230c      	movs	r3, #12
 8004ba4:	6033      	str	r3, [r6, #0]
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	bd70      	pop	{r4, r5, r6, pc}
 8004baa:	f000 f87d 	bl	8004ca8 <__malloc_lock>
 8004bae:	4a21      	ldr	r2, [pc, #132]	; (8004c34 <_malloc_r+0xac>)
 8004bb0:	6814      	ldr	r4, [r2, #0]
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	b991      	cbnz	r1, 8004bdc <_malloc_r+0x54>
 8004bb6:	4c20      	ldr	r4, [pc, #128]	; (8004c38 <_malloc_r+0xb0>)
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	b91b      	cbnz	r3, 8004bc4 <_malloc_r+0x3c>
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	f000 f863 	bl	8004c88 <_sbrk_r>
 8004bc2:	6020      	str	r0, [r4, #0]
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	f000 f85e 	bl	8004c88 <_sbrk_r>
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	d124      	bne.n	8004c1a <_malloc_r+0x92>
 8004bd0:	230c      	movs	r3, #12
 8004bd2:	6033      	str	r3, [r6, #0]
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	f000 f868 	bl	8004caa <__malloc_unlock>
 8004bda:	e7e4      	b.n	8004ba6 <_malloc_r+0x1e>
 8004bdc:	680b      	ldr	r3, [r1, #0]
 8004bde:	1b5b      	subs	r3, r3, r5
 8004be0:	d418      	bmi.n	8004c14 <_malloc_r+0x8c>
 8004be2:	2b0b      	cmp	r3, #11
 8004be4:	d90f      	bls.n	8004c06 <_malloc_r+0x7e>
 8004be6:	600b      	str	r3, [r1, #0]
 8004be8:	50cd      	str	r5, [r1, r3]
 8004bea:	18cc      	adds	r4, r1, r3
 8004bec:	4630      	mov	r0, r6
 8004bee:	f000 f85c 	bl	8004caa <__malloc_unlock>
 8004bf2:	f104 000b 	add.w	r0, r4, #11
 8004bf6:	1d23      	adds	r3, r4, #4
 8004bf8:	f020 0007 	bic.w	r0, r0, #7
 8004bfc:	1ac3      	subs	r3, r0, r3
 8004bfe:	d0d3      	beq.n	8004ba8 <_malloc_r+0x20>
 8004c00:	425a      	negs	r2, r3
 8004c02:	50e2      	str	r2, [r4, r3]
 8004c04:	e7d0      	b.n	8004ba8 <_malloc_r+0x20>
 8004c06:	428c      	cmp	r4, r1
 8004c08:	684b      	ldr	r3, [r1, #4]
 8004c0a:	bf16      	itet	ne
 8004c0c:	6063      	strne	r3, [r4, #4]
 8004c0e:	6013      	streq	r3, [r2, #0]
 8004c10:	460c      	movne	r4, r1
 8004c12:	e7eb      	b.n	8004bec <_malloc_r+0x64>
 8004c14:	460c      	mov	r4, r1
 8004c16:	6849      	ldr	r1, [r1, #4]
 8004c18:	e7cc      	b.n	8004bb4 <_malloc_r+0x2c>
 8004c1a:	1cc4      	adds	r4, r0, #3
 8004c1c:	f024 0403 	bic.w	r4, r4, #3
 8004c20:	42a0      	cmp	r0, r4
 8004c22:	d005      	beq.n	8004c30 <_malloc_r+0xa8>
 8004c24:	1a21      	subs	r1, r4, r0
 8004c26:	4630      	mov	r0, r6
 8004c28:	f000 f82e 	bl	8004c88 <_sbrk_r>
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	d0cf      	beq.n	8004bd0 <_malloc_r+0x48>
 8004c30:	6025      	str	r5, [r4, #0]
 8004c32:	e7db      	b.n	8004bec <_malloc_r+0x64>
 8004c34:	200000a4 	.word	0x200000a4
 8004c38:	200000a8 	.word	0x200000a8

08004c3c <_realloc_r>:
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3e:	4607      	mov	r7, r0
 8004c40:	4614      	mov	r4, r2
 8004c42:	460e      	mov	r6, r1
 8004c44:	b921      	cbnz	r1, 8004c50 <_realloc_r+0x14>
 8004c46:	4611      	mov	r1, r2
 8004c48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c4c:	f7ff bf9c 	b.w	8004b88 <_malloc_r>
 8004c50:	b922      	cbnz	r2, 8004c5c <_realloc_r+0x20>
 8004c52:	f7ff ff4b 	bl	8004aec <_free_r>
 8004c56:	4625      	mov	r5, r4
 8004c58:	4628      	mov	r0, r5
 8004c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c5c:	f000 f826 	bl	8004cac <_malloc_usable_size_r>
 8004c60:	42a0      	cmp	r0, r4
 8004c62:	d20f      	bcs.n	8004c84 <_realloc_r+0x48>
 8004c64:	4621      	mov	r1, r4
 8004c66:	4638      	mov	r0, r7
 8004c68:	f7ff ff8e 	bl	8004b88 <_malloc_r>
 8004c6c:	4605      	mov	r5, r0
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d0f2      	beq.n	8004c58 <_realloc_r+0x1c>
 8004c72:	4631      	mov	r1, r6
 8004c74:	4622      	mov	r2, r4
 8004c76:	f7ff ff15 	bl	8004aa4 <memcpy>
 8004c7a:	4631      	mov	r1, r6
 8004c7c:	4638      	mov	r0, r7
 8004c7e:	f7ff ff35 	bl	8004aec <_free_r>
 8004c82:	e7e9      	b.n	8004c58 <_realloc_r+0x1c>
 8004c84:	4635      	mov	r5, r6
 8004c86:	e7e7      	b.n	8004c58 <_realloc_r+0x1c>

08004c88 <_sbrk_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	4c06      	ldr	r4, [pc, #24]	; (8004ca4 <_sbrk_r+0x1c>)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	4605      	mov	r5, r0
 8004c90:	4608      	mov	r0, r1
 8004c92:	6023      	str	r3, [r4, #0]
 8004c94:	f7ff fb3a 	bl	800430c <_sbrk>
 8004c98:	1c43      	adds	r3, r0, #1
 8004c9a:	d102      	bne.n	8004ca2 <_sbrk_r+0x1a>
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	b103      	cbz	r3, 8004ca2 <_sbrk_r+0x1a>
 8004ca0:	602b      	str	r3, [r5, #0]
 8004ca2:	bd38      	pop	{r3, r4, r5, pc}
 8004ca4:	2000022c 	.word	0x2000022c

08004ca8 <__malloc_lock>:
 8004ca8:	4770      	bx	lr

08004caa <__malloc_unlock>:
 8004caa:	4770      	bx	lr

08004cac <_malloc_usable_size_r>:
 8004cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cb0:	1f18      	subs	r0, r3, #4
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	bfbc      	itt	lt
 8004cb6:	580b      	ldrlt	r3, [r1, r0]
 8004cb8:	18c0      	addlt	r0, r0, r3
 8004cba:	4770      	bx	lr

08004cbc <_init>:
 8004cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbe:	bf00      	nop
 8004cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc2:	bc08      	pop	{r3}
 8004cc4:	469e      	mov	lr, r3
 8004cc6:	4770      	bx	lr

08004cc8 <_fini>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	bf00      	nop
 8004ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cce:	bc08      	pop	{r3}
 8004cd0:	469e      	mov	lr, r3
 8004cd2:	4770      	bx	lr
