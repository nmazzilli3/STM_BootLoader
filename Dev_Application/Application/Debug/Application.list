
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000365c  080081a0  080081a0  000081a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800b7fc  0800b7fc  0000b7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b87c  0800b87c  00010090  2**0
                  CONTENTS
  4 .ARM          00000000  0800b87c  0800b87c  00010090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b87c  0800b87c  00010090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b87c  0800b87c  0000b87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b880  0800b880  0000b880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800b884  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000090  0800b914  00010090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  0800b914  00010158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8b4  00000000  00000000  000100c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f0b  00000000  00000000  0001e974  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000708  00000000  00000000  00020880  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000630  00000000  00000000  00020f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d3eb  00000000  00000000  000215b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000094e6  00000000  00000000  0003e9a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a4139  00000000  00000000  00047e89  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ebfc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001de8  00000000  00000000  000ec040  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080081a0 <__do_global_dtors_aux>:
 80081a0:	b510      	push	{r4, lr}
 80081a2:	4c05      	ldr	r4, [pc, #20]	; (80081b8 <__do_global_dtors_aux+0x18>)
 80081a4:	7823      	ldrb	r3, [r4, #0]
 80081a6:	b933      	cbnz	r3, 80081b6 <__do_global_dtors_aux+0x16>
 80081a8:	4b04      	ldr	r3, [pc, #16]	; (80081bc <__do_global_dtors_aux+0x1c>)
 80081aa:	b113      	cbz	r3, 80081b2 <__do_global_dtors_aux+0x12>
 80081ac:	4804      	ldr	r0, [pc, #16]	; (80081c0 <__do_global_dtors_aux+0x20>)
 80081ae:	f3af 8000 	nop.w
 80081b2:	2301      	movs	r3, #1
 80081b4:	7023      	strb	r3, [r4, #0]
 80081b6:	bd10      	pop	{r4, pc}
 80081b8:	20000090 	.word	0x20000090
 80081bc:	00000000 	.word	0x00000000
 80081c0:	0800b7e4 	.word	0x0800b7e4

080081c4 <frame_dummy>:
 80081c4:	b508      	push	{r3, lr}
 80081c6:	4b03      	ldr	r3, [pc, #12]	; (80081d4 <frame_dummy+0x10>)
 80081c8:	b11b      	cbz	r3, 80081d2 <frame_dummy+0xe>
 80081ca:	4903      	ldr	r1, [pc, #12]	; (80081d8 <frame_dummy+0x14>)
 80081cc:	4803      	ldr	r0, [pc, #12]	; (80081dc <frame_dummy+0x18>)
 80081ce:	f3af 8000 	nop.w
 80081d2:	bd08      	pop	{r3, pc}
 80081d4:	00000000 	.word	0x00000000
 80081d8:	20000094 	.word	0x20000094
 80081dc:	0800b7e4 	.word	0x0800b7e4

080081e0 <strlen>:
 80081e0:	4603      	mov	r3, r0
 80081e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081e6:	2a00      	cmp	r2, #0
 80081e8:	d1fb      	bne.n	80081e2 <strlen+0x2>
 80081ea:	1a18      	subs	r0, r3, r0
 80081ec:	3801      	subs	r0, #1
 80081ee:	4770      	bx	lr

080081f0 <memchr>:
 80081f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80081f4:	2a10      	cmp	r2, #16
 80081f6:	db2b      	blt.n	8008250 <memchr+0x60>
 80081f8:	f010 0f07 	tst.w	r0, #7
 80081fc:	d008      	beq.n	8008210 <memchr+0x20>
 80081fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008202:	3a01      	subs	r2, #1
 8008204:	428b      	cmp	r3, r1
 8008206:	d02d      	beq.n	8008264 <memchr+0x74>
 8008208:	f010 0f07 	tst.w	r0, #7
 800820c:	b342      	cbz	r2, 8008260 <memchr+0x70>
 800820e:	d1f6      	bne.n	80081fe <memchr+0xe>
 8008210:	b4f0      	push	{r4, r5, r6, r7}
 8008212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800821a:	f022 0407 	bic.w	r4, r2, #7
 800821e:	f07f 0700 	mvns.w	r7, #0
 8008222:	2300      	movs	r3, #0
 8008224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008228:	3c08      	subs	r4, #8
 800822a:	ea85 0501 	eor.w	r5, r5, r1
 800822e:	ea86 0601 	eor.w	r6, r6, r1
 8008232:	fa85 f547 	uadd8	r5, r5, r7
 8008236:	faa3 f587 	sel	r5, r3, r7
 800823a:	fa86 f647 	uadd8	r6, r6, r7
 800823e:	faa5 f687 	sel	r6, r5, r7
 8008242:	b98e      	cbnz	r6, 8008268 <memchr+0x78>
 8008244:	d1ee      	bne.n	8008224 <memchr+0x34>
 8008246:	bcf0      	pop	{r4, r5, r6, r7}
 8008248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800824c:	f002 0207 	and.w	r2, r2, #7
 8008250:	b132      	cbz	r2, 8008260 <memchr+0x70>
 8008252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008256:	3a01      	subs	r2, #1
 8008258:	ea83 0301 	eor.w	r3, r3, r1
 800825c:	b113      	cbz	r3, 8008264 <memchr+0x74>
 800825e:	d1f8      	bne.n	8008252 <memchr+0x62>
 8008260:	2000      	movs	r0, #0
 8008262:	4770      	bx	lr
 8008264:	3801      	subs	r0, #1
 8008266:	4770      	bx	lr
 8008268:	2d00      	cmp	r5, #0
 800826a:	bf06      	itte	eq
 800826c:	4635      	moveq	r5, r6
 800826e:	3803      	subeq	r0, #3
 8008270:	3807      	subne	r0, #7
 8008272:	f015 0f01 	tst.w	r5, #1
 8008276:	d107      	bne.n	8008288 <memchr+0x98>
 8008278:	3001      	adds	r0, #1
 800827a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800827e:	bf02      	ittt	eq
 8008280:	3001      	addeq	r0, #1
 8008282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008286:	3001      	addeq	r0, #1
 8008288:	bcf0      	pop	{r4, r5, r6, r7}
 800828a:	3801      	subs	r0, #1
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop

08008290 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008294:	4b08      	ldr	r3, [pc, #32]	; (80082b8 <HAL_Init+0x28>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a07      	ldr	r2, [pc, #28]	; (80082b8 <HAL_Init+0x28>)
 800829a:	f043 0310 	orr.w	r3, r3, #16
 800829e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80082a0:	2003      	movs	r0, #3
 80082a2:	f000 f927 	bl	80084f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80082a6:	2000      	movs	r0, #0
 80082a8:	f000 f808 	bl	80082bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80082ac:	f002 fcea 	bl	800ac84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	40022000 	.word	0x40022000

080082bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80082c4:	4b12      	ldr	r3, [pc, #72]	; (8008310 <HAL_InitTick+0x54>)
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	4b12      	ldr	r3, [pc, #72]	; (8008314 <HAL_InitTick+0x58>)
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	4619      	mov	r1, r3
 80082ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80082d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80082d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 f93f 	bl	800855e <HAL_SYSTICK_Config>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e00e      	b.n	8008308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b0f      	cmp	r3, #15
 80082ee:	d80a      	bhi.n	8008306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80082f0:	2200      	movs	r2, #0
 80082f2:	6879      	ldr	r1, [r7, #4]
 80082f4:	f04f 30ff 	mov.w	r0, #4294967295
 80082f8:	f000 f907 	bl	800850a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80082fc:	4a06      	ldr	r2, [pc, #24]	; (8008318 <HAL_InitTick+0x5c>)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	e000      	b.n	8008308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
}
 8008308:	4618      	mov	r0, r3
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	20000028 	.word	0x20000028
 8008314:	20000004 	.word	0x20000004
 8008318:	20000000 	.word	0x20000000

0800831c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800831c:	b480      	push	{r7}
 800831e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008320:	4b06      	ldr	r3, [pc, #24]	; (800833c <HAL_IncTick+0x20>)
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	461a      	mov	r2, r3
 8008326:	4b06      	ldr	r3, [pc, #24]	; (8008340 <HAL_IncTick+0x24>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4413      	add	r3, r2
 800832c:	4a04      	ldr	r2, [pc, #16]	; (8008340 <HAL_IncTick+0x24>)
 800832e:	6013      	str	r3, [r2, #0]
}
 8008330:	bf00      	nop
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	20000004 	.word	0x20000004
 8008340:	200000bc 	.word	0x200000bc

08008344 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008344:	b480      	push	{r7}
 8008346:	af00      	add	r7, sp, #0
  return uwTick;  
 8008348:	4b03      	ldr	r3, [pc, #12]	; (8008358 <HAL_GetTick+0x14>)
 800834a:	681b      	ldr	r3, [r3, #0]
}
 800834c:	4618      	mov	r0, r3
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	200000bc 	.word	0x200000bc

0800835c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f003 0307 	and.w	r3, r3, #7
 800836a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800836c:	4b0c      	ldr	r3, [pc, #48]	; (80083a0 <NVIC_SetPriorityGrouping+0x44>)
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008372:	68ba      	ldr	r2, [r7, #8]
 8008374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008378:	4013      	ands	r3, r2
 800837a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800838c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800838e:	4a04      	ldr	r2, [pc, #16]	; (80083a0 <NVIC_SetPriorityGrouping+0x44>)
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	60d3      	str	r3, [r2, #12]
}
 8008394:	bf00      	nop
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr
 80083a0:	e000ed00 	.word	0xe000ed00

080083a4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80083a4:	b480      	push	{r7}
 80083a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80083a8:	4b04      	ldr	r3, [pc, #16]	; (80083bc <NVIC_GetPriorityGrouping+0x18>)
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	0a1b      	lsrs	r3, r3, #8
 80083ae:	f003 0307 	and.w	r3, r3, #7
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr
 80083bc:	e000ed00 	.word	0xe000ed00

080083c0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	4603      	mov	r3, r0
 80083c8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80083ca:	79fb      	ldrb	r3, [r7, #7]
 80083cc:	f003 021f 	and.w	r2, r3, #31
 80083d0:	4907      	ldr	r1, [pc, #28]	; (80083f0 <NVIC_EnableIRQ+0x30>)
 80083d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083d6:	095b      	lsrs	r3, r3, #5
 80083d8:	2001      	movs	r0, #1
 80083da:	fa00 f202 	lsl.w	r2, r0, r2
 80083de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80083e2:	bf00      	nop
 80083e4:	370c      	adds	r7, #12
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	e000e100 	.word	0xe000e100

080083f4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	4603      	mov	r3, r0
 80083fc:	6039      	str	r1, [r7, #0]
 80083fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8008400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008404:	2b00      	cmp	r3, #0
 8008406:	da0b      	bge.n	8008420 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	b2da      	uxtb	r2, r3
 800840c:	490c      	ldr	r1, [pc, #48]	; (8008440 <NVIC_SetPriority+0x4c>)
 800840e:	79fb      	ldrb	r3, [r7, #7]
 8008410:	f003 030f 	and.w	r3, r3, #15
 8008414:	3b04      	subs	r3, #4
 8008416:	0112      	lsls	r2, r2, #4
 8008418:	b2d2      	uxtb	r2, r2
 800841a:	440b      	add	r3, r1
 800841c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800841e:	e009      	b.n	8008434 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	b2da      	uxtb	r2, r3
 8008424:	4907      	ldr	r1, [pc, #28]	; (8008444 <NVIC_SetPriority+0x50>)
 8008426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800842a:	0112      	lsls	r2, r2, #4
 800842c:	b2d2      	uxtb	r2, r2
 800842e:	440b      	add	r3, r1
 8008430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr
 8008440:	e000ed00 	.word	0xe000ed00
 8008444:	e000e100 	.word	0xe000e100

08008448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008448:	b480      	push	{r7}
 800844a:	b089      	sub	sp, #36	; 0x24
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f003 0307 	and.w	r3, r3, #7
 800845a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	f1c3 0307 	rsb	r3, r3, #7
 8008462:	2b04      	cmp	r3, #4
 8008464:	bf28      	it	cs
 8008466:	2304      	movcs	r3, #4
 8008468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	3304      	adds	r3, #4
 800846e:	2b06      	cmp	r3, #6
 8008470:	d902      	bls.n	8008478 <NVIC_EncodePriority+0x30>
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	3b03      	subs	r3, #3
 8008476:	e000      	b.n	800847a <NVIC_EncodePriority+0x32>
 8008478:	2300      	movs	r3, #0
 800847a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800847c:	f04f 32ff 	mov.w	r2, #4294967295
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	fa02 f303 	lsl.w	r3, r2, r3
 8008486:	43da      	mvns	r2, r3
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	401a      	ands	r2, r3
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008490:	f04f 31ff 	mov.w	r1, #4294967295
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	fa01 f303 	lsl.w	r3, r1, r3
 800849a:	43d9      	mvns	r1, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084a0:	4313      	orrs	r3, r2
         );
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3724      	adds	r7, #36	; 0x24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
	...

080084b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	3b01      	subs	r3, #1
 80084bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084c0:	d301      	bcc.n	80084c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80084c2:	2301      	movs	r3, #1
 80084c4:	e00f      	b.n	80084e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80084c6:	4a0a      	ldr	r2, [pc, #40]	; (80084f0 <SysTick_Config+0x40>)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80084ce:	210f      	movs	r1, #15
 80084d0:	f04f 30ff 	mov.w	r0, #4294967295
 80084d4:	f7ff ff8e 	bl	80083f4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80084d8:	4b05      	ldr	r3, [pc, #20]	; (80084f0 <SysTick_Config+0x40>)
 80084da:	2200      	movs	r2, #0
 80084dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80084de:	4b04      	ldr	r3, [pc, #16]	; (80084f0 <SysTick_Config+0x40>)
 80084e0:	2207      	movs	r2, #7
 80084e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	e000e010 	.word	0xe000e010

080084f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7ff ff2d 	bl	800835c <NVIC_SetPriorityGrouping>
}
 8008502:	bf00      	nop
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b086      	sub	sp, #24
 800850e:	af00      	add	r7, sp, #0
 8008510:	4603      	mov	r3, r0
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	607a      	str	r2, [r7, #4]
 8008516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008518:	2300      	movs	r3, #0
 800851a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800851c:	f7ff ff42 	bl	80083a4 <NVIC_GetPriorityGrouping>
 8008520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	68b9      	ldr	r1, [r7, #8]
 8008526:	6978      	ldr	r0, [r7, #20]
 8008528:	f7ff ff8e 	bl	8008448 <NVIC_EncodePriority>
 800852c:	4602      	mov	r2, r0
 800852e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008532:	4611      	mov	r1, r2
 8008534:	4618      	mov	r0, r3
 8008536:	f7ff ff5d 	bl	80083f4 <NVIC_SetPriority>
}
 800853a:	bf00      	nop
 800853c:	3718      	adds	r7, #24
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	4603      	mov	r3, r0
 800854a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800854c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008550:	4618      	mov	r0, r3
 8008552:	f7ff ff35 	bl	80083c0 <NVIC_EnableIRQ>
}
 8008556:	bf00      	nop
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b082      	sub	sp, #8
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7ff ffa2 	bl	80084b0 <SysTick_Config>
 800856c:	4603      	mov	r3, r0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
	...

08008578 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and initialize the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e054      	b.n	8008634 <HAL_CRC_Init+0xbc>
  }
  
  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	7f5b      	ldrb	r3, [r3, #29]
 800858e:	b2db      	uxtb	r3, r3
 8008590:	2b00      	cmp	r3, #0
 8008592:	d105      	bne.n	80085a0 <HAL_CRC_Init+0x28>
  {   
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f002 fb96 	bl	800accc <HAL_CRC_MspInit>
  }
  
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2202      	movs	r2, #2
 80085a4:	775a      	strb	r2, [r3, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	791b      	ldrb	r3, [r3, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10c      	bne.n	80085c8 <HAL_CRC_Init+0x50>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a22      	ldr	r2, [pc, #136]	; (800863c <HAL_CRC_Init+0xc4>)
 80085b4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689a      	ldr	r2, [r3, #8]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f022 0218 	bic.w	r2, r2, #24
 80085c4:	609a      	str	r2, [r3, #8]
 80085c6:	e00c      	b.n	80085e2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC IP with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6899      	ldr	r1, [r3, #8]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	461a      	mov	r2, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f834 	bl	8008640 <HAL_CRCEx_Polynomial_Set>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e028      	b.n	8008634 <HAL_CRC_Init+0xbc>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	795b      	ldrb	r3, [r3, #5]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d105      	bne.n	80085f6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f04f 32ff 	mov.w	r2, #4294967295
 80085f2:	611a      	str	r2, [r3, #16]
 80085f4:	e004      	b.n	8008600 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	6912      	ldr	r2, [r2, #16]
 80085fe:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	695a      	ldr	r2, [r3, #20]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	699a      	ldr	r2, [r3, #24]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	430a      	orrs	r2, r1
 800862a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	04c11db7 	.word	0x04c11db7

08008640 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8008640:	b480      	push	{r7}
 8008642:	b087      	sub	sp, #28
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800864c:	231f      	movs	r3, #31
 800864e:	617b      	str	r3, [r7, #20]
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0U) && (msb-- > 0U)){}
 8008650:	bf00      	nop
 8008652:	2201      	movs	r2, #1
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	409a      	lsls	r2, r3
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	4013      	ands	r3, r2
 800865c:	2b00      	cmp	r3, #0
 800865e:	d104      	bne.n	800866a <HAL_CRCEx_Polynomial_Set+0x2a>
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	1e5a      	subs	r2, r3, #1
 8008664:	617a      	str	r2, [r7, #20]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1f3      	bne.n	8008652 <HAL_CRCEx_Polynomial_Set+0x12>

  switch (PolyLength)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2b18      	cmp	r3, #24
 800866e:	d844      	bhi.n	80086fa <HAL_CRCEx_Polynomial_Set+0xba>
 8008670:	a201      	add	r2, pc, #4	; (adr r2, 8008678 <HAL_CRCEx_Polynomial_Set+0x38>)
 8008672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008676:	bf00      	nop
 8008678:	080086fb 	.word	0x080086fb
 800867c:	080086fb 	.word	0x080086fb
 8008680:	080086fb 	.word	0x080086fb
 8008684:	080086fb 	.word	0x080086fb
 8008688:	080086fb 	.word	0x080086fb
 800868c:	080086fb 	.word	0x080086fb
 8008690:	080086fb 	.word	0x080086fb
 8008694:	080086fb 	.word	0x080086fb
 8008698:	080086f1 	.word	0x080086f1
 800869c:	080086fb 	.word	0x080086fb
 80086a0:	080086fb 	.word	0x080086fb
 80086a4:	080086fb 	.word	0x080086fb
 80086a8:	080086fb 	.word	0x080086fb
 80086ac:	080086fb 	.word	0x080086fb
 80086b0:	080086fb 	.word	0x080086fb
 80086b4:	080086fb 	.word	0x080086fb
 80086b8:	080086e7 	.word	0x080086e7
 80086bc:	080086fb 	.word	0x080086fb
 80086c0:	080086fb 	.word	0x080086fb
 80086c4:	080086fb 	.word	0x080086fb
 80086c8:	080086fb 	.word	0x080086fb
 80086cc:	080086fb 	.word	0x080086fb
 80086d0:	080086fb 	.word	0x080086fb
 80086d4:	080086fb 	.word	0x080086fb
 80086d8:	080086dd 	.word	0x080086dd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B) 
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	2b06      	cmp	r3, #6
 80086e0:	d90d      	bls.n	80086fe <HAL_CRCEx_Polynomial_Set+0xbe>
      {
        return  HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e01f      	b.n	8008726 <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2b07      	cmp	r3, #7
 80086ea:	d90a      	bls.n	8008702 <HAL_CRCEx_Polynomial_Set+0xc2>
      {
        return  HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e01a      	b.n	8008726 <HAL_CRCEx_Polynomial_Set+0xe6>
      }      
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	2b0f      	cmp	r3, #15
 80086f4:	d907      	bls.n	8008706 <HAL_CRCEx_Polynomial_Set+0xc6>
      {
        return  HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e015      	b.n	8008726 <HAL_CRCEx_Polynomial_Set+0xe6>
      break;
    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break; 
    default:
      break;                  
 80086fa:	bf00      	nop
 80086fc:	e004      	b.n	8008708 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80086fe:	bf00      	nop
 8008700:	e002      	b.n	8008708 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 8008702:	bf00      	nop
 8008704:	e000      	b.n	8008708 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 8008706:	bf00      	nop
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	615a      	str	r2, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f023 0118 	bic.w	r1, r3, #24
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	430a      	orrs	r2, r1
 8008722:	609a      	str	r2, [r3, #8]
  
  /* Return function status */
  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	371c      	adds	r7, #28
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop

08008734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008734:	b480      	push	{r7}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800873e:	2300      	movs	r3, #0
 8008740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008742:	2300      	movs	r3, #0
 8008744:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8008746:	2300      	movs	r3, #0
 8008748:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800874a:	e160      	b.n	8008a0e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	2101      	movs	r1, #1
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	fa01 f303 	lsl.w	r3, r1, r3
 8008758:	4013      	ands	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 8152 	beq.w	8008a08 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	2b02      	cmp	r3, #2
 800876a:	d003      	beq.n	8008774 <HAL_GPIO_Init+0x40>
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	2b12      	cmp	r3, #18
 8008772:	d123      	bne.n	80087bc <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	08da      	lsrs	r2, r3, #3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3208      	adds	r2, #8
 800877c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008780:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f003 0307 	and.w	r3, r3, #7
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	220f      	movs	r2, #15
 800878c:	fa02 f303 	lsl.w	r3, r2, r3
 8008790:	43db      	mvns	r3, r3
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	4013      	ands	r3, r2
 8008796:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	691a      	ldr	r2, [r3, #16]
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	f003 0307 	and.w	r3, r3, #7
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	fa02 f303 	lsl.w	r3, r2, r3
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	08da      	lsrs	r2, r3, #3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	3208      	adds	r2, #8
 80087b6:	6939      	ldr	r1, [r7, #16]
 80087b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	2203      	movs	r2, #3
 80087c8:	fa02 f303 	lsl.w	r3, r2, r3
 80087cc:	43db      	mvns	r3, r3
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	4013      	ands	r3, r2
 80087d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	f003 0203 	and.w	r2, r3, #3
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	005b      	lsls	r3, r3, #1
 80087e0:	fa02 f303 	lsl.w	r3, r2, r3
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d00b      	beq.n	8008810 <HAL_GPIO_Init+0xdc>
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d007      	beq.n	8008810 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008804:	2b11      	cmp	r3, #17
 8008806:	d003      	beq.n	8008810 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	2b12      	cmp	r3, #18
 800880e:	d130      	bne.n	8008872 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	2203      	movs	r2, #3
 800881c:	fa02 f303 	lsl.w	r3, r2, r3
 8008820:	43db      	mvns	r3, r3
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	4013      	ands	r3, r2
 8008826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	68da      	ldr	r2, [r3, #12]
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	005b      	lsls	r3, r3, #1
 8008830:	fa02 f303 	lsl.w	r3, r2, r3
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	4313      	orrs	r3, r2
 8008838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008846:	2201      	movs	r2, #1
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	fa02 f303 	lsl.w	r3, r2, r3
 800884e:	43db      	mvns	r3, r3
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	4013      	ands	r3, r2
 8008854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	091b      	lsrs	r3, r3, #4
 800885c:	f003 0201 	and.w	r2, r3, #1
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	fa02 f303 	lsl.w	r3, r2, r3
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	4313      	orrs	r3, r2
 800886a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	005b      	lsls	r3, r3, #1
 800887c:	2203      	movs	r2, #3
 800887e:	fa02 f303 	lsl.w	r3, r2, r3
 8008882:	43db      	mvns	r3, r3
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	4013      	ands	r3, r2
 8008888:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	689a      	ldr	r2, [r3, #8]
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	005b      	lsls	r3, r3, #1
 8008892:	fa02 f303 	lsl.w	r3, r2, r3
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	4313      	orrs	r3, r2
 800889a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f000 80ac 	beq.w	8008a08 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088b0:	4b5e      	ldr	r3, [pc, #376]	; (8008a2c <HAL_GPIO_Init+0x2f8>)
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	4a5d      	ldr	r2, [pc, #372]	; (8008a2c <HAL_GPIO_Init+0x2f8>)
 80088b6:	f043 0301 	orr.w	r3, r3, #1
 80088ba:	6193      	str	r3, [r2, #24]
 80088bc:	4b5b      	ldr	r3, [pc, #364]	; (8008a2c <HAL_GPIO_Init+0x2f8>)
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	60bb      	str	r3, [r7, #8]
 80088c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80088c8:	4a59      	ldr	r2, [pc, #356]	; (8008a30 <HAL_GPIO_Init+0x2fc>)
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	089b      	lsrs	r3, r3, #2
 80088ce:	3302      	adds	r3, #2
 80088d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088d4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	f003 0303 	and.w	r3, r3, #3
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	220f      	movs	r2, #15
 80088e0:	fa02 f303 	lsl.w	r3, r2, r3
 80088e4:	43db      	mvns	r3, r3
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	4013      	ands	r3, r2
 80088ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80088f2:	d025      	beq.n	8008940 <HAL_GPIO_Init+0x20c>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a4f      	ldr	r2, [pc, #316]	; (8008a34 <HAL_GPIO_Init+0x300>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d01f      	beq.n	800893c <HAL_GPIO_Init+0x208>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a4e      	ldr	r2, [pc, #312]	; (8008a38 <HAL_GPIO_Init+0x304>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d019      	beq.n	8008938 <HAL_GPIO_Init+0x204>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a4d      	ldr	r2, [pc, #308]	; (8008a3c <HAL_GPIO_Init+0x308>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d013      	beq.n	8008934 <HAL_GPIO_Init+0x200>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a4c      	ldr	r2, [pc, #304]	; (8008a40 <HAL_GPIO_Init+0x30c>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d00d      	beq.n	8008930 <HAL_GPIO_Init+0x1fc>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a4b      	ldr	r2, [pc, #300]	; (8008a44 <HAL_GPIO_Init+0x310>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d007      	beq.n	800892c <HAL_GPIO_Init+0x1f8>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a4a      	ldr	r2, [pc, #296]	; (8008a48 <HAL_GPIO_Init+0x314>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d101      	bne.n	8008928 <HAL_GPIO_Init+0x1f4>
 8008924:	2306      	movs	r3, #6
 8008926:	e00c      	b.n	8008942 <HAL_GPIO_Init+0x20e>
 8008928:	2307      	movs	r3, #7
 800892a:	e00a      	b.n	8008942 <HAL_GPIO_Init+0x20e>
 800892c:	2305      	movs	r3, #5
 800892e:	e008      	b.n	8008942 <HAL_GPIO_Init+0x20e>
 8008930:	2304      	movs	r3, #4
 8008932:	e006      	b.n	8008942 <HAL_GPIO_Init+0x20e>
 8008934:	2303      	movs	r3, #3
 8008936:	e004      	b.n	8008942 <HAL_GPIO_Init+0x20e>
 8008938:	2302      	movs	r3, #2
 800893a:	e002      	b.n	8008942 <HAL_GPIO_Init+0x20e>
 800893c:	2301      	movs	r3, #1
 800893e:	e000      	b.n	8008942 <HAL_GPIO_Init+0x20e>
 8008940:	2300      	movs	r3, #0
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	f002 0203 	and.w	r2, r2, #3
 8008948:	0092      	lsls	r2, r2, #2
 800894a:	4093      	lsls	r3, r2
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	4313      	orrs	r3, r2
 8008950:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008952:	4937      	ldr	r1, [pc, #220]	; (8008a30 <HAL_GPIO_Init+0x2fc>)
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	089b      	lsrs	r3, r3, #2
 8008958:	3302      	adds	r3, #2
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008960:	4b3a      	ldr	r3, [pc, #232]	; (8008a4c <HAL_GPIO_Init+0x318>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	43db      	mvns	r3, r3
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	4013      	ands	r3, r2
 800896e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	4313      	orrs	r3, r2
 8008982:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8008984:	4a31      	ldr	r2, [pc, #196]	; (8008a4c <HAL_GPIO_Init+0x318>)
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800898a:	4b30      	ldr	r3, [pc, #192]	; (8008a4c <HAL_GPIO_Init+0x318>)
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	43db      	mvns	r3, r3
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	4013      	ands	r3, r2
 8008998:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d003      	beq.n	80089ae <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80089a6:	693a      	ldr	r2, [r7, #16]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80089ae:	4a27      	ldr	r2, [pc, #156]	; (8008a4c <HAL_GPIO_Init+0x318>)
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80089b4:	4b25      	ldr	r3, [pc, #148]	; (8008a4c <HAL_GPIO_Init+0x318>)
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	43db      	mvns	r3, r3
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	4013      	ands	r3, r2
 80089c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d003      	beq.n	80089d8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80089d8:	4a1c      	ldr	r2, [pc, #112]	; (8008a4c <HAL_GPIO_Init+0x318>)
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80089de:	4b1b      	ldr	r3, [pc, #108]	; (8008a4c <HAL_GPIO_Init+0x318>)
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	43db      	mvns	r3, r3
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	4013      	ands	r3, r2
 80089ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <HAL_GPIO_Init+0x2ce>
        {
          temp |= iocurrent;
 80089fa:	693a      	ldr	r2, [r7, #16]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8008a02:	4a12      	ldr	r2, [pc, #72]	; (8008a4c <HAL_GPIO_Init+0x318>)
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	fa22 f303 	lsr.w	r3, r2, r3
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f47f ae97 	bne.w	800874c <HAL_GPIO_Init+0x18>
  }
}
 8008a1e:	bf00      	nop
 8008a20:	371c      	adds	r7, #28
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	40021000 	.word	0x40021000
 8008a30:	40010000 	.word	0x40010000
 8008a34:	48000400 	.word	0x48000400
 8008a38:	48000800 	.word	0x48000800
 8008a3c:	48000c00 	.word	0x48000c00
 8008a40:	48001000 	.word	0x48001000
 8008a44:	48001400 	.word	0x48001400
 8008a48:	48001800 	.word	0x48001800
 8008a4c:	40010400 	.word	0x40010400

08008a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	460b      	mov	r3, r1
 8008a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	691a      	ldr	r2, [r3, #16]
 8008a60:	887b      	ldrh	r3, [r7, #2]
 8008a62:	4013      	ands	r3, r2
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d002      	beq.n	8008a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	73fb      	strb	r3, [r7, #15]
 8008a6c:	e001      	b.n	8008a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	807b      	strh	r3, [r7, #2]
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008a90:	787b      	ldrb	r3, [r7, #1]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d003      	beq.n	8008a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008a96:	887a      	ldrh	r2, [r7, #2]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008a9c:	e002      	b.n	8008aa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008a9e:	887a      	ldrh	r2, [r7, #2]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008aa4:	bf00      	nop
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008aba:	4b08      	ldr	r3, [pc, #32]	; (8008adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008abc:	695a      	ldr	r2, [r3, #20]
 8008abe:	88fb      	ldrh	r3, [r7, #6]
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d006      	beq.n	8008ad4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008ac6:	4a05      	ldr	r2, [pc, #20]	; (8008adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008ac8:	88fb      	ldrh	r3, [r7, #6]
 8008aca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008acc:	88fb      	ldrh	r3, [r7, #6]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 f806 	bl	8008ae0 <HAL_GPIO_EXTI_Callback>
  }
}
 8008ad4:	bf00      	nop
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	40010400 	.word	0x40010400

08008ae0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008aea:	bf00      	nop
 8008aec:	370c      	adds	r7, #12
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
	...

08008af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	1d3b      	adds	r3, r7, #4
 8008b02:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b04:	1d3b      	adds	r3, r7, #4
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d102      	bne.n	8008b12 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	f000 beda 	b.w	80098c6 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b12:	1d3b      	adds	r3, r7, #4
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f000 8164 	beq.w	8008dea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008b22:	4bb0      	ldr	r3, [pc, #704]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f003 030c 	and.w	r3, r3, #12
 8008b2a:	2b04      	cmp	r3, #4
 8008b2c:	d00c      	beq.n	8008b48 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008b2e:	4bad      	ldr	r3, [pc, #692]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	f003 030c 	and.w	r3, r3, #12
 8008b36:	2b08      	cmp	r3, #8
 8008b38:	d15a      	bne.n	8008bf0 <HAL_RCC_OscConfig+0xf8>
 8008b3a:	4baa      	ldr	r3, [pc, #680]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b46:	d153      	bne.n	8008bf0 <HAL_RCC_OscConfig+0xf8>
 8008b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b4c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b50:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008b54:	fa93 f3a3 	rbit	r3, r3
 8008b58:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8008b5c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b60:	fab3 f383 	clz	r3, r3
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	095b      	lsrs	r3, r3, #5
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	f043 0301 	orr.w	r3, r3, #1
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d102      	bne.n	8008b7a <HAL_RCC_OscConfig+0x82>
 8008b74:	4b9b      	ldr	r3, [pc, #620]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	e015      	b.n	8008ba6 <HAL_RCC_OscConfig+0xae>
 8008b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b7e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b82:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8008b86:	fa93 f3a3 	rbit	r3, r3
 8008b8a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8008b8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b92:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008b96:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8008b9a:	fa93 f3a3 	rbit	r3, r3
 8008b9e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8008ba2:	4b90      	ldr	r3, [pc, #576]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008baa:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8008bae:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8008bb2:	fa92 f2a2 	rbit	r2, r2
 8008bb6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8008bba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8008bbe:	fab2 f282 	clz	r2, r2
 8008bc2:	b252      	sxtb	r2, r2
 8008bc4:	f042 0220 	orr.w	r2, r2, #32
 8008bc8:	b252      	sxtb	r2, r2
 8008bca:	b2d2      	uxtb	r2, r2
 8008bcc:	f002 021f 	and.w	r2, r2, #31
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 8105 	beq.w	8008de8 <HAL_RCC_OscConfig+0x2f0>
 8008bde:	1d3b      	adds	r3, r7, #4
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f040 80ff 	bne.w	8008de8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	f000 be6b 	b.w	80098c6 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bf0:	1d3b      	adds	r3, r7, #4
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bfa:	d106      	bne.n	8008c0a <HAL_RCC_OscConfig+0x112>
 8008bfc:	4b79      	ldr	r3, [pc, #484]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a78      	ldr	r2, [pc, #480]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c06:	6013      	str	r3, [r2, #0]
 8008c08:	e030      	b.n	8008c6c <HAL_RCC_OscConfig+0x174>
 8008c0a:	1d3b      	adds	r3, r7, #4
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10c      	bne.n	8008c2e <HAL_RCC_OscConfig+0x136>
 8008c14:	4b73      	ldr	r3, [pc, #460]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a72      	ldr	r2, [pc, #456]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c1e:	6013      	str	r3, [r2, #0]
 8008c20:	4b70      	ldr	r3, [pc, #448]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a6f      	ldr	r2, [pc, #444]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c2a:	6013      	str	r3, [r2, #0]
 8008c2c:	e01e      	b.n	8008c6c <HAL_RCC_OscConfig+0x174>
 8008c2e:	1d3b      	adds	r3, r7, #4
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c38:	d10c      	bne.n	8008c54 <HAL_RCC_OscConfig+0x15c>
 8008c3a:	4b6a      	ldr	r3, [pc, #424]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a69      	ldr	r2, [pc, #420]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c44:	6013      	str	r3, [r2, #0]
 8008c46:	4b67      	ldr	r3, [pc, #412]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a66      	ldr	r2, [pc, #408]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c50:	6013      	str	r3, [r2, #0]
 8008c52:	e00b      	b.n	8008c6c <HAL_RCC_OscConfig+0x174>
 8008c54:	4b63      	ldr	r3, [pc, #396]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a62      	ldr	r2, [pc, #392]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c5e:	6013      	str	r3, [r2, #0]
 8008c60:	4b60      	ldr	r3, [pc, #384]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a5f      	ldr	r2, [pc, #380]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c6a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c6c:	1d3b      	adds	r3, r7, #4
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d05a      	beq.n	8008d2c <HAL_RCC_OscConfig+0x234>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c76:	f7ff fb65 	bl	8008344 <HAL_GetTick>
 8008c7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c7e:	e00a      	b.n	8008c96 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c80:	f7ff fb60 	bl	8008344 <HAL_GetTick>
 8008c84:	4602      	mov	r2, r0
 8008c86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	2b64      	cmp	r3, #100	; 0x64
 8008c8e:	d902      	bls.n	8008c96 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008c90:	2303      	movs	r3, #3
 8008c92:	f000 be18 	b.w	80098c6 <HAL_RCC_OscConfig+0xdce>
 8008c96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c9a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c9e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008ca2:	fa93 f3a3 	rbit	r3, r3
 8008ca6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8008caa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cae:	fab3 f383 	clz	r3, r3
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	095b      	lsrs	r3, r3, #5
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	f043 0301 	orr.w	r3, r3, #1
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d102      	bne.n	8008cc8 <HAL_RCC_OscConfig+0x1d0>
 8008cc2:	4b48      	ldr	r3, [pc, #288]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	e015      	b.n	8008cf4 <HAL_RCC_OscConfig+0x1fc>
 8008cc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ccc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cd0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8008cd4:	fa93 f3a3 	rbit	r3, r3
 8008cd8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8008cdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ce0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8008ce4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8008ce8:	fa93 f3a3 	rbit	r3, r3
 8008cec:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8008cf0:	4b3c      	ldr	r3, [pc, #240]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008cf8:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8008cfc:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8008d00:	fa92 f2a2 	rbit	r2, r2
 8008d04:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8008d08:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8008d0c:	fab2 f282 	clz	r2, r2
 8008d10:	b252      	sxtb	r2, r2
 8008d12:	f042 0220 	orr.w	r2, r2, #32
 8008d16:	b252      	sxtb	r2, r2
 8008d18:	b2d2      	uxtb	r2, r2
 8008d1a:	f002 021f 	and.w	r2, r2, #31
 8008d1e:	2101      	movs	r1, #1
 8008d20:	fa01 f202 	lsl.w	r2, r1, r2
 8008d24:	4013      	ands	r3, r2
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d0aa      	beq.n	8008c80 <HAL_RCC_OscConfig+0x188>
 8008d2a:	e05e      	b.n	8008dea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d2c:	f7ff fb0a 	bl	8008344 <HAL_GetTick>
 8008d30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d34:	e00a      	b.n	8008d4c <HAL_RCC_OscConfig+0x254>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d36:	f7ff fb05 	bl	8008344 <HAL_GetTick>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	2b64      	cmp	r3, #100	; 0x64
 8008d44:	d902      	bls.n	8008d4c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	f000 bdbd 	b.w	80098c6 <HAL_RCC_OscConfig+0xdce>
 8008d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d50:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8008d58:	fa93 f3a3 	rbit	r3, r3
 8008d5c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8008d60:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d64:	fab3 f383 	clz	r3, r3
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	095b      	lsrs	r3, r3, #5
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	f043 0301 	orr.w	r3, r3, #1
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d102      	bne.n	8008d7e <HAL_RCC_OscConfig+0x286>
 8008d78:	4b1a      	ldr	r3, [pc, #104]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	e015      	b.n	8008daa <HAL_RCC_OscConfig+0x2b2>
 8008d7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d82:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d86:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8008d8a:	fa93 f3a3 	rbit	r3, r3
 8008d8e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8008d92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d96:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8008d9a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8008d9e:	fa93 f3a3 	rbit	r3, r3
 8008da2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8008da6:	4b0f      	ldr	r3, [pc, #60]	; (8008de4 <HAL_RCC_OscConfig+0x2ec>)
 8008da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008daa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008dae:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8008db2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8008db6:	fa92 f2a2 	rbit	r2, r2
 8008dba:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8008dbe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8008dc2:	fab2 f282 	clz	r2, r2
 8008dc6:	b252      	sxtb	r2, r2
 8008dc8:	f042 0220 	orr.w	r2, r2, #32
 8008dcc:	b252      	sxtb	r2, r2
 8008dce:	b2d2      	uxtb	r2, r2
 8008dd0:	f002 021f 	and.w	r2, r2, #31
 8008dd4:	2101      	movs	r1, #1
 8008dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8008dda:	4013      	ands	r3, r2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1aa      	bne.n	8008d36 <HAL_RCC_OscConfig+0x23e>
 8008de0:	e003      	b.n	8008dea <HAL_RCC_OscConfig+0x2f2>
 8008de2:	bf00      	nop
 8008de4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008dea:	1d3b      	adds	r3, r7, #4
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0302 	and.w	r3, r3, #2
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 8171 	beq.w	80090dc <HAL_RCC_OscConfig+0x5e4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8008dfa:	4bd0      	ldr	r3, [pc, #832]	; (800913c <HAL_RCC_OscConfig+0x644>)
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f003 030c 	and.w	r3, r3, #12
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00c      	beq.n	8008e20 <HAL_RCC_OscConfig+0x328>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008e06:	4bcd      	ldr	r3, [pc, #820]	; (800913c <HAL_RCC_OscConfig+0x644>)
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f003 030c 	and.w	r3, r3, #12
 8008e0e:	2b08      	cmp	r3, #8
 8008e10:	d16e      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x3f8>
 8008e12:	4bca      	ldr	r3, [pc, #808]	; (800913c <HAL_RCC_OscConfig+0x644>)
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e1e:	d167      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x3f8>
 8008e20:	2302      	movs	r3, #2
 8008e22:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e26:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008e2a:	fa93 f3a3 	rbit	r3, r3
 8008e2e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8008e32:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e36:	fab3 f383 	clz	r3, r3
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	095b      	lsrs	r3, r3, #5
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	f043 0301 	orr.w	r3, r3, #1
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d102      	bne.n	8008e50 <HAL_RCC_OscConfig+0x358>
 8008e4a:	4bbc      	ldr	r3, [pc, #752]	; (800913c <HAL_RCC_OscConfig+0x644>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	e013      	b.n	8008e78 <HAL_RCC_OscConfig+0x380>
 8008e50:	2302      	movs	r3, #2
 8008e52:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e56:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008e5a:	fa93 f3a3 	rbit	r3, r3
 8008e5e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8008e62:	2302      	movs	r3, #2
 8008e64:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8008e68:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8008e6c:	fa93 f3a3 	rbit	r3, r3
 8008e70:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8008e74:	4bb1      	ldr	r3, [pc, #708]	; (800913c <HAL_RCC_OscConfig+0x644>)
 8008e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e78:	2202      	movs	r2, #2
 8008e7a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8008e7e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8008e82:	fa92 f2a2 	rbit	r2, r2
 8008e86:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8008e8a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8008e8e:	fab2 f282 	clz	r2, r2
 8008e92:	b252      	sxtb	r2, r2
 8008e94:	f042 0220 	orr.w	r2, r2, #32
 8008e98:	b252      	sxtb	r2, r2
 8008e9a:	b2d2      	uxtb	r2, r2
 8008e9c:	f002 021f 	and.w	r2, r2, #31
 8008ea0:	2101      	movs	r1, #1
 8008ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d007      	beq.n	8008ebc <HAL_RCC_OscConfig+0x3c4>
 8008eac:	1d3b      	adds	r3, r7, #4
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d002      	beq.n	8008ebc <HAL_RCC_OscConfig+0x3c4>
      {
        return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	f000 bd05 	b.w	80098c6 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ebc:	4b9f      	ldr	r3, [pc, #636]	; (800913c <HAL_RCC_OscConfig+0x644>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ec4:	1d3b      	adds	r3, r7, #4
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6919      	ldr	r1, [r3, #16]
 8008eca:	23f8      	movs	r3, #248	; 0xf8
 8008ecc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ed0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8008ed4:	fa93 f3a3 	rbit	r3, r3
 8008ed8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8008edc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8008ee0:	fab3 f383 	clz	r3, r3
 8008ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee8:	4994      	ldr	r1, [pc, #592]	; (800913c <HAL_RCC_OscConfig+0x644>)
 8008eea:	4313      	orrs	r3, r2
 8008eec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008eee:	e0f5      	b.n	80090dc <HAL_RCC_OscConfig+0x5e4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008ef0:	1d3b      	adds	r3, r7, #4
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f000 8085 	beq.w	8009006 <HAL_RCC_OscConfig+0x50e>
 8008efc:	2301      	movs	r3, #1
 8008efe:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f02:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008f06:	fa93 f3a3 	rbit	r3, r3
 8008f0a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8008f0e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f12:	fab3 f383 	clz	r3, r3
 8008f16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008f1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	461a      	mov	r2, r3
 8008f22:	2301      	movs	r3, #1
 8008f24:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f26:	f7ff fa0d 	bl	8008344 <HAL_GetTick>
 8008f2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f2e:	e00a      	b.n	8008f46 <HAL_RCC_OscConfig+0x44e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f30:	f7ff fa08 	bl	8008344 <HAL_GetTick>
 8008f34:	4602      	mov	r2, r0
 8008f36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d902      	bls.n	8008f46 <HAL_RCC_OscConfig+0x44e>
          {
            return HAL_TIMEOUT;
 8008f40:	2303      	movs	r3, #3
 8008f42:	f000 bcc0 	b.w	80098c6 <HAL_RCC_OscConfig+0xdce>
 8008f46:	2302      	movs	r3, #2
 8008f48:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f4c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008f50:	fa93 f3a3 	rbit	r3, r3
 8008f54:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8008f58:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f5c:	fab3 f383 	clz	r3, r3
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	095b      	lsrs	r3, r3, #5
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	f043 0301 	orr.w	r3, r3, #1
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d102      	bne.n	8008f76 <HAL_RCC_OscConfig+0x47e>
 8008f70:	4b72      	ldr	r3, [pc, #456]	; (800913c <HAL_RCC_OscConfig+0x644>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	e013      	b.n	8008f9e <HAL_RCC_OscConfig+0x4a6>
 8008f76:	2302      	movs	r3, #2
 8008f78:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f7c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008f80:	fa93 f3a3 	rbit	r3, r3
 8008f84:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8008f88:	2302      	movs	r3, #2
 8008f8a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8008f8e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008f92:	fa93 f3a3 	rbit	r3, r3
 8008f96:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008f9a:	4b68      	ldr	r3, [pc, #416]	; (800913c <HAL_RCC_OscConfig+0x644>)
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008fa4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008fa8:	fa92 f2a2 	rbit	r2, r2
 8008fac:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8008fb0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008fb4:	fab2 f282 	clz	r2, r2
 8008fb8:	b252      	sxtb	r2, r2
 8008fba:	f042 0220 	orr.w	r2, r2, #32
 8008fbe:	b252      	sxtb	r2, r2
 8008fc0:	b2d2      	uxtb	r2, r2
 8008fc2:	f002 021f 	and.w	r2, r2, #31
 8008fc6:	2101      	movs	r1, #1
 8008fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8008fcc:	4013      	ands	r3, r2
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d0ae      	beq.n	8008f30 <HAL_RCC_OscConfig+0x438>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fd2:	4b5a      	ldr	r3, [pc, #360]	; (800913c <HAL_RCC_OscConfig+0x644>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008fda:	1d3b      	adds	r3, r7, #4
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	6919      	ldr	r1, [r3, #16]
 8008fe0:	23f8      	movs	r3, #248	; 0xf8
 8008fe2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fe6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008fea:	fa93 f3a3 	rbit	r3, r3
 8008fee:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8008ff2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008ff6:	fab3 f383 	clz	r3, r3
 8008ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8008ffe:	494f      	ldr	r1, [pc, #316]	; (800913c <HAL_RCC_OscConfig+0x644>)
 8009000:	4313      	orrs	r3, r2
 8009002:	600b      	str	r3, [r1, #0]
 8009004:	e06a      	b.n	80090dc <HAL_RCC_OscConfig+0x5e4>
 8009006:	2301      	movs	r3, #1
 8009008:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800900c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009010:	fa93 f3a3 	rbit	r3, r3
 8009014:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8009018:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800901c:	fab3 f383 	clz	r3, r3
 8009020:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009024:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	461a      	mov	r2, r3
 800902c:	2300      	movs	r3, #0
 800902e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009030:	f7ff f988 	bl	8008344 <HAL_GetTick>
 8009034:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009038:	e00a      	b.n	8009050 <HAL_RCC_OscConfig+0x558>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800903a:	f7ff f983 	bl	8008344 <HAL_GetTick>
 800903e:	4602      	mov	r2, r0
 8009040:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	2b02      	cmp	r3, #2
 8009048:	d902      	bls.n	8009050 <HAL_RCC_OscConfig+0x558>
          {
            return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	f000 bc3b 	b.w	80098c6 <HAL_RCC_OscConfig+0xdce>
 8009050:	2302      	movs	r3, #2
 8009052:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009056:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800905a:	fa93 f3a3 	rbit	r3, r3
 800905e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8009062:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009066:	fab3 f383 	clz	r3, r3
 800906a:	b2db      	uxtb	r3, r3
 800906c:	095b      	lsrs	r3, r3, #5
 800906e:	b2db      	uxtb	r3, r3
 8009070:	f043 0301 	orr.w	r3, r3, #1
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b01      	cmp	r3, #1
 8009078:	d102      	bne.n	8009080 <HAL_RCC_OscConfig+0x588>
 800907a:	4b30      	ldr	r3, [pc, #192]	; (800913c <HAL_RCC_OscConfig+0x644>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	e013      	b.n	80090a8 <HAL_RCC_OscConfig+0x5b0>
 8009080:	2302      	movs	r3, #2
 8009082:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800908a:	fa93 f3a3 	rbit	r3, r3
 800908e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009092:	2302      	movs	r3, #2
 8009094:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009098:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800909c:	fa93 f3a3 	rbit	r3, r3
 80090a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80090a4:	4b25      	ldr	r3, [pc, #148]	; (800913c <HAL_RCC_OscConfig+0x644>)
 80090a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a8:	2202      	movs	r2, #2
 80090aa:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80090ae:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80090b2:	fa92 f2a2 	rbit	r2, r2
 80090b6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 80090ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80090be:	fab2 f282 	clz	r2, r2
 80090c2:	b252      	sxtb	r2, r2
 80090c4:	f042 0220 	orr.w	r2, r2, #32
 80090c8:	b252      	sxtb	r2, r2
 80090ca:	b2d2      	uxtb	r2, r2
 80090cc:	f002 021f 	and.w	r2, r2, #31
 80090d0:	2101      	movs	r1, #1
 80090d2:	fa01 f202 	lsl.w	r2, r1, r2
 80090d6:	4013      	ands	r3, r2
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1ae      	bne.n	800903a <HAL_RCC_OscConfig+0x542>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090dc:	1d3b      	adds	r3, r7, #4
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0308 	and.w	r3, r3, #8
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f000 80d7 	beq.w	800929a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80090ec:	1d3b      	adds	r3, r7, #4
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d066      	beq.n	80091c4 <HAL_RCC_OscConfig+0x6cc>
 80090f6:	2301      	movs	r3, #1
 80090f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009100:	fa93 f3a3 	rbit	r3, r3
 8009104:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8009108:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800910c:	fab3 f383 	clz	r3, r3
 8009110:	461a      	mov	r2, r3
 8009112:	4b0b      	ldr	r3, [pc, #44]	; (8009140 <HAL_RCC_OscConfig+0x648>)
 8009114:	4413      	add	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	461a      	mov	r2, r3
 800911a:	2301      	movs	r3, #1
 800911c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800911e:	f7ff f911 	bl	8008344 <HAL_GetTick>
 8009122:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009126:	e00d      	b.n	8009144 <HAL_RCC_OscConfig+0x64c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009128:	f7ff f90c 	bl	8008344 <HAL_GetTick>
 800912c:	4602      	mov	r2, r0
 800912e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	2b02      	cmp	r3, #2
 8009136:	d905      	bls.n	8009144 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_TIMEOUT;
 8009138:	2303      	movs	r3, #3
 800913a:	e3c4      	b.n	80098c6 <HAL_RCC_OscConfig+0xdce>
 800913c:	40021000 	.word	0x40021000
 8009140:	10908120 	.word	0x10908120
 8009144:	2302      	movs	r3, #2
 8009146:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800914a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800914e:	fa93 f3a3 	rbit	r3, r3
 8009152:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009156:	2302      	movs	r3, #2
 8009158:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800915c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009160:	fa93 f2a3 	rbit	r2, r3
 8009164:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009168:	601a      	str	r2, [r3, #0]
 800916a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800916e:	2202      	movs	r2, #2
 8009170:	601a      	str	r2, [r3, #0]
 8009172:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	fa93 f2a3 	rbit	r2, r3
 800917c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8009180:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009182:	4ba5      	ldr	r3, [pc, #660]	; (8009418 <HAL_RCC_OscConfig+0x920>)
 8009184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009186:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800918a:	2102      	movs	r1, #2
 800918c:	6019      	str	r1, [r3, #0]
 800918e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	fa93 f1a3 	rbit	r1, r3
 8009198:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800919c:	6019      	str	r1, [r3, #0]
  return(result);
 800919e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	fab3 f383 	clz	r3, r3
 80091a8:	b25b      	sxtb	r3, r3
 80091aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80091ae:	b25b      	sxtb	r3, r3
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	f003 031f 	and.w	r3, r3, #31
 80091b6:	2101      	movs	r1, #1
 80091b8:	fa01 f303 	lsl.w	r3, r1, r3
 80091bc:	4013      	ands	r3, r2
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d0b2      	beq.n	8009128 <HAL_RCC_OscConfig+0x630>
 80091c2:	e06a      	b.n	800929a <HAL_RCC_OscConfig+0x7a2>
 80091c4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80091c8:	2201      	movs	r2, #1
 80091ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091cc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	fa93 f2a3 	rbit	r2, r3
 80091d6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80091da:	601a      	str	r2, [r3, #0]
  return(result);
 80091dc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80091e0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091e2:	fab3 f383 	clz	r3, r3
 80091e6:	461a      	mov	r2, r3
 80091e8:	4b8c      	ldr	r3, [pc, #560]	; (800941c <HAL_RCC_OscConfig+0x924>)
 80091ea:	4413      	add	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	461a      	mov	r2, r3
 80091f0:	2300      	movs	r3, #0
 80091f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091f4:	f7ff f8a6 	bl	8008344 <HAL_GetTick>
 80091f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091fc:	e009      	b.n	8009212 <HAL_RCC_OscConfig+0x71a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091fe:	f7ff f8a1 	bl	8008344 <HAL_GetTick>
 8009202:	4602      	mov	r2, r0
 8009204:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	2b02      	cmp	r3, #2
 800920c:	d901      	bls.n	8009212 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800920e:	2303      	movs	r3, #3
 8009210:	e359      	b.n	80098c6 <HAL_RCC_OscConfig+0xdce>
 8009212:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8009216:	2202      	movs	r2, #2
 8009218:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800921a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	fa93 f2a3 	rbit	r2, r3
 8009224:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8009228:	601a      	str	r2, [r3, #0]
 800922a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800922e:	2202      	movs	r2, #2
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	fa93 f2a3 	rbit	r2, r3
 800923c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8009240:	601a      	str	r2, [r3, #0]
 8009242:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009246:	2202      	movs	r2, #2
 8009248:	601a      	str	r2, [r3, #0]
 800924a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	fa93 f2a3 	rbit	r2, r3
 8009254:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8009258:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800925a:	4b6f      	ldr	r3, [pc, #444]	; (8009418 <HAL_RCC_OscConfig+0x920>)
 800925c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800925e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8009262:	2102      	movs	r1, #2
 8009264:	6019      	str	r1, [r3, #0]
 8009266:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	fa93 f1a3 	rbit	r1, r3
 8009270:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8009274:	6019      	str	r1, [r3, #0]
  return(result);
 8009276:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	fab3 f383 	clz	r3, r3
 8009280:	b25b      	sxtb	r3, r3
 8009282:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009286:	b25b      	sxtb	r3, r3
 8009288:	b2db      	uxtb	r3, r3
 800928a:	f003 031f 	and.w	r3, r3, #31
 800928e:	2101      	movs	r1, #1
 8009290:	fa01 f303 	lsl.w	r3, r1, r3
 8009294:	4013      	ands	r3, r2
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1b1      	bne.n	80091fe <HAL_RCC_OscConfig+0x706>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800929a:	1d3b      	adds	r3, r7, #4
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0304 	and.w	r3, r3, #4
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 8159 	beq.w	800955c <HAL_RCC_OscConfig+0xa64>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092aa:	2300      	movs	r3, #0
 80092ac:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80092b0:	4b59      	ldr	r3, [pc, #356]	; (8009418 <HAL_RCC_OscConfig+0x920>)
 80092b2:	69db      	ldr	r3, [r3, #28]
 80092b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d112      	bne.n	80092e2 <HAL_RCC_OscConfig+0x7ea>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092bc:	4b56      	ldr	r3, [pc, #344]	; (8009418 <HAL_RCC_OscConfig+0x920>)
 80092be:	69db      	ldr	r3, [r3, #28]
 80092c0:	4a55      	ldr	r2, [pc, #340]	; (8009418 <HAL_RCC_OscConfig+0x920>)
 80092c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092c6:	61d3      	str	r3, [r2, #28]
 80092c8:	4b53      	ldr	r3, [pc, #332]	; (8009418 <HAL_RCC_OscConfig+0x920>)
 80092ca:	69db      	ldr	r3, [r3, #28]
 80092cc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80092d0:	f107 030c 	add.w	r3, r7, #12
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	f107 030c 	add.w	r3, r7, #12
 80092da:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80092dc:	2301      	movs	r3, #1
 80092de:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092e2:	4b4f      	ldr	r3, [pc, #316]	; (8009420 <HAL_RCC_OscConfig+0x928>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d11a      	bne.n	8009324 <HAL_RCC_OscConfig+0x82c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80092ee:	4b4c      	ldr	r3, [pc, #304]	; (8009420 <HAL_RCC_OscConfig+0x928>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a4b      	ldr	r2, [pc, #300]	; (8009420 <HAL_RCC_OscConfig+0x928>)
 80092f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80092fa:	f7ff f823 	bl	8008344 <HAL_GetTick>
 80092fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009302:	e009      	b.n	8009318 <HAL_RCC_OscConfig+0x820>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009304:	f7ff f81e 	bl	8008344 <HAL_GetTick>
 8009308:	4602      	mov	r2, r0
 800930a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	2b64      	cmp	r3, #100	; 0x64
 8009312:	d901      	bls.n	8009318 <HAL_RCC_OscConfig+0x820>
        {
          return HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	e2d6      	b.n	80098c6 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009318:	4b41      	ldr	r3, [pc, #260]	; (8009420 <HAL_RCC_OscConfig+0x928>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009320:	2b00      	cmp	r3, #0
 8009322:	d0ef      	beq.n	8009304 <HAL_RCC_OscConfig+0x80c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009324:	1d3b      	adds	r3, r7, #4
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d106      	bne.n	800933c <HAL_RCC_OscConfig+0x844>
 800932e:	4b3a      	ldr	r3, [pc, #232]	; (8009418 <HAL_RCC_OscConfig+0x920>)
 8009330:	6a1b      	ldr	r3, [r3, #32]
 8009332:	4a39      	ldr	r2, [pc, #228]	; (8009418 <HAL_RCC_OscConfig+0x920>)
 8009334:	f043 0301 	orr.w	r3, r3, #1
 8009338:	6213      	str	r3, [r2, #32]
 800933a:	e02f      	b.n	800939c <HAL_RCC_OscConfig+0x8a4>
 800933c:	1d3b      	adds	r3, r7, #4
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10c      	bne.n	8009360 <HAL_RCC_OscConfig+0x868>
 8009346:	4b34      	ldr	r3, [pc, #208]	; (8009418 <HAL_RCC_OscConfig+0x920>)
 8009348:	6a1b      	ldr	r3, [r3, #32]
 800934a:	4a33      	ldr	r2, [pc, #204]	; (8009418 <HAL_RCC_OscConfig+0x920>)
 800934c:	f023 0301 	bic.w	r3, r3, #1
 8009350:	6213      	str	r3, [r2, #32]
 8009352:	4b31      	ldr	r3, [pc, #196]	; (8009418 <HAL_RCC_OscConfig+0x920>)
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	4a30      	ldr	r2, [pc, #192]	; (8009418 <HAL_RCC_OscConfig+0x920>)
 8009358:	f023 0304 	bic.w	r3, r3, #4
 800935c:	6213      	str	r3, [r2, #32]
 800935e:	e01d      	b.n	800939c <HAL_RCC_OscConfig+0x8a4>
 8009360:	1d3b      	adds	r3, r7, #4
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	2b05      	cmp	r3, #5
 8009368:	d10c      	bne.n	8009384 <HAL_RCC_OscConfig+0x88c>
 800936a:	4b2b      	ldr	r3, [pc, #172]	; (8009418 <HAL_RCC_OscConfig+0x920>)
 800936c:	6a1b      	ldr	r3, [r3, #32]
 800936e:	4a2a      	ldr	r2, [pc, #168]	; (8009418 <HAL_RCC_OscConfig+0x920>)
 8009370:	f043 0304 	orr.w	r3, r3, #4
 8009374:	6213      	str	r3, [r2, #32]
 8009376:	4b28      	ldr	r3, [pc, #160]	; (8009418 <HAL_RCC_OscConfig+0x920>)
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	4a27      	ldr	r2, [pc, #156]	; (8009418 <HAL_RCC_OscConfig+0x920>)
 800937c:	f043 0301 	orr.w	r3, r3, #1
 8009380:	6213      	str	r3, [r2, #32]
 8009382:	e00b      	b.n	800939c <HAL_RCC_OscConfig+0x8a4>
 8009384:	4b24      	ldr	r3, [pc, #144]	; (8009418 <HAL_RCC_OscConfig+0x920>)
 8009386:	6a1b      	ldr	r3, [r3, #32]
 8009388:	4a23      	ldr	r2, [pc, #140]	; (8009418 <HAL_RCC_OscConfig+0x920>)
 800938a:	f023 0301 	bic.w	r3, r3, #1
 800938e:	6213      	str	r3, [r2, #32]
 8009390:	4b21      	ldr	r3, [pc, #132]	; (8009418 <HAL_RCC_OscConfig+0x920>)
 8009392:	6a1b      	ldr	r3, [r3, #32]
 8009394:	4a20      	ldr	r2, [pc, #128]	; (8009418 <HAL_RCC_OscConfig+0x920>)
 8009396:	f023 0304 	bic.w	r3, r3, #4
 800939a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800939c:	1d3b      	adds	r3, r7, #4
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d06b      	beq.n	800947e <HAL_RCC_OscConfig+0x986>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093a6:	f7fe ffcd 	bl	8008344 <HAL_GetTick>
 80093aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093ae:	e00b      	b.n	80093c8 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80093b0:	f7fe ffc8 	bl	8008344 <HAL_GetTick>
 80093b4:	4602      	mov	r2, r0
 80093b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d901      	bls.n	80093c8 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e27e      	b.n	80098c6 <HAL_RCC_OscConfig+0xdce>
 80093c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80093cc:	2202      	movs	r2, #2
 80093ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	fa93 f2a3 	rbit	r2, r3
 80093da:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80093de:	601a      	str	r2, [r3, #0]
 80093e0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80093e4:	2202      	movs	r2, #2
 80093e6:	601a      	str	r2, [r3, #0]
 80093e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	fa93 f2a3 	rbit	r2, r3
 80093f2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80093f6:	601a      	str	r2, [r3, #0]
  return(result);
 80093f8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80093fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093fe:	fab3 f383 	clz	r3, r3
 8009402:	b2db      	uxtb	r3, r3
 8009404:	095b      	lsrs	r3, r3, #5
 8009406:	b2db      	uxtb	r3, r3
 8009408:	f043 0302 	orr.w	r3, r3, #2
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b02      	cmp	r3, #2
 8009410:	d108      	bne.n	8009424 <HAL_RCC_OscConfig+0x92c>
 8009412:	4b01      	ldr	r3, [pc, #4]	; (8009418 <HAL_RCC_OscConfig+0x920>)
 8009414:	6a1b      	ldr	r3, [r3, #32]
 8009416:	e013      	b.n	8009440 <HAL_RCC_OscConfig+0x948>
 8009418:	40021000 	.word	0x40021000
 800941c:	10908120 	.word	0x10908120
 8009420:	40007000 	.word	0x40007000
 8009424:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8009428:	2202      	movs	r2, #2
 800942a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800942c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	fa93 f2a3 	rbit	r2, r3
 8009436:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800943a:	601a      	str	r2, [r3, #0]
 800943c:	4bc0      	ldr	r3, [pc, #768]	; (8009740 <HAL_RCC_OscConfig+0xc48>)
 800943e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009440:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8009444:	2102      	movs	r1, #2
 8009446:	6011      	str	r1, [r2, #0]
 8009448:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800944c:	6812      	ldr	r2, [r2, #0]
 800944e:	fa92 f1a2 	rbit	r1, r2
 8009452:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8009456:	6011      	str	r1, [r2, #0]
  return(result);
 8009458:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800945c:	6812      	ldr	r2, [r2, #0]
 800945e:	fab2 f282 	clz	r2, r2
 8009462:	b252      	sxtb	r2, r2
 8009464:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009468:	b252      	sxtb	r2, r2
 800946a:	b2d2      	uxtb	r2, r2
 800946c:	f002 021f 	and.w	r2, r2, #31
 8009470:	2101      	movs	r1, #1
 8009472:	fa01 f202 	lsl.w	r2, r1, r2
 8009476:	4013      	ands	r3, r2
 8009478:	2b00      	cmp	r3, #0
 800947a:	d099      	beq.n	80093b0 <HAL_RCC_OscConfig+0x8b8>
 800947c:	e064      	b.n	8009548 <HAL_RCC_OscConfig+0xa50>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800947e:	f7fe ff61 	bl	8008344 <HAL_GetTick>
 8009482:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009486:	e00b      	b.n	80094a0 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009488:	f7fe ff5c 	bl	8008344 <HAL_GetTick>
 800948c:	4602      	mov	r2, r0
 800948e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009492:	1ad3      	subs	r3, r2, r3
 8009494:	f241 3288 	movw	r2, #5000	; 0x1388
 8009498:	4293      	cmp	r3, r2
 800949a:	d901      	bls.n	80094a0 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800949c:	2303      	movs	r3, #3
 800949e:	e212      	b.n	80098c6 <HAL_RCC_OscConfig+0xdce>
 80094a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80094a4:	2202      	movs	r2, #2
 80094a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	fa93 f2a3 	rbit	r2, r3
 80094b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80094b6:	601a      	str	r2, [r3, #0]
 80094b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80094bc:	2202      	movs	r2, #2
 80094be:	601a      	str	r2, [r3, #0]
 80094c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	fa93 f2a3 	rbit	r2, r3
 80094ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80094ce:	601a      	str	r2, [r3, #0]
  return(result);
 80094d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80094d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094d6:	fab3 f383 	clz	r3, r3
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	095b      	lsrs	r3, r3, #5
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	f043 0302 	orr.w	r3, r3, #2
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d102      	bne.n	80094f0 <HAL_RCC_OscConfig+0x9f8>
 80094ea:	4b95      	ldr	r3, [pc, #596]	; (8009740 <HAL_RCC_OscConfig+0xc48>)
 80094ec:	6a1b      	ldr	r3, [r3, #32]
 80094ee:	e00d      	b.n	800950c <HAL_RCC_OscConfig+0xa14>
 80094f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80094f4:	2202      	movs	r2, #2
 80094f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	fa93 f2a3 	rbit	r2, r3
 8009502:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	4b8d      	ldr	r3, [pc, #564]	; (8009740 <HAL_RCC_OscConfig+0xc48>)
 800950a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8009510:	2102      	movs	r1, #2
 8009512:	6011      	str	r1, [r2, #0]
 8009514:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8009518:	6812      	ldr	r2, [r2, #0]
 800951a:	fa92 f1a2 	rbit	r1, r2
 800951e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8009522:	6011      	str	r1, [r2, #0]
  return(result);
 8009524:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8009528:	6812      	ldr	r2, [r2, #0]
 800952a:	fab2 f282 	clz	r2, r2
 800952e:	b252      	sxtb	r2, r2
 8009530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009534:	b252      	sxtb	r2, r2
 8009536:	b2d2      	uxtb	r2, r2
 8009538:	f002 021f 	and.w	r2, r2, #31
 800953c:	2101      	movs	r1, #1
 800953e:	fa01 f202 	lsl.w	r2, r1, r2
 8009542:	4013      	ands	r3, r2
 8009544:	2b00      	cmp	r3, #0
 8009546:	d19f      	bne.n	8009488 <HAL_RCC_OscConfig+0x990>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009548:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800954c:	2b01      	cmp	r3, #1
 800954e:	d105      	bne.n	800955c <HAL_RCC_OscConfig+0xa64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009550:	4b7b      	ldr	r3, [pc, #492]	; (8009740 <HAL_RCC_OscConfig+0xc48>)
 8009552:	69db      	ldr	r3, [r3, #28]
 8009554:	4a7a      	ldr	r2, [pc, #488]	; (8009740 <HAL_RCC_OscConfig+0xc48>)
 8009556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800955a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800955c:	1d3b      	adds	r3, r7, #4
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	2b00      	cmp	r3, #0
 8009564:	f000 81ae 	beq.w	80098c4 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009568:	4b75      	ldr	r3, [pc, #468]	; (8009740 <HAL_RCC_OscConfig+0xc48>)
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	f003 030c 	and.w	r3, r3, #12
 8009570:	2b08      	cmp	r3, #8
 8009572:	f000 81a5 	beq.w	80098c0 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009576:	1d3b      	adds	r3, r7, #4
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	2b02      	cmp	r3, #2
 800957e:	f040 811d 	bne.w	80097bc <HAL_RCC_OscConfig+0xcc4>
 8009582:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009586:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800958a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800958c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	fa93 f2a3 	rbit	r2, r3
 8009596:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800959a:	601a      	str	r2, [r3, #0]
  return(result);
 800959c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80095a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095a2:	fab3 f383 	clz	r3, r3
 80095a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80095aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	461a      	mov	r2, r3
 80095b2:	2300      	movs	r3, #0
 80095b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095b6:	f7fe fec5 	bl	8008344 <HAL_GetTick>
 80095ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80095be:	e009      	b.n	80095d4 <HAL_RCC_OscConfig+0xadc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095c0:	f7fe fec0 	bl	8008344 <HAL_GetTick>
 80095c4:	4602      	mov	r2, r0
 80095c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d901      	bls.n	80095d4 <HAL_RCC_OscConfig+0xadc>
          {
            return HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e178      	b.n	80098c6 <HAL_RCC_OscConfig+0xdce>
 80095d4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80095d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80095dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	fa93 f2a3 	rbit	r2, r3
 80095e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80095ec:	601a      	str	r2, [r3, #0]
  return(result);
 80095ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80095f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80095f4:	fab3 f383 	clz	r3, r3
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	095b      	lsrs	r3, r3, #5
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	f043 0301 	orr.w	r3, r3, #1
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b01      	cmp	r3, #1
 8009606:	d102      	bne.n	800960e <HAL_RCC_OscConfig+0xb16>
 8009608:	4b4d      	ldr	r3, [pc, #308]	; (8009740 <HAL_RCC_OscConfig+0xc48>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	e01b      	b.n	8009646 <HAL_RCC_OscConfig+0xb4e>
 800960e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009612:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009618:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	fa93 f2a3 	rbit	r2, r3
 8009622:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009626:	601a      	str	r2, [r3, #0]
 8009628:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800962c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009630:	601a      	str	r2, [r3, #0]
 8009632:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	fa93 f2a3 	rbit	r2, r3
 800963c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009640:	601a      	str	r2, [r3, #0]
 8009642:	4b3f      	ldr	r3, [pc, #252]	; (8009740 <HAL_RCC_OscConfig+0xc48>)
 8009644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009646:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800964a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800964e:	6011      	str	r1, [r2, #0]
 8009650:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8009654:	6812      	ldr	r2, [r2, #0]
 8009656:	fa92 f1a2 	rbit	r1, r2
 800965a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800965e:	6011      	str	r1, [r2, #0]
  return(result);
 8009660:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009664:	6812      	ldr	r2, [r2, #0]
 8009666:	fab2 f282 	clz	r2, r2
 800966a:	b252      	sxtb	r2, r2
 800966c:	f042 0220 	orr.w	r2, r2, #32
 8009670:	b252      	sxtb	r2, r2
 8009672:	b2d2      	uxtb	r2, r2
 8009674:	f002 021f 	and.w	r2, r2, #31
 8009678:	2101      	movs	r1, #1
 800967a:	fa01 f202 	lsl.w	r2, r1, r2
 800967e:	4013      	ands	r3, r2
 8009680:	2b00      	cmp	r3, #0
 8009682:	d19d      	bne.n	80095c0 <HAL_RCC_OscConfig+0xac8>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009684:	4b2e      	ldr	r3, [pc, #184]	; (8009740 <HAL_RCC_OscConfig+0xc48>)
 8009686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009688:	f023 020f 	bic.w	r2, r3, #15
 800968c:	1d3b      	adds	r3, r7, #4
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009692:	492b      	ldr	r1, [pc, #172]	; (8009740 <HAL_RCC_OscConfig+0xc48>)
 8009694:	4313      	orrs	r3, r2
 8009696:	62cb      	str	r3, [r1, #44]	; 0x2c
 8009698:	4b29      	ldr	r3, [pc, #164]	; (8009740 <HAL_RCC_OscConfig+0xc48>)
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80096a0:	1d3b      	adds	r3, r7, #4
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6a19      	ldr	r1, [r3, #32]
 80096a6:	1d3b      	adds	r3, r7, #4
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	69db      	ldr	r3, [r3, #28]
 80096ac:	430b      	orrs	r3, r1
 80096ae:	4924      	ldr	r1, [pc, #144]	; (8009740 <HAL_RCC_OscConfig+0xc48>)
 80096b0:	4313      	orrs	r3, r2
 80096b2:	604b      	str	r3, [r1, #4]
 80096b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80096b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	fa93 f2a3 	rbit	r2, r3
 80096c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80096cc:	601a      	str	r2, [r3, #0]
  return(result);
 80096ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80096d2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80096d4:	fab3 f383 	clz	r3, r3
 80096d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80096dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	461a      	mov	r2, r3
 80096e4:	2301      	movs	r3, #1
 80096e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096e8:	f7fe fe2c 	bl	8008344 <HAL_GetTick>
 80096ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80096f0:	e009      	b.n	8009706 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096f2:	f7fe fe27 	bl	8008344 <HAL_GetTick>
 80096f6:	4602      	mov	r2, r0
 80096f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d901      	bls.n	8009706 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8009702:	2303      	movs	r3, #3
 8009704:	e0df      	b.n	80098c6 <HAL_RCC_OscConfig+0xdce>
 8009706:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800970a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800970e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009710:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	fa93 f2a3 	rbit	r2, r3
 800971a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800971e:	601a      	str	r2, [r3, #0]
  return(result);
 8009720:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009724:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009726:	fab3 f383 	clz	r3, r3
 800972a:	b2db      	uxtb	r3, r3
 800972c:	095b      	lsrs	r3, r3, #5
 800972e:	b2db      	uxtb	r3, r3
 8009730:	f043 0301 	orr.w	r3, r3, #1
 8009734:	b2db      	uxtb	r3, r3
 8009736:	2b01      	cmp	r3, #1
 8009738:	d104      	bne.n	8009744 <HAL_RCC_OscConfig+0xc4c>
 800973a:	4b01      	ldr	r3, [pc, #4]	; (8009740 <HAL_RCC_OscConfig+0xc48>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	e01d      	b.n	800977c <HAL_RCC_OscConfig+0xc84>
 8009740:	40021000 	.word	0x40021000
 8009744:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009748:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800974c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800974e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	fa93 f2a3 	rbit	r2, r3
 8009758:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800975c:	601a      	str	r2, [r3, #0]
 800975e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009762:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009766:	601a      	str	r2, [r3, #0]
 8009768:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	fa93 f2a3 	rbit	r2, r3
 8009772:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009776:	601a      	str	r2, [r3, #0]
 8009778:	4b55      	ldr	r3, [pc, #340]	; (80098d0 <HAL_RCC_OscConfig+0xdd8>)
 800977a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009780:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009784:	6011      	str	r1, [r2, #0]
 8009786:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800978a:	6812      	ldr	r2, [r2, #0]
 800978c:	fa92 f1a2 	rbit	r1, r2
 8009790:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009794:	6011      	str	r1, [r2, #0]
  return(result);
 8009796:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800979a:	6812      	ldr	r2, [r2, #0]
 800979c:	fab2 f282 	clz	r2, r2
 80097a0:	b252      	sxtb	r2, r2
 80097a2:	f042 0220 	orr.w	r2, r2, #32
 80097a6:	b252      	sxtb	r2, r2
 80097a8:	b2d2      	uxtb	r2, r2
 80097aa:	f002 021f 	and.w	r2, r2, #31
 80097ae:	2101      	movs	r1, #1
 80097b0:	fa01 f202 	lsl.w	r2, r1, r2
 80097b4:	4013      	ands	r3, r2
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d09b      	beq.n	80096f2 <HAL_RCC_OscConfig+0xbfa>
 80097ba:	e083      	b.n	80098c4 <HAL_RCC_OscConfig+0xdcc>
 80097bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80097c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80097c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	fa93 f2a3 	rbit	r2, r3
 80097d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80097d4:	601a      	str	r2, [r3, #0]
  return(result);
 80097d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80097da:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097dc:	fab3 f383 	clz	r3, r3
 80097e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80097e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	461a      	mov	r2, r3
 80097ec:	2300      	movs	r3, #0
 80097ee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097f0:	f7fe fda8 	bl	8008344 <HAL_GetTick>
 80097f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80097f8:	e009      	b.n	800980e <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80097fa:	f7fe fda3 	bl	8008344 <HAL_GetTick>
 80097fe:	4602      	mov	r2, r0
 8009800:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	2b02      	cmp	r3, #2
 8009808:	d901      	bls.n	800980e <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 800980a:	2303      	movs	r3, #3
 800980c:	e05b      	b.n	80098c6 <HAL_RCC_OscConfig+0xdce>
 800980e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009812:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009816:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	fa93 f2a3 	rbit	r2, r3
 8009822:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009826:	601a      	str	r2, [r3, #0]
  return(result);
 8009828:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800982c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800982e:	fab3 f383 	clz	r3, r3
 8009832:	b2db      	uxtb	r3, r3
 8009834:	095b      	lsrs	r3, r3, #5
 8009836:	b2db      	uxtb	r3, r3
 8009838:	f043 0301 	orr.w	r3, r3, #1
 800983c:	b2db      	uxtb	r3, r3
 800983e:	2b01      	cmp	r3, #1
 8009840:	d102      	bne.n	8009848 <HAL_RCC_OscConfig+0xd50>
 8009842:	4b23      	ldr	r3, [pc, #140]	; (80098d0 <HAL_RCC_OscConfig+0xdd8>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	e01b      	b.n	8009880 <HAL_RCC_OscConfig+0xd88>
 8009848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800984c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009850:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	fa93 f2a3 	rbit	r2, r3
 800985c:	f107 0320 	add.w	r3, r7, #32
 8009860:	601a      	str	r2, [r3, #0]
 8009862:	f107 031c 	add.w	r3, r7, #28
 8009866:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800986a:	601a      	str	r2, [r3, #0]
 800986c:	f107 031c 	add.w	r3, r7, #28
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	fa93 f2a3 	rbit	r2, r3
 8009876:	f107 0318 	add.w	r3, r7, #24
 800987a:	601a      	str	r2, [r3, #0]
 800987c:	4b14      	ldr	r3, [pc, #80]	; (80098d0 <HAL_RCC_OscConfig+0xdd8>)
 800987e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009880:	f107 0214 	add.w	r2, r7, #20
 8009884:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009888:	6011      	str	r1, [r2, #0]
 800988a:	f107 0214 	add.w	r2, r7, #20
 800988e:	6812      	ldr	r2, [r2, #0]
 8009890:	fa92 f1a2 	rbit	r1, r2
 8009894:	f107 0210 	add.w	r2, r7, #16
 8009898:	6011      	str	r1, [r2, #0]
  return(result);
 800989a:	f107 0210 	add.w	r2, r7, #16
 800989e:	6812      	ldr	r2, [r2, #0]
 80098a0:	fab2 f282 	clz	r2, r2
 80098a4:	b252      	sxtb	r2, r2
 80098a6:	f042 0220 	orr.w	r2, r2, #32
 80098aa:	b252      	sxtb	r2, r2
 80098ac:	b2d2      	uxtb	r2, r2
 80098ae:	f002 021f 	and.w	r2, r2, #31
 80098b2:	2101      	movs	r1, #1
 80098b4:	fa01 f202 	lsl.w	r2, r1, r2
 80098b8:	4013      	ands	r3, r2
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d19d      	bne.n	80097fa <HAL_RCC_OscConfig+0xd02>
 80098be:	e001      	b.n	80098c4 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	e000      	b.n	80098c6 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	40021000 	.word	0x40021000

080098d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b09e      	sub	sp, #120	; 0x78
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80098de:	2300      	movs	r3, #0
 80098e0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d101      	bne.n	80098ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	e164      	b.n	8009bb6 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80098ec:	4b92      	ldr	r3, [pc, #584]	; (8009b38 <HAL_RCC_ClockConfig+0x264>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 0307 	and.w	r3, r3, #7
 80098f4:	683a      	ldr	r2, [r7, #0]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d910      	bls.n	800991c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098fa:	4b8f      	ldr	r3, [pc, #572]	; (8009b38 <HAL_RCC_ClockConfig+0x264>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f023 0207 	bic.w	r2, r3, #7
 8009902:	498d      	ldr	r1, [pc, #564]	; (8009b38 <HAL_RCC_ClockConfig+0x264>)
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	4313      	orrs	r3, r2
 8009908:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800990a:	4b8b      	ldr	r3, [pc, #556]	; (8009b38 <HAL_RCC_ClockConfig+0x264>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 0307 	and.w	r3, r3, #7
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	429a      	cmp	r2, r3
 8009916:	d001      	beq.n	800991c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	e14c      	b.n	8009bb6 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f003 0302 	and.w	r3, r3, #2
 8009924:	2b00      	cmp	r3, #0
 8009926:	d008      	beq.n	800993a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009928:	4b84      	ldr	r3, [pc, #528]	; (8009b3c <HAL_RCC_ClockConfig+0x268>)
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	4981      	ldr	r1, [pc, #516]	; (8009b3c <HAL_RCC_ClockConfig+0x268>)
 8009936:	4313      	orrs	r3, r2
 8009938:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 0301 	and.w	r3, r3, #1
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 80df 	beq.w	8009b06 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d13d      	bne.n	80099cc <HAL_RCC_ClockConfig+0xf8>
 8009950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009954:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009956:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009958:	fa93 f3a3 	rbit	r3, r3
 800995c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800995e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009960:	fab3 f383 	clz	r3, r3
 8009964:	b2db      	uxtb	r3, r3
 8009966:	095b      	lsrs	r3, r3, #5
 8009968:	b2db      	uxtb	r3, r3
 800996a:	f043 0301 	orr.w	r3, r3, #1
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b01      	cmp	r3, #1
 8009972:	d102      	bne.n	800997a <HAL_RCC_ClockConfig+0xa6>
 8009974:	4b71      	ldr	r3, [pc, #452]	; (8009b3c <HAL_RCC_ClockConfig+0x268>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	e00f      	b.n	800999a <HAL_RCC_ClockConfig+0xc6>
 800997a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800997e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009982:	fa93 f3a3 	rbit	r3, r3
 8009986:	667b      	str	r3, [r7, #100]	; 0x64
 8009988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800998c:	663b      	str	r3, [r7, #96]	; 0x60
 800998e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009990:	fa93 f3a3 	rbit	r3, r3
 8009994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009996:	4b69      	ldr	r3, [pc, #420]	; (8009b3c <HAL_RCC_ClockConfig+0x268>)
 8009998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800999e:	65ba      	str	r2, [r7, #88]	; 0x58
 80099a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099a2:	fa92 f2a2 	rbit	r2, r2
 80099a6:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80099a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80099aa:	fab2 f282 	clz	r2, r2
 80099ae:	b252      	sxtb	r2, r2
 80099b0:	f042 0220 	orr.w	r2, r2, #32
 80099b4:	b252      	sxtb	r2, r2
 80099b6:	b2d2      	uxtb	r2, r2
 80099b8:	f002 021f 	and.w	r2, r2, #31
 80099bc:	2101      	movs	r1, #1
 80099be:	fa01 f202 	lsl.w	r2, r1, r2
 80099c2:	4013      	ands	r3, r2
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d17d      	bne.n	8009ac4 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e0f4      	b.n	8009bb6 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	d13d      	bne.n	8009a50 <HAL_RCC_ClockConfig+0x17c>
 80099d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099dc:	fa93 f3a3 	rbit	r3, r3
 80099e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80099e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099e4:	fab3 f383 	clz	r3, r3
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	095b      	lsrs	r3, r3, #5
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	f043 0301 	orr.w	r3, r3, #1
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d102      	bne.n	80099fe <HAL_RCC_ClockConfig+0x12a>
 80099f8:	4b50      	ldr	r3, [pc, #320]	; (8009b3c <HAL_RCC_ClockConfig+0x268>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	e00f      	b.n	8009a1e <HAL_RCC_ClockConfig+0x14a>
 80099fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a02:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a06:	fa93 f3a3 	rbit	r3, r3
 8009a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8009a0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a10:	643b      	str	r3, [r7, #64]	; 0x40
 8009a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a14:	fa93 f3a3 	rbit	r3, r3
 8009a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a1a:	4b48      	ldr	r3, [pc, #288]	; (8009b3c <HAL_RCC_ClockConfig+0x268>)
 8009a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009a22:	63ba      	str	r2, [r7, #56]	; 0x38
 8009a24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a26:	fa92 f2a2 	rbit	r2, r2
 8009a2a:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8009a2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a2e:	fab2 f282 	clz	r2, r2
 8009a32:	b252      	sxtb	r2, r2
 8009a34:	f042 0220 	orr.w	r2, r2, #32
 8009a38:	b252      	sxtb	r2, r2
 8009a3a:	b2d2      	uxtb	r2, r2
 8009a3c:	f002 021f 	and.w	r2, r2, #31
 8009a40:	2101      	movs	r1, #1
 8009a42:	fa01 f202 	lsl.w	r2, r1, r2
 8009a46:	4013      	ands	r3, r2
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d13b      	bne.n	8009ac4 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e0b2      	b.n	8009bb6 <HAL_RCC_ClockConfig+0x2e2>
 8009a50:	2302      	movs	r3, #2
 8009a52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a56:	fa93 f3a3 	rbit	r3, r3
 8009a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8009a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a5e:	fab3 f383 	clz	r3, r3
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	095b      	lsrs	r3, r3, #5
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	f043 0301 	orr.w	r3, r3, #1
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d102      	bne.n	8009a78 <HAL_RCC_ClockConfig+0x1a4>
 8009a72:	4b32      	ldr	r3, [pc, #200]	; (8009b3c <HAL_RCC_ClockConfig+0x268>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	e00d      	b.n	8009a94 <HAL_RCC_ClockConfig+0x1c0>
 8009a78:	2302      	movs	r3, #2
 8009a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7e:	fa93 f3a3 	rbit	r3, r3
 8009a82:	627b      	str	r3, [r7, #36]	; 0x24
 8009a84:	2302      	movs	r3, #2
 8009a86:	623b      	str	r3, [r7, #32]
 8009a88:	6a3b      	ldr	r3, [r7, #32]
 8009a8a:	fa93 f3a3 	rbit	r3, r3
 8009a8e:	61fb      	str	r3, [r7, #28]
 8009a90:	4b2a      	ldr	r3, [pc, #168]	; (8009b3c <HAL_RCC_ClockConfig+0x268>)
 8009a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a94:	2202      	movs	r2, #2
 8009a96:	61ba      	str	r2, [r7, #24]
 8009a98:	69ba      	ldr	r2, [r7, #24]
 8009a9a:	fa92 f2a2 	rbit	r2, r2
 8009a9e:	617a      	str	r2, [r7, #20]
  return(result);
 8009aa0:	697a      	ldr	r2, [r7, #20]
 8009aa2:	fab2 f282 	clz	r2, r2
 8009aa6:	b252      	sxtb	r2, r2
 8009aa8:	f042 0220 	orr.w	r2, r2, #32
 8009aac:	b252      	sxtb	r2, r2
 8009aae:	b2d2      	uxtb	r2, r2
 8009ab0:	f002 021f 	and.w	r2, r2, #31
 8009ab4:	2101      	movs	r1, #1
 8009ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8009aba:	4013      	ands	r3, r2
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e078      	b.n	8009bb6 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009ac4:	4b1d      	ldr	r3, [pc, #116]	; (8009b3c <HAL_RCC_ClockConfig+0x268>)
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	f023 0203 	bic.w	r2, r3, #3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	491a      	ldr	r1, [pc, #104]	; (8009b3c <HAL_RCC_ClockConfig+0x268>)
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009ad6:	f7fe fc35 	bl	8008344 <HAL_GetTick>
 8009ada:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009adc:	e00a      	b.n	8009af4 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ade:	f7fe fc31 	bl	8008344 <HAL_GetTick>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ae6:	1ad3      	subs	r3, r2, r3
 8009ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d901      	bls.n	8009af4 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8009af0:	2303      	movs	r3, #3
 8009af2:	e060      	b.n	8009bb6 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009af4:	4b11      	ldr	r3, [pc, #68]	; (8009b3c <HAL_RCC_ClockConfig+0x268>)
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	f003 020c 	and.w	r2, r3, #12
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d1eb      	bne.n	8009ade <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009b06:	4b0c      	ldr	r3, [pc, #48]	; (8009b38 <HAL_RCC_ClockConfig+0x264>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f003 0307 	and.w	r3, r3, #7
 8009b0e:	683a      	ldr	r2, [r7, #0]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d215      	bcs.n	8009b40 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b14:	4b08      	ldr	r3, [pc, #32]	; (8009b38 <HAL_RCC_ClockConfig+0x264>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f023 0207 	bic.w	r2, r3, #7
 8009b1c:	4906      	ldr	r1, [pc, #24]	; (8009b38 <HAL_RCC_ClockConfig+0x264>)
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b24:	4b04      	ldr	r3, [pc, #16]	; (8009b38 <HAL_RCC_ClockConfig+0x264>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f003 0307 	and.w	r3, r3, #7
 8009b2c:	683a      	ldr	r2, [r7, #0]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d006      	beq.n	8009b40 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	e03f      	b.n	8009bb6 <HAL_RCC_ClockConfig+0x2e2>
 8009b36:	bf00      	nop
 8009b38:	40022000 	.word	0x40022000
 8009b3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 0304 	and.w	r3, r3, #4
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d008      	beq.n	8009b5e <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b4c:	4b1c      	ldr	r3, [pc, #112]	; (8009bc0 <HAL_RCC_ClockConfig+0x2ec>)
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	4919      	ldr	r1, [pc, #100]	; (8009bc0 <HAL_RCC_ClockConfig+0x2ec>)
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f003 0308 	and.w	r3, r3, #8
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d009      	beq.n	8009b7e <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009b6a:	4b15      	ldr	r3, [pc, #84]	; (8009bc0 <HAL_RCC_ClockConfig+0x2ec>)
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	00db      	lsls	r3, r3, #3
 8009b78:	4911      	ldr	r1, [pc, #68]	; (8009bc0 <HAL_RCC_ClockConfig+0x2ec>)
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8009b7e:	f000 f825 	bl	8009bcc <HAL_RCC_GetSysClockFreq>
 8009b82:	4601      	mov	r1, r0
 8009b84:	4b0e      	ldr	r3, [pc, #56]	; (8009bc0 <HAL_RCC_ClockConfig+0x2ec>)
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009b8c:	23f0      	movs	r3, #240	; 0xf0
 8009b8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	fa93 f3a3 	rbit	r3, r3
 8009b96:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	fab3 f383 	clz	r3, r3
 8009b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009ba2:	4a08      	ldr	r2, [pc, #32]	; (8009bc4 <HAL_RCC_ClockConfig+0x2f0>)
 8009ba4:	5cd3      	ldrb	r3, [r2, r3]
 8009ba6:	fa21 f303 	lsr.w	r3, r1, r3
 8009baa:	4a07      	ldr	r2, [pc, #28]	; (8009bc8 <HAL_RCC_ClockConfig+0x2f4>)
 8009bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8009bae:	2000      	movs	r0, #0
 8009bb0:	f7fe fb84 	bl	80082bc <HAL_InitTick>
  
  return HAL_OK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3778      	adds	r7, #120	; 0x78
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	40021000 	.word	0x40021000
 8009bc4:	0800b830 	.word	0x0800b830
 8009bc8:	20000028 	.word	0x20000028

08009bcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b08b      	sub	sp, #44	; 0x2c
 8009bd0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	61fb      	str	r3, [r7, #28]
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	61bb      	str	r3, [r7, #24]
 8009bda:	2300      	movs	r3, #0
 8009bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8009bde:	2300      	movs	r3, #0
 8009be0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009be2:	2300      	movs	r3, #0
 8009be4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8009be6:	4b2a      	ldr	r3, [pc, #168]	; (8009c90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	f003 030c 	and.w	r3, r3, #12
 8009bf2:	2b04      	cmp	r3, #4
 8009bf4:	d002      	beq.n	8009bfc <HAL_RCC_GetSysClockFreq+0x30>
 8009bf6:	2b08      	cmp	r3, #8
 8009bf8:	d003      	beq.n	8009c02 <HAL_RCC_GetSysClockFreq+0x36>
 8009bfa:	e03f      	b.n	8009c7c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009bfc:	4b25      	ldr	r3, [pc, #148]	; (8009c94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009bfe:	623b      	str	r3, [r7, #32]
      break;
 8009c00:	e03f      	b.n	8009c82 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009c08:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8009c0c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	fa93 f3a3 	rbit	r3, r3
 8009c14:	607b      	str	r3, [r7, #4]
  return(result);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	fab3 f383 	clz	r3, r3
 8009c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c20:	4a1d      	ldr	r2, [pc, #116]	; (8009c98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009c22:	5cd3      	ldrb	r3, [r2, r3]
 8009c24:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8009c26:	4b1a      	ldr	r3, [pc, #104]	; (8009c90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8009c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2a:	f003 020f 	and.w	r2, r3, #15
 8009c2e:	230f      	movs	r3, #15
 8009c30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	fa93 f3a3 	rbit	r3, r3
 8009c38:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	fab3 f383 	clz	r3, r3
 8009c40:	fa22 f303 	lsr.w	r3, r2, r3
 8009c44:	4a15      	ldr	r2, [pc, #84]	; (8009c9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8009c46:	5cd3      	ldrb	r3, [r2, r3]
 8009c48:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d008      	beq.n	8009c66 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8009c54:	4a0f      	ldr	r2, [pc, #60]	; (8009c94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	fb02 f303 	mul.w	r3, r2, r3
 8009c62:	627b      	str	r3, [r7, #36]	; 0x24
 8009c64:	e007      	b.n	8009c76 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8009c66:	4a0b      	ldr	r2, [pc, #44]	; (8009c94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	fb02 f303 	mul.w	r3, r2, r3
 8009c74:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	623b      	str	r3, [r7, #32]
      break;
 8009c7a:	e002      	b.n	8009c82 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009c7c:	4b05      	ldr	r3, [pc, #20]	; (8009c94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009c7e:	623b      	str	r3, [r7, #32]
      break;
 8009c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009c82:	6a3b      	ldr	r3, [r7, #32]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	372c      	adds	r7, #44	; 0x2c
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr
 8009c90:	40021000 	.word	0x40021000
 8009c94:	007a1200 	.word	0x007a1200
 8009c98:	0800b810 	.word	0x0800b810
 8009c9c:	0800b820 	.word	0x0800b820

08009ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009ca4:	4b03      	ldr	r3, [pc, #12]	; (8009cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	20000028 	.word	0x20000028

08009cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8009cbe:	f7ff ffef 	bl	8009ca0 <HAL_RCC_GetHCLKFreq>
 8009cc2:	4601      	mov	r1, r0
 8009cc4:	4b0b      	ldr	r3, [pc, #44]	; (8009cf4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009ccc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8009cd0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	fa93 f3a3 	rbit	r3, r3
 8009cd8:	603b      	str	r3, [r7, #0]
  return(result);
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	fab3 f383 	clz	r3, r3
 8009ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ce4:	4a04      	ldr	r2, [pc, #16]	; (8009cf8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8009ce6:	5cd3      	ldrb	r3, [r2, r3]
 8009ce8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8009cec:	4618      	mov	r0, r3
 8009cee:	3708      	adds	r7, #8
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	40021000 	.word	0x40021000
 8009cf8:	0800b840 	.word	0x0800b840

08009cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8009d02:	f7ff ffcd 	bl	8009ca0 <HAL_RCC_GetHCLKFreq>
 8009d06:	4601      	mov	r1, r0
 8009d08:	4b0b      	ldr	r3, [pc, #44]	; (8009d38 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8009d10:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009d14:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	fa93 f3a3 	rbit	r3, r3
 8009d1c:	603b      	str	r3, [r7, #0]
  return(result);
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	fab3 f383 	clz	r3, r3
 8009d24:	fa22 f303 	lsr.w	r3, r2, r3
 8009d28:	4a04      	ldr	r2, [pc, #16]	; (8009d3c <HAL_RCC_GetPCLK2Freq+0x40>)
 8009d2a:	5cd3      	ldrb	r3, [r2, r3]
 8009d2c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8009d30:	4618      	mov	r0, r3
 8009d32:	3708      	adds	r7, #8
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	40021000 	.word	0x40021000
 8009d3c:	0800b840 	.word	0x0800b840

08009d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b092      	sub	sp, #72	; 0x48
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f000 80d6 	beq.w	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d64:	4b4d      	ldr	r3, [pc, #308]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8009d66:	69db      	ldr	r3, [r3, #28]
 8009d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d10e      	bne.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d70:	4b4a      	ldr	r3, [pc, #296]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8009d72:	69db      	ldr	r3, [r3, #28]
 8009d74:	4a49      	ldr	r2, [pc, #292]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8009d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d7a:	61d3      	str	r3, [r2, #28]
 8009d7c:	4b47      	ldr	r3, [pc, #284]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8009d7e:	69db      	ldr	r3, [r3, #28]
 8009d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d84:	60bb      	str	r3, [r7, #8]
 8009d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d8e:	4b44      	ldr	r3, [pc, #272]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d118      	bne.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009d9a:	4b41      	ldr	r3, [pc, #260]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a40      	ldr	r2, [pc, #256]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009da4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009da6:	f7fe facd 	bl	8008344 <HAL_GetTick>
 8009daa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009dac:	e008      	b.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009dae:	f7fe fac9 	bl	8008344 <HAL_GetTick>
 8009db2:	4602      	mov	r2, r0
 8009db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009db6:	1ad3      	subs	r3, r2, r3
 8009db8:	2b64      	cmp	r3, #100	; 0x64
 8009dba:	d901      	bls.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	e1d4      	b.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009dc0:	4b37      	ldr	r3, [pc, #220]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d0f0      	beq.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009dcc:	4b33      	ldr	r3, [pc, #204]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8009dce:	6a1b      	ldr	r3, [r3, #32]
 8009dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f000 8083 	beq.w	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009de6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d07b      	beq.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009dec:	4b2b      	ldr	r3, [pc, #172]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8009dee:	6a1b      	ldr	r3, [r3, #32]
 8009df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009df4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009df6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009dfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfe:	fa93 f3a3 	rbit	r3, r3
 8009e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8009e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009e06:	fab3 f383 	clz	r3, r3
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	4b25      	ldr	r3, [pc, #148]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009e0e:	4413      	add	r3, r2
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	461a      	mov	r2, r3
 8009e14:	2301      	movs	r3, #1
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009e1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e20:	fa93 f3a3 	rbit	r3, r3
 8009e24:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8009e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009e28:	fab3 f383 	clz	r3, r3
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	4b1d      	ldr	r3, [pc, #116]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009e30:	4413      	add	r3, r2
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	461a      	mov	r2, r3
 8009e36:	2300      	movs	r3, #0
 8009e38:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009e3a:	4a18      	ldr	r2, [pc, #96]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8009e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e3e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e42:	f003 0301 	and.w	r3, r3, #1
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d04c      	beq.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e4a:	f7fe fa7b 	bl	8008344 <HAL_GetTick>
 8009e4e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e50:	e00a      	b.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e52:	f7fe fa77 	bl	8008344 <HAL_GetTick>
 8009e56:	4602      	mov	r2, r0
 8009e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d901      	bls.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 8009e64:	2303      	movs	r3, #3
 8009e66:	e180      	b.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8009e68:	2302      	movs	r3, #2
 8009e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6e:	fa93 f3a3 	rbit	r3, r3
 8009e72:	627b      	str	r3, [r7, #36]	; 0x24
 8009e74:	2302      	movs	r3, #2
 8009e76:	623b      	str	r3, [r7, #32]
 8009e78:	6a3b      	ldr	r3, [r7, #32]
 8009e7a:	fa93 f3a3 	rbit	r3, r3
 8009e7e:	61fb      	str	r3, [r7, #28]
  return(result);
 8009e80:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e82:	fab3 f383 	clz	r3, r3
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	095b      	lsrs	r3, r3, #5
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	f043 0302 	orr.w	r3, r3, #2
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d108      	bne.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009e96:	4b01      	ldr	r3, [pc, #4]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8009e98:	6a1b      	ldr	r3, [r3, #32]
 8009e9a:	e00d      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8009e9c:	40021000 	.word	0x40021000
 8009ea0:	40007000 	.word	0x40007000
 8009ea4:	10908100 	.word	0x10908100
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	fa93 f3a3 	rbit	r3, r3
 8009eb2:	617b      	str	r3, [r7, #20]
 8009eb4:	4b9c      	ldr	r3, [pc, #624]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb8:	2202      	movs	r2, #2
 8009eba:	613a      	str	r2, [r7, #16]
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	fa92 f2a2 	rbit	r2, r2
 8009ec2:	60fa      	str	r2, [r7, #12]
  return(result);
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	fab2 f282 	clz	r2, r2
 8009eca:	b252      	sxtb	r2, r2
 8009ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ed0:	b252      	sxtb	r2, r2
 8009ed2:	b2d2      	uxtb	r2, r2
 8009ed4:	f002 021f 	and.w	r2, r2, #31
 8009ed8:	2101      	movs	r1, #1
 8009eda:	fa01 f202 	lsl.w	r2, r1, r2
 8009ede:	4013      	ands	r3, r2
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d0b6      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8009ee4:	4b90      	ldr	r3, [pc, #576]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009ee6:	6a1b      	ldr	r3, [r3, #32]
 8009ee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	498d      	ldr	r1, [pc, #564]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009ef6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d105      	bne.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009efe:	4b8a      	ldr	r3, [pc, #552]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009f00:	69db      	ldr	r3, [r3, #28]
 8009f02:	4a89      	ldr	r2, [pc, #548]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f08:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 0301 	and.w	r3, r3, #1
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d008      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009f16:	4b84      	ldr	r3, [pc, #528]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f1a:	f023 0203 	bic.w	r2, r3, #3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	4981      	ldr	r1, [pc, #516]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009f24:	4313      	orrs	r3, r2
 8009f26:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f003 0302 	and.w	r3, r3, #2
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d008      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009f34:	4b7c      	ldr	r3, [pc, #496]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	4979      	ldr	r1, [pc, #484]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009f42:	4313      	orrs	r3, r2
 8009f44:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 0304 	and.w	r3, r3, #4
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d008      	beq.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009f52:	4b75      	ldr	r3, [pc, #468]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f56:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	4972      	ldr	r1, [pc, #456]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009f60:	4313      	orrs	r3, r2
 8009f62:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 0320 	and.w	r3, r3, #32
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d008      	beq.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009f70:	4b6d      	ldr	r3, [pc, #436]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f74:	f023 0210 	bic.w	r2, r3, #16
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	69db      	ldr	r3, [r3, #28]
 8009f7c:	496a      	ldr	r1, [pc, #424]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d008      	beq.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8009f8e:	4b66      	ldr	r3, [pc, #408]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f9a:	4963      	ldr	r1, [pc, #396]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d008      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009fac:	4b5e      	ldr	r3, [pc, #376]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb0:	f023 0220 	bic.w	r2, r3, #32
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6a1b      	ldr	r3, [r3, #32]
 8009fb8:	495b      	ldr	r1, [pc, #364]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d008      	beq.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009fca:	4b57      	ldr	r3, [pc, #348]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fce:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd6:	4954      	ldr	r1, [pc, #336]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f003 0308 	and.w	r3, r3, #8
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d008      	beq.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009fe8:	4b4f      	ldr	r3, [pc, #316]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	695b      	ldr	r3, [r3, #20]
 8009ff4:	494c      	ldr	r1, [pc, #304]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f003 0310 	and.w	r3, r3, #16
 800a002:	2b00      	cmp	r3, #0
 800a004:	d008      	beq.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a006:	4b48      	ldr	r3, [pc, #288]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a00a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	4945      	ldr	r1, [pc, #276]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a014:	4313      	orrs	r3, r2
 800a016:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a020:	2b00      	cmp	r3, #0
 800a022:	d008      	beq.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a024:	4b40      	ldr	r3, [pc, #256]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a030:	493d      	ldr	r1, [pc, #244]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a032:	4313      	orrs	r3, r2
 800a034:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d008      	beq.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a042:	4b39      	ldr	r3, [pc, #228]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a046:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a04e:	4936      	ldr	r1, [pc, #216]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a050:	4313      	orrs	r3, r2
 800a052:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d008      	beq.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800a060:	4b31      	ldr	r3, [pc, #196]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a064:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06c:	492e      	ldr	r1, [pc, #184]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a06e:	4313      	orrs	r3, r2
 800a070:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d008      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a07e:	4b2a      	ldr	r3, [pc, #168]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a082:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a08a:	4927      	ldr	r1, [pc, #156]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a08c:	4313      	orrs	r3, r2
 800a08e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d008      	beq.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800a09c:	4b22      	ldr	r3, [pc, #136]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a8:	491f      	ldr	r1, [pc, #124]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d008      	beq.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800a0ba:	4b1b      	ldr	r3, [pc, #108]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c6:	4918      	ldr	r1, [pc, #96]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d008      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x3aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800a0d8:	4b13      	ldr	r3, [pc, #76]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0e4:	4910      	ldr	r1, [pc, #64]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d008      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800a0f6:	4b0c      	ldr	r3, [pc, #48]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a0f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a102:	4909      	ldr	r1, [pc, #36]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a104:	4313      	orrs	r3, r2
 800a106:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d00b      	beq.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800a114:	4b04      	ldr	r3, [pc, #16]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a118:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a120:	4901      	ldr	r1, [pc, #4]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a122:	4313      	orrs	r3, r2
 800a124:	630b      	str	r3, [r1, #48]	; 0x30
 800a126:	e001      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800a128:	40021000 	.word	0x40021000
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a134:	2b00      	cmp	r3, #0
 800a136:	d008      	beq.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800a138:	4b0e      	ldr	r3, [pc, #56]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800a13a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a13c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a144:	490b      	ldr	r1, [pc, #44]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800a146:	4313      	orrs	r3, r2
 800a148:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a152:	2b00      	cmp	r3, #0
 800a154:	d008      	beq.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800a156:	4b07      	ldr	r3, [pc, #28]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800a158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a162:	4904      	ldr	r1, [pc, #16]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800a164:	4313      	orrs	r3, r2
 800a166:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3748      	adds	r7, #72	; 0x48
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	40021000 	.word	0x40021000

0800a178 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d101      	bne.n	800a18a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	e043      	b.n	800a212 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800a190:	b2db      	uxtb	r3, r3
 800a192:	2b00      	cmp	r3, #0
 800a194:	d106      	bne.n	800a1a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 fdb4 	bl	800ad0c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2224      	movs	r2, #36	; 0x24
 800a1a8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f022 0201 	bic.w	r2, r2, #1
 800a1ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 f8b9 	bl	800a334 <UART_SetConfig>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d101      	bne.n	800a1cc <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e022      	b.n	800a212 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d002      	beq.n	800a1da <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 faab 	bl	800a730 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a1e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	689a      	ldr	r2, [r3, #8]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a1f8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f042 0201 	orr.w	r2, r2, #1
 800a208:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 fb32 	bl	800a874 <UART_CheckIdleState>
 800a210:	4603      	mov	r3, r0
}
 800a212:	4618      	mov	r0, r3
 800a214:	3708      	adds	r7, #8
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b088      	sub	sp, #32
 800a21e:	af02      	add	r7, sp, #8
 800a220:	60f8      	str	r0, [r7, #12]
 800a222:	60b9      	str	r1, [r7, #8]
 800a224:	603b      	str	r3, [r7, #0]
 800a226:	4613      	mov	r3, r2
 800a228:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800a22a:	2300      	movs	r3, #0
 800a22c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800a234:	b2db      	uxtb	r3, r3
 800a236:	2b20      	cmp	r3, #32
 800a238:	d177      	bne.n	800a32a <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d002      	beq.n	800a246 <HAL_UART_Transmit+0x2c>
 800a240:	88fb      	ldrh	r3, [r7, #6]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d101      	bne.n	800a24a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e070      	b.n	800a32c <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800a250:	2b01      	cmp	r3, #1
 800a252:	d101      	bne.n	800a258 <HAL_UART_Transmit+0x3e>
 800a254:	2302      	movs	r3, #2
 800a256:	e069      	b.n	800a32c <HAL_UART_Transmit+0x112>
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2200      	movs	r2, #0
 800a264:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2221      	movs	r2, #33	; 0x21
 800a26a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a26e:	f7fe f869 	bl	8008344 <HAL_GetTick>
 800a272:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	88fa      	ldrh	r2, [r7, #6]
 800a278:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	88fa      	ldrh	r2, [r7, #6]
 800a280:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800a284:	e034      	b.n	800a2f0 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	3b01      	subs	r3, #1
 800a290:	b29a      	uxth	r2, r3
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	2180      	movs	r1, #128	; 0x80
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f000 fb2f 	bl	800a906 <UART_WaitOnFlagUntilTimeout>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	e03c      	b.n	800a32c <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2ba:	d111      	bne.n	800a2e0 <HAL_UART_Transmit+0xc6>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d10d      	bne.n	800a2e0 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	881a      	ldrh	r2, [r3, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2d4:	b292      	uxth	r2, r2
 800a2d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	3302      	adds	r3, #2
 800a2dc:	60bb      	str	r3, [r7, #8]
 800a2de:	e007      	b.n	800a2f0 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	1c5a      	adds	r2, r3, #1
 800a2e4:	60ba      	str	r2, [r7, #8]
 800a2e6:	781a      	ldrb	r2, [r3, #0]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	b292      	uxth	r2, r2
 800a2ee:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1c4      	bne.n	800a286 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	2200      	movs	r2, #0
 800a304:	2140      	movs	r1, #64	; 0x40
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f000 fafd 	bl	800a906 <UART_WaitOnFlagUntilTimeout>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d001      	beq.n	800a316 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 800a312:	2303      	movs	r3, #3
 800a314:	e00a      	b.n	800a32c <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2220      	movs	r2, #32
 800a31a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2200      	movs	r2, #0
 800a322:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 800a326:	2300      	movs	r3, #0
 800a328:	e000      	b.n	800a32c <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 800a32a:	2302      	movs	r3, #2
  }
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3718      	adds	r7, #24
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b086      	sub	sp, #24
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 800a33c:	2300      	movs	r3, #0
 800a33e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a340:	2310      	movs	r3, #16
 800a342:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 800a344:	2300      	movs	r3, #0
 800a346:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 800a348:	2300      	movs	r3, #0
 800a34a:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	689a      	ldr	r2, [r3, #8]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	431a      	orrs	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	695b      	ldr	r3, [r3, #20]
 800a35e:	431a      	orrs	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	69db      	ldr	r3, [r3, #28]
 800a364:	4313      	orrs	r3, r2
 800a366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	4ba7      	ldr	r3, [pc, #668]	; (800a60c <UART_SetConfig+0x2d8>)
 800a370:	4013      	ands	r3, r2
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	6812      	ldr	r2, [r2, #0]
 800a376:	68f9      	ldr	r1, [r7, #12]
 800a378:	430b      	orrs	r3, r1
 800a37a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68da      	ldr	r2, [r3, #12]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	430a      	orrs	r2, r1
 800a390:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	699a      	ldr	r2, [r3, #24]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a1b      	ldr	r3, [r3, #32]
 800a39a:	4313      	orrs	r3, r2
 800a39c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	430a      	orrs	r2, r1
 800a3b0:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a96      	ldr	r2, [pc, #600]	; (800a610 <UART_SetConfig+0x2dc>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d121      	bne.n	800a400 <UART_SetConfig+0xcc>
 800a3bc:	4b95      	ldr	r3, [pc, #596]	; (800a614 <UART_SetConfig+0x2e0>)
 800a3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c0:	f003 0303 	and.w	r3, r3, #3
 800a3c4:	2b03      	cmp	r3, #3
 800a3c6:	d817      	bhi.n	800a3f8 <UART_SetConfig+0xc4>
 800a3c8:	a201      	add	r2, pc, #4	; (adr r2, 800a3d0 <UART_SetConfig+0x9c>)
 800a3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ce:	bf00      	nop
 800a3d0:	0800a3e1 	.word	0x0800a3e1
 800a3d4:	0800a3ed 	.word	0x0800a3ed
 800a3d8:	0800a3f3 	.word	0x0800a3f3
 800a3dc:	0800a3e7 	.word	0x0800a3e7
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	75fb      	strb	r3, [r7, #23]
 800a3e4:	e0b2      	b.n	800a54c <UART_SetConfig+0x218>
 800a3e6:	2302      	movs	r3, #2
 800a3e8:	75fb      	strb	r3, [r7, #23]
 800a3ea:	e0af      	b.n	800a54c <UART_SetConfig+0x218>
 800a3ec:	2304      	movs	r3, #4
 800a3ee:	75fb      	strb	r3, [r7, #23]
 800a3f0:	e0ac      	b.n	800a54c <UART_SetConfig+0x218>
 800a3f2:	2308      	movs	r3, #8
 800a3f4:	75fb      	strb	r3, [r7, #23]
 800a3f6:	e0a9      	b.n	800a54c <UART_SetConfig+0x218>
 800a3f8:	2310      	movs	r3, #16
 800a3fa:	75fb      	strb	r3, [r7, #23]
 800a3fc:	bf00      	nop
 800a3fe:	e0a5      	b.n	800a54c <UART_SetConfig+0x218>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a84      	ldr	r2, [pc, #528]	; (800a618 <UART_SetConfig+0x2e4>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d123      	bne.n	800a452 <UART_SetConfig+0x11e>
 800a40a:	4b82      	ldr	r3, [pc, #520]	; (800a614 <UART_SetConfig+0x2e0>)
 800a40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a416:	d012      	beq.n	800a43e <UART_SetConfig+0x10a>
 800a418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a41c:	d802      	bhi.n	800a424 <UART_SetConfig+0xf0>
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d007      	beq.n	800a432 <UART_SetConfig+0xfe>
 800a422:	e012      	b.n	800a44a <UART_SetConfig+0x116>
 800a424:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a428:	d00c      	beq.n	800a444 <UART_SetConfig+0x110>
 800a42a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a42e:	d003      	beq.n	800a438 <UART_SetConfig+0x104>
 800a430:	e00b      	b.n	800a44a <UART_SetConfig+0x116>
 800a432:	2300      	movs	r3, #0
 800a434:	75fb      	strb	r3, [r7, #23]
 800a436:	e089      	b.n	800a54c <UART_SetConfig+0x218>
 800a438:	2302      	movs	r3, #2
 800a43a:	75fb      	strb	r3, [r7, #23]
 800a43c:	e086      	b.n	800a54c <UART_SetConfig+0x218>
 800a43e:	2304      	movs	r3, #4
 800a440:	75fb      	strb	r3, [r7, #23]
 800a442:	e083      	b.n	800a54c <UART_SetConfig+0x218>
 800a444:	2308      	movs	r3, #8
 800a446:	75fb      	strb	r3, [r7, #23]
 800a448:	e080      	b.n	800a54c <UART_SetConfig+0x218>
 800a44a:	2310      	movs	r3, #16
 800a44c:	75fb      	strb	r3, [r7, #23]
 800a44e:	bf00      	nop
 800a450:	e07c      	b.n	800a54c <UART_SetConfig+0x218>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a71      	ldr	r2, [pc, #452]	; (800a61c <UART_SetConfig+0x2e8>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d123      	bne.n	800a4a4 <UART_SetConfig+0x170>
 800a45c:	4b6d      	ldr	r3, [pc, #436]	; (800a614 <UART_SetConfig+0x2e0>)
 800a45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a460:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800a464:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a468:	d012      	beq.n	800a490 <UART_SetConfig+0x15c>
 800a46a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a46e:	d802      	bhi.n	800a476 <UART_SetConfig+0x142>
 800a470:	2b00      	cmp	r3, #0
 800a472:	d007      	beq.n	800a484 <UART_SetConfig+0x150>
 800a474:	e012      	b.n	800a49c <UART_SetConfig+0x168>
 800a476:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a47a:	d00c      	beq.n	800a496 <UART_SetConfig+0x162>
 800a47c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a480:	d003      	beq.n	800a48a <UART_SetConfig+0x156>
 800a482:	e00b      	b.n	800a49c <UART_SetConfig+0x168>
 800a484:	2300      	movs	r3, #0
 800a486:	75fb      	strb	r3, [r7, #23]
 800a488:	e060      	b.n	800a54c <UART_SetConfig+0x218>
 800a48a:	2302      	movs	r3, #2
 800a48c:	75fb      	strb	r3, [r7, #23]
 800a48e:	e05d      	b.n	800a54c <UART_SetConfig+0x218>
 800a490:	2304      	movs	r3, #4
 800a492:	75fb      	strb	r3, [r7, #23]
 800a494:	e05a      	b.n	800a54c <UART_SetConfig+0x218>
 800a496:	2308      	movs	r3, #8
 800a498:	75fb      	strb	r3, [r7, #23]
 800a49a:	e057      	b.n	800a54c <UART_SetConfig+0x218>
 800a49c:	2310      	movs	r3, #16
 800a49e:	75fb      	strb	r3, [r7, #23]
 800a4a0:	bf00      	nop
 800a4a2:	e053      	b.n	800a54c <UART_SetConfig+0x218>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a5d      	ldr	r2, [pc, #372]	; (800a620 <UART_SetConfig+0x2ec>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d123      	bne.n	800a4f6 <UART_SetConfig+0x1c2>
 800a4ae:	4b59      	ldr	r3, [pc, #356]	; (800a614 <UART_SetConfig+0x2e0>)
 800a4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a4b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4ba:	d012      	beq.n	800a4e2 <UART_SetConfig+0x1ae>
 800a4bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4c0:	d802      	bhi.n	800a4c8 <UART_SetConfig+0x194>
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d007      	beq.n	800a4d6 <UART_SetConfig+0x1a2>
 800a4c6:	e012      	b.n	800a4ee <UART_SetConfig+0x1ba>
 800a4c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4cc:	d00c      	beq.n	800a4e8 <UART_SetConfig+0x1b4>
 800a4ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a4d2:	d003      	beq.n	800a4dc <UART_SetConfig+0x1a8>
 800a4d4:	e00b      	b.n	800a4ee <UART_SetConfig+0x1ba>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	75fb      	strb	r3, [r7, #23]
 800a4da:	e037      	b.n	800a54c <UART_SetConfig+0x218>
 800a4dc:	2302      	movs	r3, #2
 800a4de:	75fb      	strb	r3, [r7, #23]
 800a4e0:	e034      	b.n	800a54c <UART_SetConfig+0x218>
 800a4e2:	2304      	movs	r3, #4
 800a4e4:	75fb      	strb	r3, [r7, #23]
 800a4e6:	e031      	b.n	800a54c <UART_SetConfig+0x218>
 800a4e8:	2308      	movs	r3, #8
 800a4ea:	75fb      	strb	r3, [r7, #23]
 800a4ec:	e02e      	b.n	800a54c <UART_SetConfig+0x218>
 800a4ee:	2310      	movs	r3, #16
 800a4f0:	75fb      	strb	r3, [r7, #23]
 800a4f2:	bf00      	nop
 800a4f4:	e02a      	b.n	800a54c <UART_SetConfig+0x218>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a4a      	ldr	r2, [pc, #296]	; (800a624 <UART_SetConfig+0x2f0>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d123      	bne.n	800a548 <UART_SetConfig+0x214>
 800a500:	4b44      	ldr	r3, [pc, #272]	; (800a614 <UART_SetConfig+0x2e0>)
 800a502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a504:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800a508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a50c:	d012      	beq.n	800a534 <UART_SetConfig+0x200>
 800a50e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a512:	d802      	bhi.n	800a51a <UART_SetConfig+0x1e6>
 800a514:	2b00      	cmp	r3, #0
 800a516:	d007      	beq.n	800a528 <UART_SetConfig+0x1f4>
 800a518:	e012      	b.n	800a540 <UART_SetConfig+0x20c>
 800a51a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a51e:	d00c      	beq.n	800a53a <UART_SetConfig+0x206>
 800a520:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a524:	d003      	beq.n	800a52e <UART_SetConfig+0x1fa>
 800a526:	e00b      	b.n	800a540 <UART_SetConfig+0x20c>
 800a528:	2300      	movs	r3, #0
 800a52a:	75fb      	strb	r3, [r7, #23]
 800a52c:	e00e      	b.n	800a54c <UART_SetConfig+0x218>
 800a52e:	2302      	movs	r3, #2
 800a530:	75fb      	strb	r3, [r7, #23]
 800a532:	e00b      	b.n	800a54c <UART_SetConfig+0x218>
 800a534:	2304      	movs	r3, #4
 800a536:	75fb      	strb	r3, [r7, #23]
 800a538:	e008      	b.n	800a54c <UART_SetConfig+0x218>
 800a53a:	2308      	movs	r3, #8
 800a53c:	75fb      	strb	r3, [r7, #23]
 800a53e:	e005      	b.n	800a54c <UART_SetConfig+0x218>
 800a540:	2310      	movs	r3, #16
 800a542:	75fb      	strb	r3, [r7, #23]
 800a544:	bf00      	nop
 800a546:	e001      	b.n	800a54c <UART_SetConfig+0x218>
 800a548:	2310      	movs	r3, #16
 800a54a:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	69db      	ldr	r3, [r3, #28]
 800a550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a554:	d17d      	bne.n	800a652 <UART_SetConfig+0x31e>
  {
    switch (clocksource)
 800a556:	7dfb      	ldrb	r3, [r7, #23]
 800a558:	2b08      	cmp	r3, #8
 800a55a:	d865      	bhi.n	800a628 <UART_SetConfig+0x2f4>
 800a55c:	a201      	add	r2, pc, #4	; (adr r2, 800a564 <UART_SetConfig+0x230>)
 800a55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a562:	bf00      	nop
 800a564:	0800a589 	.word	0x0800a589
 800a568:	0800a5a5 	.word	0x0800a5a5
 800a56c:	0800a5c1 	.word	0x0800a5c1
 800a570:	0800a629 	.word	0x0800a629
 800a574:	0800a5db 	.word	0x0800a5db
 800a578:	0800a629 	.word	0x0800a629
 800a57c:	0800a629 	.word	0x0800a629
 800a580:	0800a629 	.word	0x0800a629
 800a584:	0800a5f7 	.word	0x0800a5f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a588:	f7ff fb96 	bl	8009cb8 <HAL_RCC_GetPCLK1Freq>
 800a58c:	4603      	mov	r3, r0
 800a58e:	005a      	lsls	r2, r3, #1
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	085b      	lsrs	r3, r3, #1
 800a596:	441a      	add	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5a0:	82bb      	strh	r3, [r7, #20]
        break;
 800a5a2:	e044      	b.n	800a62e <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a5a4:	f7ff fbaa 	bl	8009cfc <HAL_RCC_GetPCLK2Freq>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	005a      	lsls	r2, r3, #1
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	085b      	lsrs	r3, r3, #1
 800a5b2:	441a      	add	r2, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5bc:	82bb      	strh	r3, [r7, #20]
        break;
 800a5be:	e036      	b.n	800a62e <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	085b      	lsrs	r3, r3, #1
 800a5c6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800a5ca:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	6852      	ldr	r2, [r2, #4]
 800a5d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5d6:	82bb      	strh	r3, [r7, #20]
        break;
 800a5d8:	e029      	b.n	800a62e <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a5da:	f7ff faf7 	bl	8009bcc <HAL_RCC_GetSysClockFreq>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	005a      	lsls	r2, r3, #1
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	085b      	lsrs	r3, r3, #1
 800a5e8:	441a      	add	r2, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5f2:	82bb      	strh	r3, [r7, #20]
        break;
 800a5f4:	e01b      	b.n	800a62e <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	085b      	lsrs	r3, r3, #1
 800a5fc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	fbb2 f3f3 	udiv	r3, r2, r3
 800a608:	82bb      	strh	r3, [r7, #20]
        break;
 800a60a:	e010      	b.n	800a62e <UART_SetConfig+0x2fa>
 800a60c:	efff69f3 	.word	0xefff69f3
 800a610:	40013800 	.word	0x40013800
 800a614:	40021000 	.word	0x40021000
 800a618:	40004400 	.word	0x40004400
 800a61c:	40004800 	.word	0x40004800
 800a620:	40004c00 	.word	0x40004c00
 800a624:	40005000 	.word	0x40005000
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	74fb      	strb	r3, [r7, #19]
        break;
 800a62c:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 800a62e:	8abb      	ldrh	r3, [r7, #20]
 800a630:	f023 030f 	bic.w	r3, r3, #15
 800a634:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a636:	8abb      	ldrh	r3, [r7, #20]
 800a638:	105b      	asrs	r3, r3, #1
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	f003 0307 	and.w	r3, r3, #7
 800a640:	b29a      	uxth	r2, r3
 800a642:	897b      	ldrh	r3, [r7, #10]
 800a644:	4313      	orrs	r3, r2
 800a646:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	897a      	ldrh	r2, [r7, #10]
 800a64e:	60da      	str	r2, [r3, #12]
 800a650:	e069      	b.n	800a726 <UART_SetConfig+0x3f2>
  }
  else
  {
    switch (clocksource)
 800a652:	7dfb      	ldrb	r3, [r7, #23]
 800a654:	2b08      	cmp	r3, #8
 800a656:	d863      	bhi.n	800a720 <UART_SetConfig+0x3ec>
 800a658:	a201      	add	r2, pc, #4	; (adr r2, 800a660 <UART_SetConfig+0x32c>)
 800a65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a65e:	bf00      	nop
 800a660:	0800a685 	.word	0x0800a685
 800a664:	0800a6a5 	.word	0x0800a6a5
 800a668:	0800a6c5 	.word	0x0800a6c5
 800a66c:	0800a721 	.word	0x0800a721
 800a670:	0800a6e5 	.word	0x0800a6e5
 800a674:	0800a721 	.word	0x0800a721
 800a678:	0800a721 	.word	0x0800a721
 800a67c:	0800a721 	.word	0x0800a721
 800a680:	0800a705 	.word	0x0800a705
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a684:	f7ff fb18 	bl	8009cb8 <HAL_RCC_GetPCLK1Freq>
 800a688:	4602      	mov	r2, r0
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	085b      	lsrs	r3, r3, #1
 800a690:	441a      	add	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	fbb2 f3f3 	udiv	r3, r2, r3
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	60da      	str	r2, [r3, #12]
        break;
 800a6a2:	e040      	b.n	800a726 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a6a4:	f7ff fb2a 	bl	8009cfc <HAL_RCC_GetPCLK2Freq>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	085b      	lsrs	r3, r3, #1
 800a6b0:	441a      	add	r2, r3
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6ba:	b29a      	uxth	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	60da      	str	r2, [r3, #12]
        break;
 800a6c2:	e030      	b.n	800a726 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	085b      	lsrs	r3, r3, #1
 800a6ca:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800a6ce:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	6852      	ldr	r2, [r2, #4]
 800a6d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6da:	b29a      	uxth	r2, r3
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	60da      	str	r2, [r3, #12]
        break;
 800a6e2:	e020      	b.n	800a726 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a6e4:	f7ff fa72 	bl	8009bcc <HAL_RCC_GetSysClockFreq>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	085b      	lsrs	r3, r3, #1
 800a6f0:	441a      	add	r2, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6fa:	b29a      	uxth	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	60da      	str	r2, [r3, #12]
        break;
 800a702:	e010      	b.n	800a726 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	085b      	lsrs	r3, r3, #1
 800a70a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	fbb2 f3f3 	udiv	r3, r2, r3
 800a716:	b29a      	uxth	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	60da      	str	r2, [r3, #12]
        break;
 800a71e:	e002      	b.n	800a726 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	74fb      	strb	r3, [r7, #19]
        break;
 800a724:	bf00      	nop
    }
  }

  return ret;
 800a726:	7cfb      	ldrb	r3, [r7, #19]

}
 800a728:	4618      	mov	r0, r3
 800a72a:	3718      	adds	r7, #24
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73c:	f003 0301 	and.w	r3, r3, #1
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00a      	beq.n	800a75a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	430a      	orrs	r2, r1
 800a758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	f003 0302 	and.w	r3, r3, #2
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00a      	beq.n	800a77c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	430a      	orrs	r2, r1
 800a77a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a780:	f003 0304 	and.w	r3, r3, #4
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00a      	beq.n	800a79e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	430a      	orrs	r2, r1
 800a79c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a2:	f003 0308 	and.w	r3, r3, #8
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00a      	beq.n	800a7c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	430a      	orrs	r2, r1
 800a7be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c4:	f003 0310 	and.w	r3, r3, #16
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d00a      	beq.n	800a7e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	430a      	orrs	r2, r1
 800a7e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e6:	f003 0320 	and.w	r3, r3, #32
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00a      	beq.n	800a804 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	430a      	orrs	r2, r1
 800a802:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d01a      	beq.n	800a846 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	430a      	orrs	r2, r1
 800a824:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a82e:	d10a      	bne.n	800a846 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	430a      	orrs	r2, r1
 800a844:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00a      	beq.n	800a868 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	430a      	orrs	r2, r1
 800a866:	605a      	str	r2, [r3, #4]
  }
}
 800a868:	bf00      	nop
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b086      	sub	sp, #24
 800a878:	af02      	add	r7, sp, #8
 800a87a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a87c:	2300      	movs	r3, #0
 800a87e:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a886:	f7fd fd5d 	bl	8008344 <HAL_GetTick>
 800a88a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f003 0308 	and.w	r3, r3, #8
 800a896:	2b08      	cmp	r3, #8
 800a898:	d10e      	bne.n	800a8b8 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a89a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a89e:	9300      	str	r3, [sp, #0]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f82c 	bl	800a906 <UART_WaitOnFlagUntilTimeout>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d001      	beq.n	800a8b8 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 800a8b4:	2303      	movs	r3, #3
 800a8b6:	e022      	b.n	800a8fe <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 0304 	and.w	r3, r3, #4
 800a8c2:	2b04      	cmp	r3, #4
 800a8c4:	d10e      	bne.n	800a8e4 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a8ca:	9300      	str	r3, [sp, #0]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 f816 	bl	800a906 <UART_WaitOnFlagUntilTimeout>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d001      	beq.n	800a8e4 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 800a8e0:	2303      	movs	r3, #3
 800a8e2:	e00c      	b.n	800a8fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2220      	movs	r2, #32
 800a8e8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2220      	movs	r2, #32
 800a8f0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b084      	sub	sp, #16
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	60f8      	str	r0, [r7, #12]
 800a90e:	60b9      	str	r1, [r7, #8]
 800a910:	603b      	str	r3, [r7, #0]
 800a912:	4613      	mov	r3, r2
 800a914:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a916:	e02c      	b.n	800a972 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a91e:	d028      	beq.n	800a972 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800a920:	69bb      	ldr	r3, [r7, #24]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d007      	beq.n	800a936 <UART_WaitOnFlagUntilTimeout+0x30>
 800a926:	f7fd fd0d 	bl	8008344 <HAL_GetTick>
 800a92a:	4602      	mov	r2, r0
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	69ba      	ldr	r2, [r7, #24]
 800a932:	429a      	cmp	r2, r3
 800a934:	d21d      	bcs.n	800a972 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681a      	ldr	r2, [r3, #0]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a944:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	689a      	ldr	r2, [r3, #8]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f022 0201 	bic.w	r2, r2, #1
 800a954:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2220      	movs	r2, #32
 800a95a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2220      	movs	r2, #32
 800a962:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2200      	movs	r2, #0
 800a96a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 800a96e:	2303      	movs	r3, #3
 800a970:	e00f      	b.n	800a992 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	69da      	ldr	r2, [r3, #28]
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	4013      	ands	r3, r2
 800a97c:	68ba      	ldr	r2, [r7, #8]
 800a97e:	429a      	cmp	r2, r3
 800a980:	bf0c      	ite	eq
 800a982:	2301      	moveq	r3, #1
 800a984:	2300      	movne	r3, #0
 800a986:	b2db      	uxtb	r3, r3
 800a988:	461a      	mov	r2, r3
 800a98a:	79fb      	ldrb	r3, [r7, #7]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d0c3      	beq.n	800a918 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <init_debounce_struct_t>:
static void printmsg(char *format,...);

void init_debounce_struct_t(debounce_button_status_t *);

void init_debounce_struct_t(debounce_button_status_t *struct_t)
{
 800a99a:	b480      	push	{r7}
 800a99c:	b083      	sub	sp, #12
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
	struct_t->active_cnt = 0;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	801a      	strh	r2, [r3, #0]
	struct_t->current_btn_state_t = BUTTON_RELEASED;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	719a      	strb	r2, [r3, #6]
	struct_t->deactive_cnt = 0;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	805a      	strh	r2, [r3, #2]
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a9c6:	f7fd fc63 	bl	8008290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a9ca:	f000 f831 	bl	800aa30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a9ce:	f000 f8d3 	bl	800ab78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800a9d2:	f000 f8a1 	bl	800ab18 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800a9d6:	f000 f87d 	bl	800aad4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  init_debounce_struct_t(&user_btn_status_t);
 800a9da:	4810      	ldr	r0, [pc, #64]	; (800aa1c <main+0x5c>)
 800a9dc:	f7ff ffdd 	bl	800a99a <init_debounce_struct_t>
  gpio_status_t = HAL_GPIO_ReadPin(USER_BTN_GPIO_Port,USER_BTN_Pin);
 800a9e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a9e4:	480e      	ldr	r0, [pc, #56]	; (800aa20 <main+0x60>)
 800a9e6:	f7fe f833 	bl	8008a50 <HAL_GPIO_ReadPin>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	4b0d      	ldr	r3, [pc, #52]	; (800aa24 <main+0x64>)
 800a9f0:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(50);
	  //
	   *
	   */
	  //uart_status_t = HAL_UART_Transmit(&huart2,(uint8_t*)somedata,sizeof(somedata),HAL_MAX_DELAY);
	  printmsg(somedata);
 800a9f2:	480d      	ldr	r0, [pc, #52]	; (800aa28 <main+0x68>)
 800a9f4:	f000 f918 	bl	800ac28 <printmsg>
	  uint32_t current_tick = HAL_GetTick();
 800a9f8:	f7fd fca4 	bl	8008344 <HAL_GetTick>
 800a9fc:	6078      	str	r0, [r7, #4]
	  printmsg("current_tick = %d\r\n",current_tick);
 800a9fe:	6879      	ldr	r1, [r7, #4]
 800aa00:	480a      	ldr	r0, [pc, #40]	; (800aa2c <main+0x6c>)
 800aa02:	f000 f911 	bl	800ac28 <printmsg>
	  while(HAL_GetTick() <= (current_tick+500));
 800aa06:	bf00      	nop
 800aa08:	f7fd fc9c 	bl	8008344 <HAL_GetTick>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d9f7      	bls.n	800aa08 <main+0x48>
  {
 800aa18:	e7eb      	b.n	800a9f2 <main+0x32>
 800aa1a:	bf00      	nop
 800aa1c:	20000008 	.word	0x20000008
 800aa20:	48000800 	.word	0x48000800
 800aa24:	200000ac 	.word	0x200000ac
 800aa28:	20000010 	.word	0x20000010
 800aa2c:	0800b7fc 	.word	0x0800b7fc

0800aa30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b0a6      	sub	sp, #152	; 0x98
 800aa34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800aa36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800aa3a:	2228      	movs	r2, #40	; 0x28
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f000 fac2 	bl	800afc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800aa44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800aa48:	2200      	movs	r2, #0
 800aa4a:	601a      	str	r2, [r3, #0]
 800aa4c:	605a      	str	r2, [r3, #4]
 800aa4e:	609a      	str	r2, [r3, #8]
 800aa50:	60da      	str	r2, [r3, #12]
 800aa52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800aa54:	1d3b      	adds	r3, r7, #4
 800aa56:	2258      	movs	r2, #88	; 0x58
 800aa58:	2100      	movs	r1, #0
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f000 fab4 	bl	800afc8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800aa60:	2302      	movs	r3, #2
 800aa62:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800aa64:	2301      	movs	r3, #1
 800aa66:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800aa68:	2310      	movs	r3, #16
 800aa6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800aa74:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7fe f83d 	bl	8008af8 <HAL_RCC_OscConfig>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d001      	beq.n	800aa88 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800aa84:	f000 f8f6 	bl	800ac74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800aa88:	230f      	movs	r3, #15
 800aa8a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800aa90:	2300      	movs	r3, #0
 800aa92:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800aa94:	2300      	movs	r3, #0
 800aa96:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800aa9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7fe ff16 	bl	80098d4 <HAL_RCC_ClockConfig>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d001      	beq.n	800aab2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800aaae:	f000 f8e1 	bl	800ac74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800aab2:	2302      	movs	r3, #2
 800aab4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800aab6:	2300      	movs	r3, #0
 800aab8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800aaba:	1d3b      	adds	r3, r7, #4
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7ff f93f 	bl	8009d40 <HAL_RCCEx_PeriphCLKConfig>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d001      	beq.n	800aacc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800aac8:	f000 f8d4 	bl	800ac74 <Error_Handler>
  }
}
 800aacc:	bf00      	nop
 800aace:	3798      	adds	r7, #152	; 0x98
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800aad8:	4b0d      	ldr	r3, [pc, #52]	; (800ab10 <MX_CRC_Init+0x3c>)
 800aada:	4a0e      	ldr	r2, [pc, #56]	; (800ab14 <MX_CRC_Init+0x40>)
 800aadc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800aade:	4b0c      	ldr	r3, [pc, #48]	; (800ab10 <MX_CRC_Init+0x3c>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800aae4:	4b0a      	ldr	r3, [pc, #40]	; (800ab10 <MX_CRC_Init+0x3c>)
 800aae6:	2200      	movs	r2, #0
 800aae8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800aaea:	4b09      	ldr	r3, [pc, #36]	; (800ab10 <MX_CRC_Init+0x3c>)
 800aaec:	2200      	movs	r2, #0
 800aaee:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800aaf0:	4b07      	ldr	r3, [pc, #28]	; (800ab10 <MX_CRC_Init+0x3c>)
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800aaf6:	4b06      	ldr	r3, [pc, #24]	; (800ab10 <MX_CRC_Init+0x3c>)
 800aaf8:	2201      	movs	r2, #1
 800aafa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800aafc:	4804      	ldr	r0, [pc, #16]	; (800ab10 <MX_CRC_Init+0x3c>)
 800aafe:	f7fd fd3b 	bl	8008578 <HAL_CRC_Init>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d001      	beq.n	800ab0c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800ab08:	f000 f8b4 	bl	800ac74 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800ab0c:	bf00      	nop
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	200000c0 	.word	0x200000c0
 800ab14:	40023000 	.word	0x40023000

0800ab18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800ab1c:	4b14      	ldr	r3, [pc, #80]	; (800ab70 <MX_USART2_UART_Init+0x58>)
 800ab1e:	4a15      	ldr	r2, [pc, #84]	; (800ab74 <MX_USART2_UART_Init+0x5c>)
 800ab20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800ab22:	4b13      	ldr	r3, [pc, #76]	; (800ab70 <MX_USART2_UART_Init+0x58>)
 800ab24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ab28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800ab2a:	4b11      	ldr	r3, [pc, #68]	; (800ab70 <MX_USART2_UART_Init+0x58>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800ab30:	4b0f      	ldr	r3, [pc, #60]	; (800ab70 <MX_USART2_UART_Init+0x58>)
 800ab32:	2200      	movs	r2, #0
 800ab34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800ab36:	4b0e      	ldr	r3, [pc, #56]	; (800ab70 <MX_USART2_UART_Init+0x58>)
 800ab38:	2200      	movs	r2, #0
 800ab3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ab3c:	4b0c      	ldr	r3, [pc, #48]	; (800ab70 <MX_USART2_UART_Init+0x58>)
 800ab3e:	220c      	movs	r2, #12
 800ab40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ab42:	4b0b      	ldr	r3, [pc, #44]	; (800ab70 <MX_USART2_UART_Init+0x58>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800ab48:	4b09      	ldr	r3, [pc, #36]	; (800ab70 <MX_USART2_UART_Init+0x58>)
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ab4e:	4b08      	ldr	r3, [pc, #32]	; (800ab70 <MX_USART2_UART_Init+0x58>)
 800ab50:	2200      	movs	r2, #0
 800ab52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ab54:	4b06      	ldr	r3, [pc, #24]	; (800ab70 <MX_USART2_UART_Init+0x58>)
 800ab56:	2200      	movs	r2, #0
 800ab58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800ab5a:	4805      	ldr	r0, [pc, #20]	; (800ab70 <MX_USART2_UART_Init+0x58>)
 800ab5c:	f7ff fb0c 	bl	800a178 <HAL_UART_Init>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800ab66:	f000 f885 	bl	800ac74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800ab6a:	bf00      	nop
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	200000e4 	.word	0x200000e4
 800ab74:	40004400 	.word	0x40004400

0800ab78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b088      	sub	sp, #32
 800ab7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab7e:	f107 030c 	add.w	r3, r7, #12
 800ab82:	2200      	movs	r2, #0
 800ab84:	601a      	str	r2, [r3, #0]
 800ab86:	605a      	str	r2, [r3, #4]
 800ab88:	609a      	str	r2, [r3, #8]
 800ab8a:	60da      	str	r2, [r3, #12]
 800ab8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ab8e:	4b23      	ldr	r3, [pc, #140]	; (800ac1c <MX_GPIO_Init+0xa4>)
 800ab90:	695b      	ldr	r3, [r3, #20]
 800ab92:	4a22      	ldr	r2, [pc, #136]	; (800ac1c <MX_GPIO_Init+0xa4>)
 800ab94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab98:	6153      	str	r3, [r2, #20]
 800ab9a:	4b20      	ldr	r3, [pc, #128]	; (800ac1c <MX_GPIO_Init+0xa4>)
 800ab9c:	695b      	ldr	r3, [r3, #20]
 800ab9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aba2:	60bb      	str	r3, [r7, #8]
 800aba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800aba6:	4b1d      	ldr	r3, [pc, #116]	; (800ac1c <MX_GPIO_Init+0xa4>)
 800aba8:	695b      	ldr	r3, [r3, #20]
 800abaa:	4a1c      	ldr	r2, [pc, #112]	; (800ac1c <MX_GPIO_Init+0xa4>)
 800abac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abb0:	6153      	str	r3, [r2, #20]
 800abb2:	4b1a      	ldr	r3, [pc, #104]	; (800ac1c <MX_GPIO_Init+0xa4>)
 800abb4:	695b      	ldr	r3, [r3, #20]
 800abb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abba:	607b      	str	r3, [r7, #4]
 800abbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800abbe:	2200      	movs	r2, #0
 800abc0:	2120      	movs	r1, #32
 800abc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800abc6:	f7fd ff5b 	bl	8008a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800abca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800abce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800abd0:	4b13      	ldr	r3, [pc, #76]	; (800ac20 <MX_GPIO_Init+0xa8>)
 800abd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abd4:	2300      	movs	r3, #0
 800abd6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800abd8:	f107 030c 	add.w	r3, r7, #12
 800abdc:	4619      	mov	r1, r3
 800abde:	4811      	ldr	r0, [pc, #68]	; (800ac24 <MX_GPIO_Init+0xac>)
 800abe0:	f7fd fda8 	bl	8008734 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800abe4:	2320      	movs	r3, #32
 800abe6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800abe8:	2301      	movs	r3, #1
 800abea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abec:	2300      	movs	r3, #0
 800abee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abf0:	2300      	movs	r3, #0
 800abf2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800abf4:	f107 030c 	add.w	r3, r7, #12
 800abf8:	4619      	mov	r1, r3
 800abfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800abfe:	f7fd fd99 	bl	8008734 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800ac02:	2200      	movs	r2, #0
 800ac04:	2100      	movs	r1, #0
 800ac06:	2028      	movs	r0, #40	; 0x28
 800ac08:	f7fd fc7f 	bl	800850a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800ac0c:	2028      	movs	r0, #40	; 0x28
 800ac0e:	f7fd fc98 	bl	8008542 <HAL_NVIC_EnableIRQ>

}
 800ac12:	bf00      	nop
 800ac14:	3720      	adds	r7, #32
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	40021000 	.word	0x40021000
 800ac20:	10210000 	.word	0x10210000
 800ac24:	48000800 	.word	0x48000800

0800ac28 <printmsg>:
/* USER CODE BEGIN 4 */

/**************Implementation of Boot-loader Command Handle functions *********/

void printmsg(char *format,...)
{
 800ac28:	b40f      	push	{r0, r1, r2, r3}
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b096      	sub	sp, #88	; 0x58
 800ac2e:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];
	va_list args;
	va_start(args,format);
 800ac30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ac34:	607b      	str	r3, [r7, #4]
	vsprintf(str,format,args);
 800ac36:	f107 0308 	add.w	r3, r7, #8
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f000 f9e0 	bl	800b004 <vsiprintf>
	HAL_UART_Transmit(D_UART,(uint8_t*)str,strlen(str),HAL_MAX_DELAY);
 800ac44:	f107 0308 	add.w	r3, r7, #8
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7fd fac9 	bl	80081e0 <strlen>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	b29a      	uxth	r2, r3
 800ac52:	f107 0108 	add.w	r1, r7, #8
 800ac56:	f04f 33ff 	mov.w	r3, #4294967295
 800ac5a:	4805      	ldr	r0, [pc, #20]	; (800ac70 <printmsg+0x48>)
 800ac5c:	f7ff fadd 	bl	800a21a <HAL_UART_Transmit>
	va_end(args);
#endif
}
 800ac60:	bf00      	nop
 800ac62:	3758      	adds	r7, #88	; 0x58
 800ac64:	46bd      	mov	sp, r7
 800ac66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac6a:	b004      	add	sp, #16
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	200000e4 	.word	0x200000e4

0800ac74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ac74:	b480      	push	{r7}
 800ac76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ac78:	bf00      	nop
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
	...

0800ac84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac8a:	4b0f      	ldr	r3, [pc, #60]	; (800acc8 <HAL_MspInit+0x44>)
 800ac8c:	699b      	ldr	r3, [r3, #24]
 800ac8e:	4a0e      	ldr	r2, [pc, #56]	; (800acc8 <HAL_MspInit+0x44>)
 800ac90:	f043 0301 	orr.w	r3, r3, #1
 800ac94:	6193      	str	r3, [r2, #24]
 800ac96:	4b0c      	ldr	r3, [pc, #48]	; (800acc8 <HAL_MspInit+0x44>)
 800ac98:	699b      	ldr	r3, [r3, #24]
 800ac9a:	f003 0301 	and.w	r3, r3, #1
 800ac9e:	607b      	str	r3, [r7, #4]
 800aca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800aca2:	4b09      	ldr	r3, [pc, #36]	; (800acc8 <HAL_MspInit+0x44>)
 800aca4:	69db      	ldr	r3, [r3, #28]
 800aca6:	4a08      	ldr	r2, [pc, #32]	; (800acc8 <HAL_MspInit+0x44>)
 800aca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acac:	61d3      	str	r3, [r2, #28]
 800acae:	4b06      	ldr	r3, [pc, #24]	; (800acc8 <HAL_MspInit+0x44>)
 800acb0:	69db      	ldr	r3, [r3, #28]
 800acb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acb6:	603b      	str	r3, [r7, #0]
 800acb8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800acba:	2007      	movs	r0, #7
 800acbc:	f7fd fc1a 	bl	80084f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800acc0:	bf00      	nop
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	40021000 	.word	0x40021000

0800accc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800accc:	b480      	push	{r7}
 800acce:	b085      	sub	sp, #20
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a0a      	ldr	r2, [pc, #40]	; (800ad04 <HAL_CRC_MspInit+0x38>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d10b      	bne.n	800acf6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800acde:	4b0a      	ldr	r3, [pc, #40]	; (800ad08 <HAL_CRC_MspInit+0x3c>)
 800ace0:	695b      	ldr	r3, [r3, #20]
 800ace2:	4a09      	ldr	r2, [pc, #36]	; (800ad08 <HAL_CRC_MspInit+0x3c>)
 800ace4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ace8:	6153      	str	r3, [r2, #20]
 800acea:	4b07      	ldr	r3, [pc, #28]	; (800ad08 <HAL_CRC_MspInit+0x3c>)
 800acec:	695b      	ldr	r3, [r3, #20]
 800acee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acf2:	60fb      	str	r3, [r7, #12]
 800acf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800acf6:	bf00      	nop
 800acf8:	3714      	adds	r7, #20
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
 800ad02:	bf00      	nop
 800ad04:	40023000 	.word	0x40023000
 800ad08:	40021000 	.word	0x40021000

0800ad0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b08a      	sub	sp, #40	; 0x28
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad14:	f107 0314 	add.w	r3, r7, #20
 800ad18:	2200      	movs	r2, #0
 800ad1a:	601a      	str	r2, [r3, #0]
 800ad1c:	605a      	str	r2, [r3, #4]
 800ad1e:	609a      	str	r2, [r3, #8]
 800ad20:	60da      	str	r2, [r3, #12]
 800ad22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a17      	ldr	r2, [pc, #92]	; (800ad88 <HAL_UART_MspInit+0x7c>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d128      	bne.n	800ad80 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800ad2e:	4b17      	ldr	r3, [pc, #92]	; (800ad8c <HAL_UART_MspInit+0x80>)
 800ad30:	69db      	ldr	r3, [r3, #28]
 800ad32:	4a16      	ldr	r2, [pc, #88]	; (800ad8c <HAL_UART_MspInit+0x80>)
 800ad34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad38:	61d3      	str	r3, [r2, #28]
 800ad3a:	4b14      	ldr	r3, [pc, #80]	; (800ad8c <HAL_UART_MspInit+0x80>)
 800ad3c:	69db      	ldr	r3, [r3, #28]
 800ad3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad42:	613b      	str	r3, [r7, #16]
 800ad44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad46:	4b11      	ldr	r3, [pc, #68]	; (800ad8c <HAL_UART_MspInit+0x80>)
 800ad48:	695b      	ldr	r3, [r3, #20]
 800ad4a:	4a10      	ldr	r2, [pc, #64]	; (800ad8c <HAL_UART_MspInit+0x80>)
 800ad4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad50:	6153      	str	r3, [r2, #20]
 800ad52:	4b0e      	ldr	r3, [pc, #56]	; (800ad8c <HAL_UART_MspInit+0x80>)
 800ad54:	695b      	ldr	r3, [r3, #20]
 800ad56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad5a:	60fb      	str	r3, [r7, #12]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800ad5e:	230c      	movs	r3, #12
 800ad60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad62:	2302      	movs	r3, #2
 800ad64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad66:	2300      	movs	r3, #0
 800ad68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ad6a:	2303      	movs	r3, #3
 800ad6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ad6e:	2307      	movs	r3, #7
 800ad70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad72:	f107 0314 	add.w	r3, r7, #20
 800ad76:	4619      	mov	r1, r3
 800ad78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ad7c:	f7fd fcda 	bl	8008734 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800ad80:	bf00      	nop
 800ad82:	3728      	adds	r7, #40	; 0x28
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	40004400 	.word	0x40004400
 800ad8c:	40021000 	.word	0x40021000

0800ad90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ad90:	b480      	push	{r7}
 800ad92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ad94:	bf00      	nop
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr

0800ad9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ad9e:	b480      	push	{r7}
 800ada0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ada2:	e7fe      	b.n	800ada2 <HardFault_Handler+0x4>

0800ada4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ada4:	b480      	push	{r7}
 800ada6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ada8:	e7fe      	b.n	800ada8 <MemManage_Handler+0x4>

0800adaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800adaa:	b480      	push	{r7}
 800adac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800adae:	e7fe      	b.n	800adae <BusFault_Handler+0x4>

0800adb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800adb0:	b480      	push	{r7}
 800adb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800adb4:	e7fe      	b.n	800adb4 <UsageFault_Handler+0x4>

0800adb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800adb6:	b480      	push	{r7}
 800adb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800adba:	bf00      	nop
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800adc4:	b480      	push	{r7}
 800adc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800adc8:	bf00      	nop
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr

0800add2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800add2:	b480      	push	{r7}
 800add4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800add6:	bf00      	nop
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr

0800ade0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ade4:	f7fd fa9a 	bl	800831c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ade8:	bf00      	nop
 800adea:	bd80      	pop	{r7, pc}

0800adec <EXTI15_10_IRQHandler>:
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
uint8_t flag =0;
void EXTI15_10_IRQHandler(void)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, !flag);
 800adf0:	4b0e      	ldr	r3, [pc, #56]	; (800ae2c <EXTI15_10_IRQHandler+0x40>)
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	bf0c      	ite	eq
 800adf8:	2301      	moveq	r3, #1
 800adfa:	2300      	movne	r3, #0
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	461a      	mov	r2, r3
 800ae00:	2120      	movs	r1, #32
 800ae02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae06:	f7fd fe3b 	bl	8008a80 <HAL_GPIO_WritePin>
	flag = !flag;
 800ae0a:	4b08      	ldr	r3, [pc, #32]	; (800ae2c <EXTI15_10_IRQHandler+0x40>)
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	bf0c      	ite	eq
 800ae12:	2301      	moveq	r3, #1
 800ae14:	2300      	movne	r3, #0
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	461a      	mov	r2, r3
 800ae1a:	4b04      	ldr	r3, [pc, #16]	; (800ae2c <EXTI15_10_IRQHandler+0x40>)
 800ae1c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800ae1e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ae22:	f7fd fe45 	bl	8008ab0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800ae26:	bf00      	nop
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	200000ad 	.word	0x200000ad

0800ae30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ae38:	4b11      	ldr	r3, [pc, #68]	; (800ae80 <_sbrk+0x50>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d102      	bne.n	800ae46 <_sbrk+0x16>
		heap_end = &end;
 800ae40:	4b0f      	ldr	r3, [pc, #60]	; (800ae80 <_sbrk+0x50>)
 800ae42:	4a10      	ldr	r2, [pc, #64]	; (800ae84 <_sbrk+0x54>)
 800ae44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800ae46:	4b0e      	ldr	r3, [pc, #56]	; (800ae80 <_sbrk+0x50>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800ae4c:	4b0c      	ldr	r3, [pc, #48]	; (800ae80 <_sbrk+0x50>)
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4413      	add	r3, r2
 800ae54:	466a      	mov	r2, sp
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d907      	bls.n	800ae6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800ae5a:	f000 f88b 	bl	800af74 <__errno>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	230c      	movs	r3, #12
 800ae62:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800ae64:	f04f 33ff 	mov.w	r3, #4294967295
 800ae68:	e006      	b.n	800ae78 <_sbrk+0x48>
	}

	heap_end += incr;
 800ae6a:	4b05      	ldr	r3, [pc, #20]	; (800ae80 <_sbrk+0x50>)
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4413      	add	r3, r2
 800ae72:	4a03      	ldr	r2, [pc, #12]	; (800ae80 <_sbrk+0x50>)
 800ae74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800ae76:	68fb      	ldr	r3, [r7, #12]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3710      	adds	r7, #16
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	200000b0 	.word	0x200000b0
 800ae84:	20000158 	.word	0x20000158

0800ae88 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ae8c:	4b1f      	ldr	r3, [pc, #124]	; (800af0c <SystemInit+0x84>)
 800ae8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae92:	4a1e      	ldr	r2, [pc, #120]	; (800af0c <SystemInit+0x84>)
 800ae94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800ae9c:	4b1c      	ldr	r3, [pc, #112]	; (800af10 <SystemInit+0x88>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a1b      	ldr	r2, [pc, #108]	; (800af10 <SystemInit+0x88>)
 800aea2:	f043 0301 	orr.w	r3, r3, #1
 800aea6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800aea8:	4b19      	ldr	r3, [pc, #100]	; (800af10 <SystemInit+0x88>)
 800aeaa:	685a      	ldr	r2, [r3, #4]
 800aeac:	4918      	ldr	r1, [pc, #96]	; (800af10 <SystemInit+0x88>)
 800aeae:	4b19      	ldr	r3, [pc, #100]	; (800af14 <SystemInit+0x8c>)
 800aeb0:	4013      	ands	r3, r2
 800aeb2:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800aeb4:	4b16      	ldr	r3, [pc, #88]	; (800af10 <SystemInit+0x88>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a15      	ldr	r2, [pc, #84]	; (800af10 <SystemInit+0x88>)
 800aeba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800aebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aec2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800aec4:	4b12      	ldr	r3, [pc, #72]	; (800af10 <SystemInit+0x88>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4a11      	ldr	r2, [pc, #68]	; (800af10 <SystemInit+0x88>)
 800aeca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aece:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800aed0:	4b0f      	ldr	r3, [pc, #60]	; (800af10 <SystemInit+0x88>)
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	4a0e      	ldr	r2, [pc, #56]	; (800af10 <SystemInit+0x88>)
 800aed6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800aeda:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800aedc:	4b0c      	ldr	r3, [pc, #48]	; (800af10 <SystemInit+0x88>)
 800aede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee0:	4a0b      	ldr	r2, [pc, #44]	; (800af10 <SystemInit+0x88>)
 800aee2:	f023 030f 	bic.w	r3, r3, #15
 800aee6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800aee8:	4b09      	ldr	r3, [pc, #36]	; (800af10 <SystemInit+0x88>)
 800aeea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aeec:	4908      	ldr	r1, [pc, #32]	; (800af10 <SystemInit+0x88>)
 800aeee:	4b0a      	ldr	r3, [pc, #40]	; (800af18 <SystemInit+0x90>)
 800aef0:	4013      	ands	r3, r2
 800aef2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800aef4:	4b06      	ldr	r3, [pc, #24]	; (800af10 <SystemInit+0x88>)
 800aef6:	2200      	movs	r2, #0
 800aef8:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800aefa:	4b04      	ldr	r3, [pc, #16]	; (800af0c <SystemInit+0x84>)
 800aefc:	4a07      	ldr	r2, [pc, #28]	; (800af1c <SystemInit+0x94>)
 800aefe:	609a      	str	r2, [r3, #8]
#endif
}
 800af00:	bf00      	nop
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	e000ed00 	.word	0xe000ed00
 800af10:	40021000 	.word	0x40021000
 800af14:	f87fc00c 	.word	0xf87fc00c
 800af18:	ff00fccc 	.word	0xff00fccc
 800af1c:	08008000 	.word	0x08008000

0800af20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800af20:	f8df d034 	ldr.w	sp, [pc, #52]	; 800af58 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800af24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800af26:	e003      	b.n	800af30 <LoopCopyDataInit>

0800af28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800af28:	4b0c      	ldr	r3, [pc, #48]	; (800af5c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800af2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800af2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800af2e:	3104      	adds	r1, #4

0800af30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800af30:	480b      	ldr	r0, [pc, #44]	; (800af60 <LoopForever+0xa>)
	ldr	r3, =_edata
 800af32:	4b0c      	ldr	r3, [pc, #48]	; (800af64 <LoopForever+0xe>)
	adds	r2, r0, r1
 800af34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800af36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800af38:	d3f6      	bcc.n	800af28 <CopyDataInit>
	ldr	r2, =_sbss
 800af3a:	4a0b      	ldr	r2, [pc, #44]	; (800af68 <LoopForever+0x12>)
	b	LoopFillZerobss
 800af3c:	e002      	b.n	800af44 <LoopFillZerobss>

0800af3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800af3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800af40:	f842 3b04 	str.w	r3, [r2], #4

0800af44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800af44:	4b09      	ldr	r3, [pc, #36]	; (800af6c <LoopForever+0x16>)
	cmp	r2, r3
 800af46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800af48:	d3f9      	bcc.n	800af3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800af4a:	f7ff ff9d 	bl	800ae88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800af4e:	f000 f817 	bl	800af80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800af52:	f7ff fd35 	bl	800a9c0 <main>

0800af56 <LoopForever>:

LoopForever:
    b LoopForever
 800af56:	e7fe      	b.n	800af56 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800af58:	2000ffff 	.word	0x2000ffff
	ldr	r3, =_sidata
 800af5c:	0800b884 	.word	0x0800b884
	ldr	r0, =_sdata
 800af60:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800af64:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 800af68:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 800af6c:	20000158 	.word	0x20000158

0800af70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800af70:	e7fe      	b.n	800af70 <ADC1_2_IRQHandler>
	...

0800af74 <__errno>:
 800af74:	4b01      	ldr	r3, [pc, #4]	; (800af7c <__errno+0x8>)
 800af76:	6818      	ldr	r0, [r3, #0]
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	2000002c 	.word	0x2000002c

0800af80 <__libc_init_array>:
 800af80:	b570      	push	{r4, r5, r6, lr}
 800af82:	4e0d      	ldr	r6, [pc, #52]	; (800afb8 <__libc_init_array+0x38>)
 800af84:	4c0d      	ldr	r4, [pc, #52]	; (800afbc <__libc_init_array+0x3c>)
 800af86:	1ba4      	subs	r4, r4, r6
 800af88:	10a4      	asrs	r4, r4, #2
 800af8a:	2500      	movs	r5, #0
 800af8c:	42a5      	cmp	r5, r4
 800af8e:	d109      	bne.n	800afa4 <__libc_init_array+0x24>
 800af90:	4e0b      	ldr	r6, [pc, #44]	; (800afc0 <__libc_init_array+0x40>)
 800af92:	4c0c      	ldr	r4, [pc, #48]	; (800afc4 <__libc_init_array+0x44>)
 800af94:	f000 fc26 	bl	800b7e4 <_init>
 800af98:	1ba4      	subs	r4, r4, r6
 800af9a:	10a4      	asrs	r4, r4, #2
 800af9c:	2500      	movs	r5, #0
 800af9e:	42a5      	cmp	r5, r4
 800afa0:	d105      	bne.n	800afae <__libc_init_array+0x2e>
 800afa2:	bd70      	pop	{r4, r5, r6, pc}
 800afa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800afa8:	4798      	blx	r3
 800afaa:	3501      	adds	r5, #1
 800afac:	e7ee      	b.n	800af8c <__libc_init_array+0xc>
 800afae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800afb2:	4798      	blx	r3
 800afb4:	3501      	adds	r5, #1
 800afb6:	e7f2      	b.n	800af9e <__libc_init_array+0x1e>
 800afb8:	0800b87c 	.word	0x0800b87c
 800afbc:	0800b87c 	.word	0x0800b87c
 800afc0:	0800b87c 	.word	0x0800b87c
 800afc4:	0800b880 	.word	0x0800b880

0800afc8 <memset>:
 800afc8:	4402      	add	r2, r0
 800afca:	4603      	mov	r3, r0
 800afcc:	4293      	cmp	r3, r2
 800afce:	d100      	bne.n	800afd2 <memset+0xa>
 800afd0:	4770      	bx	lr
 800afd2:	f803 1b01 	strb.w	r1, [r3], #1
 800afd6:	e7f9      	b.n	800afcc <memset+0x4>

0800afd8 <_vsiprintf_r>:
 800afd8:	b500      	push	{lr}
 800afda:	b09b      	sub	sp, #108	; 0x6c
 800afdc:	9100      	str	r1, [sp, #0]
 800afde:	9104      	str	r1, [sp, #16]
 800afe0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800afe4:	9105      	str	r1, [sp, #20]
 800afe6:	9102      	str	r1, [sp, #8]
 800afe8:	4905      	ldr	r1, [pc, #20]	; (800b000 <_vsiprintf_r+0x28>)
 800afea:	9103      	str	r1, [sp, #12]
 800afec:	4669      	mov	r1, sp
 800afee:	f000 f86d 	bl	800b0cc <_svfiprintf_r>
 800aff2:	9b00      	ldr	r3, [sp, #0]
 800aff4:	2200      	movs	r2, #0
 800aff6:	701a      	strb	r2, [r3, #0]
 800aff8:	b01b      	add	sp, #108	; 0x6c
 800affa:	f85d fb04 	ldr.w	pc, [sp], #4
 800affe:	bf00      	nop
 800b000:	ffff0208 	.word	0xffff0208

0800b004 <vsiprintf>:
 800b004:	4613      	mov	r3, r2
 800b006:	460a      	mov	r2, r1
 800b008:	4601      	mov	r1, r0
 800b00a:	4802      	ldr	r0, [pc, #8]	; (800b014 <vsiprintf+0x10>)
 800b00c:	6800      	ldr	r0, [r0, #0]
 800b00e:	f7ff bfe3 	b.w	800afd8 <_vsiprintf_r>
 800b012:	bf00      	nop
 800b014:	2000002c 	.word	0x2000002c

0800b018 <__ssputs_r>:
 800b018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b01c:	688e      	ldr	r6, [r1, #8]
 800b01e:	429e      	cmp	r6, r3
 800b020:	4682      	mov	sl, r0
 800b022:	460c      	mov	r4, r1
 800b024:	4690      	mov	r8, r2
 800b026:	4699      	mov	r9, r3
 800b028:	d837      	bhi.n	800b09a <__ssputs_r+0x82>
 800b02a:	898a      	ldrh	r2, [r1, #12]
 800b02c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b030:	d031      	beq.n	800b096 <__ssputs_r+0x7e>
 800b032:	6825      	ldr	r5, [r4, #0]
 800b034:	6909      	ldr	r1, [r1, #16]
 800b036:	1a6f      	subs	r7, r5, r1
 800b038:	6965      	ldr	r5, [r4, #20]
 800b03a:	2302      	movs	r3, #2
 800b03c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b040:	fb95 f5f3 	sdiv	r5, r5, r3
 800b044:	f109 0301 	add.w	r3, r9, #1
 800b048:	443b      	add	r3, r7
 800b04a:	429d      	cmp	r5, r3
 800b04c:	bf38      	it	cc
 800b04e:	461d      	movcc	r5, r3
 800b050:	0553      	lsls	r3, r2, #21
 800b052:	d530      	bpl.n	800b0b6 <__ssputs_r+0x9e>
 800b054:	4629      	mov	r1, r5
 800b056:	f000 fb2b 	bl	800b6b0 <_malloc_r>
 800b05a:	4606      	mov	r6, r0
 800b05c:	b950      	cbnz	r0, 800b074 <__ssputs_r+0x5c>
 800b05e:	230c      	movs	r3, #12
 800b060:	f8ca 3000 	str.w	r3, [sl]
 800b064:	89a3      	ldrh	r3, [r4, #12]
 800b066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b06a:	81a3      	strh	r3, [r4, #12]
 800b06c:	f04f 30ff 	mov.w	r0, #4294967295
 800b070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b074:	463a      	mov	r2, r7
 800b076:	6921      	ldr	r1, [r4, #16]
 800b078:	f000 faa8 	bl	800b5cc <memcpy>
 800b07c:	89a3      	ldrh	r3, [r4, #12]
 800b07e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b086:	81a3      	strh	r3, [r4, #12]
 800b088:	6126      	str	r6, [r4, #16]
 800b08a:	6165      	str	r5, [r4, #20]
 800b08c:	443e      	add	r6, r7
 800b08e:	1bed      	subs	r5, r5, r7
 800b090:	6026      	str	r6, [r4, #0]
 800b092:	60a5      	str	r5, [r4, #8]
 800b094:	464e      	mov	r6, r9
 800b096:	454e      	cmp	r6, r9
 800b098:	d900      	bls.n	800b09c <__ssputs_r+0x84>
 800b09a:	464e      	mov	r6, r9
 800b09c:	4632      	mov	r2, r6
 800b09e:	4641      	mov	r1, r8
 800b0a0:	6820      	ldr	r0, [r4, #0]
 800b0a2:	f000 fa9e 	bl	800b5e2 <memmove>
 800b0a6:	68a3      	ldr	r3, [r4, #8]
 800b0a8:	1b9b      	subs	r3, r3, r6
 800b0aa:	60a3      	str	r3, [r4, #8]
 800b0ac:	6823      	ldr	r3, [r4, #0]
 800b0ae:	441e      	add	r6, r3
 800b0b0:	6026      	str	r6, [r4, #0]
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	e7dc      	b.n	800b070 <__ssputs_r+0x58>
 800b0b6:	462a      	mov	r2, r5
 800b0b8:	f000 fb54 	bl	800b764 <_realloc_r>
 800b0bc:	4606      	mov	r6, r0
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d1e2      	bne.n	800b088 <__ssputs_r+0x70>
 800b0c2:	6921      	ldr	r1, [r4, #16]
 800b0c4:	4650      	mov	r0, sl
 800b0c6:	f000 faa5 	bl	800b614 <_free_r>
 800b0ca:	e7c8      	b.n	800b05e <__ssputs_r+0x46>

0800b0cc <_svfiprintf_r>:
 800b0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d0:	461d      	mov	r5, r3
 800b0d2:	898b      	ldrh	r3, [r1, #12]
 800b0d4:	061f      	lsls	r7, r3, #24
 800b0d6:	b09d      	sub	sp, #116	; 0x74
 800b0d8:	4680      	mov	r8, r0
 800b0da:	460c      	mov	r4, r1
 800b0dc:	4616      	mov	r6, r2
 800b0de:	d50f      	bpl.n	800b100 <_svfiprintf_r+0x34>
 800b0e0:	690b      	ldr	r3, [r1, #16]
 800b0e2:	b96b      	cbnz	r3, 800b100 <_svfiprintf_r+0x34>
 800b0e4:	2140      	movs	r1, #64	; 0x40
 800b0e6:	f000 fae3 	bl	800b6b0 <_malloc_r>
 800b0ea:	6020      	str	r0, [r4, #0]
 800b0ec:	6120      	str	r0, [r4, #16]
 800b0ee:	b928      	cbnz	r0, 800b0fc <_svfiprintf_r+0x30>
 800b0f0:	230c      	movs	r3, #12
 800b0f2:	f8c8 3000 	str.w	r3, [r8]
 800b0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0fa:	e0c8      	b.n	800b28e <_svfiprintf_r+0x1c2>
 800b0fc:	2340      	movs	r3, #64	; 0x40
 800b0fe:	6163      	str	r3, [r4, #20]
 800b100:	2300      	movs	r3, #0
 800b102:	9309      	str	r3, [sp, #36]	; 0x24
 800b104:	2320      	movs	r3, #32
 800b106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b10a:	2330      	movs	r3, #48	; 0x30
 800b10c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b110:	9503      	str	r5, [sp, #12]
 800b112:	f04f 0b01 	mov.w	fp, #1
 800b116:	4637      	mov	r7, r6
 800b118:	463d      	mov	r5, r7
 800b11a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b11e:	b10b      	cbz	r3, 800b124 <_svfiprintf_r+0x58>
 800b120:	2b25      	cmp	r3, #37	; 0x25
 800b122:	d13e      	bne.n	800b1a2 <_svfiprintf_r+0xd6>
 800b124:	ebb7 0a06 	subs.w	sl, r7, r6
 800b128:	d00b      	beq.n	800b142 <_svfiprintf_r+0x76>
 800b12a:	4653      	mov	r3, sl
 800b12c:	4632      	mov	r2, r6
 800b12e:	4621      	mov	r1, r4
 800b130:	4640      	mov	r0, r8
 800b132:	f7ff ff71 	bl	800b018 <__ssputs_r>
 800b136:	3001      	adds	r0, #1
 800b138:	f000 80a4 	beq.w	800b284 <_svfiprintf_r+0x1b8>
 800b13c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b13e:	4453      	add	r3, sl
 800b140:	9309      	str	r3, [sp, #36]	; 0x24
 800b142:	783b      	ldrb	r3, [r7, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	f000 809d 	beq.w	800b284 <_svfiprintf_r+0x1b8>
 800b14a:	2300      	movs	r3, #0
 800b14c:	f04f 32ff 	mov.w	r2, #4294967295
 800b150:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b154:	9304      	str	r3, [sp, #16]
 800b156:	9307      	str	r3, [sp, #28]
 800b158:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b15c:	931a      	str	r3, [sp, #104]	; 0x68
 800b15e:	462f      	mov	r7, r5
 800b160:	2205      	movs	r2, #5
 800b162:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b166:	4850      	ldr	r0, [pc, #320]	; (800b2a8 <_svfiprintf_r+0x1dc>)
 800b168:	f7fd f842 	bl	80081f0 <memchr>
 800b16c:	9b04      	ldr	r3, [sp, #16]
 800b16e:	b9d0      	cbnz	r0, 800b1a6 <_svfiprintf_r+0xda>
 800b170:	06d9      	lsls	r1, r3, #27
 800b172:	bf44      	itt	mi
 800b174:	2220      	movmi	r2, #32
 800b176:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b17a:	071a      	lsls	r2, r3, #28
 800b17c:	bf44      	itt	mi
 800b17e:	222b      	movmi	r2, #43	; 0x2b
 800b180:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b184:	782a      	ldrb	r2, [r5, #0]
 800b186:	2a2a      	cmp	r2, #42	; 0x2a
 800b188:	d015      	beq.n	800b1b6 <_svfiprintf_r+0xea>
 800b18a:	9a07      	ldr	r2, [sp, #28]
 800b18c:	462f      	mov	r7, r5
 800b18e:	2000      	movs	r0, #0
 800b190:	250a      	movs	r5, #10
 800b192:	4639      	mov	r1, r7
 800b194:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b198:	3b30      	subs	r3, #48	; 0x30
 800b19a:	2b09      	cmp	r3, #9
 800b19c:	d94d      	bls.n	800b23a <_svfiprintf_r+0x16e>
 800b19e:	b1b8      	cbz	r0, 800b1d0 <_svfiprintf_r+0x104>
 800b1a0:	e00f      	b.n	800b1c2 <_svfiprintf_r+0xf6>
 800b1a2:	462f      	mov	r7, r5
 800b1a4:	e7b8      	b.n	800b118 <_svfiprintf_r+0x4c>
 800b1a6:	4a40      	ldr	r2, [pc, #256]	; (800b2a8 <_svfiprintf_r+0x1dc>)
 800b1a8:	1a80      	subs	r0, r0, r2
 800b1aa:	fa0b f000 	lsl.w	r0, fp, r0
 800b1ae:	4318      	orrs	r0, r3
 800b1b0:	9004      	str	r0, [sp, #16]
 800b1b2:	463d      	mov	r5, r7
 800b1b4:	e7d3      	b.n	800b15e <_svfiprintf_r+0x92>
 800b1b6:	9a03      	ldr	r2, [sp, #12]
 800b1b8:	1d11      	adds	r1, r2, #4
 800b1ba:	6812      	ldr	r2, [r2, #0]
 800b1bc:	9103      	str	r1, [sp, #12]
 800b1be:	2a00      	cmp	r2, #0
 800b1c0:	db01      	blt.n	800b1c6 <_svfiprintf_r+0xfa>
 800b1c2:	9207      	str	r2, [sp, #28]
 800b1c4:	e004      	b.n	800b1d0 <_svfiprintf_r+0x104>
 800b1c6:	4252      	negs	r2, r2
 800b1c8:	f043 0302 	orr.w	r3, r3, #2
 800b1cc:	9207      	str	r2, [sp, #28]
 800b1ce:	9304      	str	r3, [sp, #16]
 800b1d0:	783b      	ldrb	r3, [r7, #0]
 800b1d2:	2b2e      	cmp	r3, #46	; 0x2e
 800b1d4:	d10c      	bne.n	800b1f0 <_svfiprintf_r+0x124>
 800b1d6:	787b      	ldrb	r3, [r7, #1]
 800b1d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b1da:	d133      	bne.n	800b244 <_svfiprintf_r+0x178>
 800b1dc:	9b03      	ldr	r3, [sp, #12]
 800b1de:	1d1a      	adds	r2, r3, #4
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	9203      	str	r2, [sp, #12]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	bfb8      	it	lt
 800b1e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1ec:	3702      	adds	r7, #2
 800b1ee:	9305      	str	r3, [sp, #20]
 800b1f0:	4d2e      	ldr	r5, [pc, #184]	; (800b2ac <_svfiprintf_r+0x1e0>)
 800b1f2:	7839      	ldrb	r1, [r7, #0]
 800b1f4:	2203      	movs	r2, #3
 800b1f6:	4628      	mov	r0, r5
 800b1f8:	f7fc fffa 	bl	80081f0 <memchr>
 800b1fc:	b138      	cbz	r0, 800b20e <_svfiprintf_r+0x142>
 800b1fe:	2340      	movs	r3, #64	; 0x40
 800b200:	1b40      	subs	r0, r0, r5
 800b202:	fa03 f000 	lsl.w	r0, r3, r0
 800b206:	9b04      	ldr	r3, [sp, #16]
 800b208:	4303      	orrs	r3, r0
 800b20a:	3701      	adds	r7, #1
 800b20c:	9304      	str	r3, [sp, #16]
 800b20e:	7839      	ldrb	r1, [r7, #0]
 800b210:	4827      	ldr	r0, [pc, #156]	; (800b2b0 <_svfiprintf_r+0x1e4>)
 800b212:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b216:	2206      	movs	r2, #6
 800b218:	1c7e      	adds	r6, r7, #1
 800b21a:	f7fc ffe9 	bl	80081f0 <memchr>
 800b21e:	2800      	cmp	r0, #0
 800b220:	d038      	beq.n	800b294 <_svfiprintf_r+0x1c8>
 800b222:	4b24      	ldr	r3, [pc, #144]	; (800b2b4 <_svfiprintf_r+0x1e8>)
 800b224:	bb13      	cbnz	r3, 800b26c <_svfiprintf_r+0x1a0>
 800b226:	9b03      	ldr	r3, [sp, #12]
 800b228:	3307      	adds	r3, #7
 800b22a:	f023 0307 	bic.w	r3, r3, #7
 800b22e:	3308      	adds	r3, #8
 800b230:	9303      	str	r3, [sp, #12]
 800b232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b234:	444b      	add	r3, r9
 800b236:	9309      	str	r3, [sp, #36]	; 0x24
 800b238:	e76d      	b.n	800b116 <_svfiprintf_r+0x4a>
 800b23a:	fb05 3202 	mla	r2, r5, r2, r3
 800b23e:	2001      	movs	r0, #1
 800b240:	460f      	mov	r7, r1
 800b242:	e7a6      	b.n	800b192 <_svfiprintf_r+0xc6>
 800b244:	2300      	movs	r3, #0
 800b246:	3701      	adds	r7, #1
 800b248:	9305      	str	r3, [sp, #20]
 800b24a:	4619      	mov	r1, r3
 800b24c:	250a      	movs	r5, #10
 800b24e:	4638      	mov	r0, r7
 800b250:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b254:	3a30      	subs	r2, #48	; 0x30
 800b256:	2a09      	cmp	r2, #9
 800b258:	d903      	bls.n	800b262 <_svfiprintf_r+0x196>
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d0c8      	beq.n	800b1f0 <_svfiprintf_r+0x124>
 800b25e:	9105      	str	r1, [sp, #20]
 800b260:	e7c6      	b.n	800b1f0 <_svfiprintf_r+0x124>
 800b262:	fb05 2101 	mla	r1, r5, r1, r2
 800b266:	2301      	movs	r3, #1
 800b268:	4607      	mov	r7, r0
 800b26a:	e7f0      	b.n	800b24e <_svfiprintf_r+0x182>
 800b26c:	ab03      	add	r3, sp, #12
 800b26e:	9300      	str	r3, [sp, #0]
 800b270:	4622      	mov	r2, r4
 800b272:	4b11      	ldr	r3, [pc, #68]	; (800b2b8 <_svfiprintf_r+0x1ec>)
 800b274:	a904      	add	r1, sp, #16
 800b276:	4640      	mov	r0, r8
 800b278:	f3af 8000 	nop.w
 800b27c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b280:	4681      	mov	r9, r0
 800b282:	d1d6      	bne.n	800b232 <_svfiprintf_r+0x166>
 800b284:	89a3      	ldrh	r3, [r4, #12]
 800b286:	065b      	lsls	r3, r3, #25
 800b288:	f53f af35 	bmi.w	800b0f6 <_svfiprintf_r+0x2a>
 800b28c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b28e:	b01d      	add	sp, #116	; 0x74
 800b290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b294:	ab03      	add	r3, sp, #12
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	4622      	mov	r2, r4
 800b29a:	4b07      	ldr	r3, [pc, #28]	; (800b2b8 <_svfiprintf_r+0x1ec>)
 800b29c:	a904      	add	r1, sp, #16
 800b29e:	4640      	mov	r0, r8
 800b2a0:	f000 f882 	bl	800b3a8 <_printf_i>
 800b2a4:	e7ea      	b.n	800b27c <_svfiprintf_r+0x1b0>
 800b2a6:	bf00      	nop
 800b2a8:	0800b848 	.word	0x0800b848
 800b2ac:	0800b84e 	.word	0x0800b84e
 800b2b0:	0800b852 	.word	0x0800b852
 800b2b4:	00000000 	.word	0x00000000
 800b2b8:	0800b019 	.word	0x0800b019

0800b2bc <_printf_common>:
 800b2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c0:	4691      	mov	r9, r2
 800b2c2:	461f      	mov	r7, r3
 800b2c4:	688a      	ldr	r2, [r1, #8]
 800b2c6:	690b      	ldr	r3, [r1, #16]
 800b2c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	bfb8      	it	lt
 800b2d0:	4613      	movlt	r3, r2
 800b2d2:	f8c9 3000 	str.w	r3, [r9]
 800b2d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b2da:	4606      	mov	r6, r0
 800b2dc:	460c      	mov	r4, r1
 800b2de:	b112      	cbz	r2, 800b2e6 <_printf_common+0x2a>
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	f8c9 3000 	str.w	r3, [r9]
 800b2e6:	6823      	ldr	r3, [r4, #0]
 800b2e8:	0699      	lsls	r1, r3, #26
 800b2ea:	bf42      	ittt	mi
 800b2ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b2f0:	3302      	addmi	r3, #2
 800b2f2:	f8c9 3000 	strmi.w	r3, [r9]
 800b2f6:	6825      	ldr	r5, [r4, #0]
 800b2f8:	f015 0506 	ands.w	r5, r5, #6
 800b2fc:	d107      	bne.n	800b30e <_printf_common+0x52>
 800b2fe:	f104 0a19 	add.w	sl, r4, #25
 800b302:	68e3      	ldr	r3, [r4, #12]
 800b304:	f8d9 2000 	ldr.w	r2, [r9]
 800b308:	1a9b      	subs	r3, r3, r2
 800b30a:	42ab      	cmp	r3, r5
 800b30c:	dc28      	bgt.n	800b360 <_printf_common+0xa4>
 800b30e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b312:	6822      	ldr	r2, [r4, #0]
 800b314:	3300      	adds	r3, #0
 800b316:	bf18      	it	ne
 800b318:	2301      	movne	r3, #1
 800b31a:	0692      	lsls	r2, r2, #26
 800b31c:	d42d      	bmi.n	800b37a <_printf_common+0xbe>
 800b31e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b322:	4639      	mov	r1, r7
 800b324:	4630      	mov	r0, r6
 800b326:	47c0      	blx	r8
 800b328:	3001      	adds	r0, #1
 800b32a:	d020      	beq.n	800b36e <_printf_common+0xb2>
 800b32c:	6823      	ldr	r3, [r4, #0]
 800b32e:	68e5      	ldr	r5, [r4, #12]
 800b330:	f8d9 2000 	ldr.w	r2, [r9]
 800b334:	f003 0306 	and.w	r3, r3, #6
 800b338:	2b04      	cmp	r3, #4
 800b33a:	bf08      	it	eq
 800b33c:	1aad      	subeq	r5, r5, r2
 800b33e:	68a3      	ldr	r3, [r4, #8]
 800b340:	6922      	ldr	r2, [r4, #16]
 800b342:	bf0c      	ite	eq
 800b344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b348:	2500      	movne	r5, #0
 800b34a:	4293      	cmp	r3, r2
 800b34c:	bfc4      	itt	gt
 800b34e:	1a9b      	subgt	r3, r3, r2
 800b350:	18ed      	addgt	r5, r5, r3
 800b352:	f04f 0900 	mov.w	r9, #0
 800b356:	341a      	adds	r4, #26
 800b358:	454d      	cmp	r5, r9
 800b35a:	d11a      	bne.n	800b392 <_printf_common+0xd6>
 800b35c:	2000      	movs	r0, #0
 800b35e:	e008      	b.n	800b372 <_printf_common+0xb6>
 800b360:	2301      	movs	r3, #1
 800b362:	4652      	mov	r2, sl
 800b364:	4639      	mov	r1, r7
 800b366:	4630      	mov	r0, r6
 800b368:	47c0      	blx	r8
 800b36a:	3001      	adds	r0, #1
 800b36c:	d103      	bne.n	800b376 <_printf_common+0xba>
 800b36e:	f04f 30ff 	mov.w	r0, #4294967295
 800b372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b376:	3501      	adds	r5, #1
 800b378:	e7c3      	b.n	800b302 <_printf_common+0x46>
 800b37a:	18e1      	adds	r1, r4, r3
 800b37c:	1c5a      	adds	r2, r3, #1
 800b37e:	2030      	movs	r0, #48	; 0x30
 800b380:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b384:	4422      	add	r2, r4
 800b386:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b38a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b38e:	3302      	adds	r3, #2
 800b390:	e7c5      	b.n	800b31e <_printf_common+0x62>
 800b392:	2301      	movs	r3, #1
 800b394:	4622      	mov	r2, r4
 800b396:	4639      	mov	r1, r7
 800b398:	4630      	mov	r0, r6
 800b39a:	47c0      	blx	r8
 800b39c:	3001      	adds	r0, #1
 800b39e:	d0e6      	beq.n	800b36e <_printf_common+0xb2>
 800b3a0:	f109 0901 	add.w	r9, r9, #1
 800b3a4:	e7d8      	b.n	800b358 <_printf_common+0x9c>
	...

0800b3a8 <_printf_i>:
 800b3a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b3b0:	460c      	mov	r4, r1
 800b3b2:	7e09      	ldrb	r1, [r1, #24]
 800b3b4:	b085      	sub	sp, #20
 800b3b6:	296e      	cmp	r1, #110	; 0x6e
 800b3b8:	4617      	mov	r7, r2
 800b3ba:	4606      	mov	r6, r0
 800b3bc:	4698      	mov	r8, r3
 800b3be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3c0:	f000 80b3 	beq.w	800b52a <_printf_i+0x182>
 800b3c4:	d822      	bhi.n	800b40c <_printf_i+0x64>
 800b3c6:	2963      	cmp	r1, #99	; 0x63
 800b3c8:	d036      	beq.n	800b438 <_printf_i+0x90>
 800b3ca:	d80a      	bhi.n	800b3e2 <_printf_i+0x3a>
 800b3cc:	2900      	cmp	r1, #0
 800b3ce:	f000 80b9 	beq.w	800b544 <_printf_i+0x19c>
 800b3d2:	2958      	cmp	r1, #88	; 0x58
 800b3d4:	f000 8083 	beq.w	800b4de <_printf_i+0x136>
 800b3d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b3e0:	e032      	b.n	800b448 <_printf_i+0xa0>
 800b3e2:	2964      	cmp	r1, #100	; 0x64
 800b3e4:	d001      	beq.n	800b3ea <_printf_i+0x42>
 800b3e6:	2969      	cmp	r1, #105	; 0x69
 800b3e8:	d1f6      	bne.n	800b3d8 <_printf_i+0x30>
 800b3ea:	6820      	ldr	r0, [r4, #0]
 800b3ec:	6813      	ldr	r3, [r2, #0]
 800b3ee:	0605      	lsls	r5, r0, #24
 800b3f0:	f103 0104 	add.w	r1, r3, #4
 800b3f4:	d52a      	bpl.n	800b44c <_printf_i+0xa4>
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	6011      	str	r1, [r2, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	da03      	bge.n	800b406 <_printf_i+0x5e>
 800b3fe:	222d      	movs	r2, #45	; 0x2d
 800b400:	425b      	negs	r3, r3
 800b402:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b406:	486f      	ldr	r0, [pc, #444]	; (800b5c4 <_printf_i+0x21c>)
 800b408:	220a      	movs	r2, #10
 800b40a:	e039      	b.n	800b480 <_printf_i+0xd8>
 800b40c:	2973      	cmp	r1, #115	; 0x73
 800b40e:	f000 809d 	beq.w	800b54c <_printf_i+0x1a4>
 800b412:	d808      	bhi.n	800b426 <_printf_i+0x7e>
 800b414:	296f      	cmp	r1, #111	; 0x6f
 800b416:	d020      	beq.n	800b45a <_printf_i+0xb2>
 800b418:	2970      	cmp	r1, #112	; 0x70
 800b41a:	d1dd      	bne.n	800b3d8 <_printf_i+0x30>
 800b41c:	6823      	ldr	r3, [r4, #0]
 800b41e:	f043 0320 	orr.w	r3, r3, #32
 800b422:	6023      	str	r3, [r4, #0]
 800b424:	e003      	b.n	800b42e <_printf_i+0x86>
 800b426:	2975      	cmp	r1, #117	; 0x75
 800b428:	d017      	beq.n	800b45a <_printf_i+0xb2>
 800b42a:	2978      	cmp	r1, #120	; 0x78
 800b42c:	d1d4      	bne.n	800b3d8 <_printf_i+0x30>
 800b42e:	2378      	movs	r3, #120	; 0x78
 800b430:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b434:	4864      	ldr	r0, [pc, #400]	; (800b5c8 <_printf_i+0x220>)
 800b436:	e055      	b.n	800b4e4 <_printf_i+0x13c>
 800b438:	6813      	ldr	r3, [r2, #0]
 800b43a:	1d19      	adds	r1, r3, #4
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	6011      	str	r1, [r2, #0]
 800b440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b448:	2301      	movs	r3, #1
 800b44a:	e08c      	b.n	800b566 <_printf_i+0x1be>
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	6011      	str	r1, [r2, #0]
 800b450:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b454:	bf18      	it	ne
 800b456:	b21b      	sxthne	r3, r3
 800b458:	e7cf      	b.n	800b3fa <_printf_i+0x52>
 800b45a:	6813      	ldr	r3, [r2, #0]
 800b45c:	6825      	ldr	r5, [r4, #0]
 800b45e:	1d18      	adds	r0, r3, #4
 800b460:	6010      	str	r0, [r2, #0]
 800b462:	0628      	lsls	r0, r5, #24
 800b464:	d501      	bpl.n	800b46a <_printf_i+0xc2>
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	e002      	b.n	800b470 <_printf_i+0xc8>
 800b46a:	0668      	lsls	r0, r5, #25
 800b46c:	d5fb      	bpl.n	800b466 <_printf_i+0xbe>
 800b46e:	881b      	ldrh	r3, [r3, #0]
 800b470:	4854      	ldr	r0, [pc, #336]	; (800b5c4 <_printf_i+0x21c>)
 800b472:	296f      	cmp	r1, #111	; 0x6f
 800b474:	bf14      	ite	ne
 800b476:	220a      	movne	r2, #10
 800b478:	2208      	moveq	r2, #8
 800b47a:	2100      	movs	r1, #0
 800b47c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b480:	6865      	ldr	r5, [r4, #4]
 800b482:	60a5      	str	r5, [r4, #8]
 800b484:	2d00      	cmp	r5, #0
 800b486:	f2c0 8095 	blt.w	800b5b4 <_printf_i+0x20c>
 800b48a:	6821      	ldr	r1, [r4, #0]
 800b48c:	f021 0104 	bic.w	r1, r1, #4
 800b490:	6021      	str	r1, [r4, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d13d      	bne.n	800b512 <_printf_i+0x16a>
 800b496:	2d00      	cmp	r5, #0
 800b498:	f040 808e 	bne.w	800b5b8 <_printf_i+0x210>
 800b49c:	4665      	mov	r5, ip
 800b49e:	2a08      	cmp	r2, #8
 800b4a0:	d10b      	bne.n	800b4ba <_printf_i+0x112>
 800b4a2:	6823      	ldr	r3, [r4, #0]
 800b4a4:	07db      	lsls	r3, r3, #31
 800b4a6:	d508      	bpl.n	800b4ba <_printf_i+0x112>
 800b4a8:	6923      	ldr	r3, [r4, #16]
 800b4aa:	6862      	ldr	r2, [r4, #4]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	bfde      	ittt	le
 800b4b0:	2330      	movle	r3, #48	; 0x30
 800b4b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b4b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b4ba:	ebac 0305 	sub.w	r3, ip, r5
 800b4be:	6123      	str	r3, [r4, #16]
 800b4c0:	f8cd 8000 	str.w	r8, [sp]
 800b4c4:	463b      	mov	r3, r7
 800b4c6:	aa03      	add	r2, sp, #12
 800b4c8:	4621      	mov	r1, r4
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	f7ff fef6 	bl	800b2bc <_printf_common>
 800b4d0:	3001      	adds	r0, #1
 800b4d2:	d14d      	bne.n	800b570 <_printf_i+0x1c8>
 800b4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d8:	b005      	add	sp, #20
 800b4da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4de:	4839      	ldr	r0, [pc, #228]	; (800b5c4 <_printf_i+0x21c>)
 800b4e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b4e4:	6813      	ldr	r3, [r2, #0]
 800b4e6:	6821      	ldr	r1, [r4, #0]
 800b4e8:	1d1d      	adds	r5, r3, #4
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	6015      	str	r5, [r2, #0]
 800b4ee:	060a      	lsls	r2, r1, #24
 800b4f0:	d50b      	bpl.n	800b50a <_printf_i+0x162>
 800b4f2:	07ca      	lsls	r2, r1, #31
 800b4f4:	bf44      	itt	mi
 800b4f6:	f041 0120 	orrmi.w	r1, r1, #32
 800b4fa:	6021      	strmi	r1, [r4, #0]
 800b4fc:	b91b      	cbnz	r3, 800b506 <_printf_i+0x15e>
 800b4fe:	6822      	ldr	r2, [r4, #0]
 800b500:	f022 0220 	bic.w	r2, r2, #32
 800b504:	6022      	str	r2, [r4, #0]
 800b506:	2210      	movs	r2, #16
 800b508:	e7b7      	b.n	800b47a <_printf_i+0xd2>
 800b50a:	064d      	lsls	r5, r1, #25
 800b50c:	bf48      	it	mi
 800b50e:	b29b      	uxthmi	r3, r3
 800b510:	e7ef      	b.n	800b4f2 <_printf_i+0x14a>
 800b512:	4665      	mov	r5, ip
 800b514:	fbb3 f1f2 	udiv	r1, r3, r2
 800b518:	fb02 3311 	mls	r3, r2, r1, r3
 800b51c:	5cc3      	ldrb	r3, [r0, r3]
 800b51e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b522:	460b      	mov	r3, r1
 800b524:	2900      	cmp	r1, #0
 800b526:	d1f5      	bne.n	800b514 <_printf_i+0x16c>
 800b528:	e7b9      	b.n	800b49e <_printf_i+0xf6>
 800b52a:	6813      	ldr	r3, [r2, #0]
 800b52c:	6825      	ldr	r5, [r4, #0]
 800b52e:	6961      	ldr	r1, [r4, #20]
 800b530:	1d18      	adds	r0, r3, #4
 800b532:	6010      	str	r0, [r2, #0]
 800b534:	0628      	lsls	r0, r5, #24
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	d501      	bpl.n	800b53e <_printf_i+0x196>
 800b53a:	6019      	str	r1, [r3, #0]
 800b53c:	e002      	b.n	800b544 <_printf_i+0x19c>
 800b53e:	066a      	lsls	r2, r5, #25
 800b540:	d5fb      	bpl.n	800b53a <_printf_i+0x192>
 800b542:	8019      	strh	r1, [r3, #0]
 800b544:	2300      	movs	r3, #0
 800b546:	6123      	str	r3, [r4, #16]
 800b548:	4665      	mov	r5, ip
 800b54a:	e7b9      	b.n	800b4c0 <_printf_i+0x118>
 800b54c:	6813      	ldr	r3, [r2, #0]
 800b54e:	1d19      	adds	r1, r3, #4
 800b550:	6011      	str	r1, [r2, #0]
 800b552:	681d      	ldr	r5, [r3, #0]
 800b554:	6862      	ldr	r2, [r4, #4]
 800b556:	2100      	movs	r1, #0
 800b558:	4628      	mov	r0, r5
 800b55a:	f7fc fe49 	bl	80081f0 <memchr>
 800b55e:	b108      	cbz	r0, 800b564 <_printf_i+0x1bc>
 800b560:	1b40      	subs	r0, r0, r5
 800b562:	6060      	str	r0, [r4, #4]
 800b564:	6863      	ldr	r3, [r4, #4]
 800b566:	6123      	str	r3, [r4, #16]
 800b568:	2300      	movs	r3, #0
 800b56a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b56e:	e7a7      	b.n	800b4c0 <_printf_i+0x118>
 800b570:	6923      	ldr	r3, [r4, #16]
 800b572:	462a      	mov	r2, r5
 800b574:	4639      	mov	r1, r7
 800b576:	4630      	mov	r0, r6
 800b578:	47c0      	blx	r8
 800b57a:	3001      	adds	r0, #1
 800b57c:	d0aa      	beq.n	800b4d4 <_printf_i+0x12c>
 800b57e:	6823      	ldr	r3, [r4, #0]
 800b580:	079b      	lsls	r3, r3, #30
 800b582:	d413      	bmi.n	800b5ac <_printf_i+0x204>
 800b584:	68e0      	ldr	r0, [r4, #12]
 800b586:	9b03      	ldr	r3, [sp, #12]
 800b588:	4298      	cmp	r0, r3
 800b58a:	bfb8      	it	lt
 800b58c:	4618      	movlt	r0, r3
 800b58e:	e7a3      	b.n	800b4d8 <_printf_i+0x130>
 800b590:	2301      	movs	r3, #1
 800b592:	464a      	mov	r2, r9
 800b594:	4639      	mov	r1, r7
 800b596:	4630      	mov	r0, r6
 800b598:	47c0      	blx	r8
 800b59a:	3001      	adds	r0, #1
 800b59c:	d09a      	beq.n	800b4d4 <_printf_i+0x12c>
 800b59e:	3501      	adds	r5, #1
 800b5a0:	68e3      	ldr	r3, [r4, #12]
 800b5a2:	9a03      	ldr	r2, [sp, #12]
 800b5a4:	1a9b      	subs	r3, r3, r2
 800b5a6:	42ab      	cmp	r3, r5
 800b5a8:	dcf2      	bgt.n	800b590 <_printf_i+0x1e8>
 800b5aa:	e7eb      	b.n	800b584 <_printf_i+0x1dc>
 800b5ac:	2500      	movs	r5, #0
 800b5ae:	f104 0919 	add.w	r9, r4, #25
 800b5b2:	e7f5      	b.n	800b5a0 <_printf_i+0x1f8>
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1ac      	bne.n	800b512 <_printf_i+0x16a>
 800b5b8:	7803      	ldrb	r3, [r0, #0]
 800b5ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5c2:	e76c      	b.n	800b49e <_printf_i+0xf6>
 800b5c4:	0800b859 	.word	0x0800b859
 800b5c8:	0800b86a 	.word	0x0800b86a

0800b5cc <memcpy>:
 800b5cc:	b510      	push	{r4, lr}
 800b5ce:	1e43      	subs	r3, r0, #1
 800b5d0:	440a      	add	r2, r1
 800b5d2:	4291      	cmp	r1, r2
 800b5d4:	d100      	bne.n	800b5d8 <memcpy+0xc>
 800b5d6:	bd10      	pop	{r4, pc}
 800b5d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5e0:	e7f7      	b.n	800b5d2 <memcpy+0x6>

0800b5e2 <memmove>:
 800b5e2:	4288      	cmp	r0, r1
 800b5e4:	b510      	push	{r4, lr}
 800b5e6:	eb01 0302 	add.w	r3, r1, r2
 800b5ea:	d807      	bhi.n	800b5fc <memmove+0x1a>
 800b5ec:	1e42      	subs	r2, r0, #1
 800b5ee:	4299      	cmp	r1, r3
 800b5f0:	d00a      	beq.n	800b608 <memmove+0x26>
 800b5f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b5fa:	e7f8      	b.n	800b5ee <memmove+0xc>
 800b5fc:	4283      	cmp	r3, r0
 800b5fe:	d9f5      	bls.n	800b5ec <memmove+0xa>
 800b600:	1881      	adds	r1, r0, r2
 800b602:	1ad2      	subs	r2, r2, r3
 800b604:	42d3      	cmn	r3, r2
 800b606:	d100      	bne.n	800b60a <memmove+0x28>
 800b608:	bd10      	pop	{r4, pc}
 800b60a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b60e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b612:	e7f7      	b.n	800b604 <memmove+0x22>

0800b614 <_free_r>:
 800b614:	b538      	push	{r3, r4, r5, lr}
 800b616:	4605      	mov	r5, r0
 800b618:	2900      	cmp	r1, #0
 800b61a:	d045      	beq.n	800b6a8 <_free_r+0x94>
 800b61c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b620:	1f0c      	subs	r4, r1, #4
 800b622:	2b00      	cmp	r3, #0
 800b624:	bfb8      	it	lt
 800b626:	18e4      	addlt	r4, r4, r3
 800b628:	f000 f8d2 	bl	800b7d0 <__malloc_lock>
 800b62c:	4a1f      	ldr	r2, [pc, #124]	; (800b6ac <_free_r+0x98>)
 800b62e:	6813      	ldr	r3, [r2, #0]
 800b630:	4610      	mov	r0, r2
 800b632:	b933      	cbnz	r3, 800b642 <_free_r+0x2e>
 800b634:	6063      	str	r3, [r4, #4]
 800b636:	6014      	str	r4, [r2, #0]
 800b638:	4628      	mov	r0, r5
 800b63a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b63e:	f000 b8c8 	b.w	800b7d2 <__malloc_unlock>
 800b642:	42a3      	cmp	r3, r4
 800b644:	d90c      	bls.n	800b660 <_free_r+0x4c>
 800b646:	6821      	ldr	r1, [r4, #0]
 800b648:	1862      	adds	r2, r4, r1
 800b64a:	4293      	cmp	r3, r2
 800b64c:	bf04      	itt	eq
 800b64e:	681a      	ldreq	r2, [r3, #0]
 800b650:	685b      	ldreq	r3, [r3, #4]
 800b652:	6063      	str	r3, [r4, #4]
 800b654:	bf04      	itt	eq
 800b656:	1852      	addeq	r2, r2, r1
 800b658:	6022      	streq	r2, [r4, #0]
 800b65a:	6004      	str	r4, [r0, #0]
 800b65c:	e7ec      	b.n	800b638 <_free_r+0x24>
 800b65e:	4613      	mov	r3, r2
 800b660:	685a      	ldr	r2, [r3, #4]
 800b662:	b10a      	cbz	r2, 800b668 <_free_r+0x54>
 800b664:	42a2      	cmp	r2, r4
 800b666:	d9fa      	bls.n	800b65e <_free_r+0x4a>
 800b668:	6819      	ldr	r1, [r3, #0]
 800b66a:	1858      	adds	r0, r3, r1
 800b66c:	42a0      	cmp	r0, r4
 800b66e:	d10b      	bne.n	800b688 <_free_r+0x74>
 800b670:	6820      	ldr	r0, [r4, #0]
 800b672:	4401      	add	r1, r0
 800b674:	1858      	adds	r0, r3, r1
 800b676:	4282      	cmp	r2, r0
 800b678:	6019      	str	r1, [r3, #0]
 800b67a:	d1dd      	bne.n	800b638 <_free_r+0x24>
 800b67c:	6810      	ldr	r0, [r2, #0]
 800b67e:	6852      	ldr	r2, [r2, #4]
 800b680:	605a      	str	r2, [r3, #4]
 800b682:	4401      	add	r1, r0
 800b684:	6019      	str	r1, [r3, #0]
 800b686:	e7d7      	b.n	800b638 <_free_r+0x24>
 800b688:	d902      	bls.n	800b690 <_free_r+0x7c>
 800b68a:	230c      	movs	r3, #12
 800b68c:	602b      	str	r3, [r5, #0]
 800b68e:	e7d3      	b.n	800b638 <_free_r+0x24>
 800b690:	6820      	ldr	r0, [r4, #0]
 800b692:	1821      	adds	r1, r4, r0
 800b694:	428a      	cmp	r2, r1
 800b696:	bf04      	itt	eq
 800b698:	6811      	ldreq	r1, [r2, #0]
 800b69a:	6852      	ldreq	r2, [r2, #4]
 800b69c:	6062      	str	r2, [r4, #4]
 800b69e:	bf04      	itt	eq
 800b6a0:	1809      	addeq	r1, r1, r0
 800b6a2:	6021      	streq	r1, [r4, #0]
 800b6a4:	605c      	str	r4, [r3, #4]
 800b6a6:	e7c7      	b.n	800b638 <_free_r+0x24>
 800b6a8:	bd38      	pop	{r3, r4, r5, pc}
 800b6aa:	bf00      	nop
 800b6ac:	200000b4 	.word	0x200000b4

0800b6b0 <_malloc_r>:
 800b6b0:	b570      	push	{r4, r5, r6, lr}
 800b6b2:	1ccd      	adds	r5, r1, #3
 800b6b4:	f025 0503 	bic.w	r5, r5, #3
 800b6b8:	3508      	adds	r5, #8
 800b6ba:	2d0c      	cmp	r5, #12
 800b6bc:	bf38      	it	cc
 800b6be:	250c      	movcc	r5, #12
 800b6c0:	2d00      	cmp	r5, #0
 800b6c2:	4606      	mov	r6, r0
 800b6c4:	db01      	blt.n	800b6ca <_malloc_r+0x1a>
 800b6c6:	42a9      	cmp	r1, r5
 800b6c8:	d903      	bls.n	800b6d2 <_malloc_r+0x22>
 800b6ca:	230c      	movs	r3, #12
 800b6cc:	6033      	str	r3, [r6, #0]
 800b6ce:	2000      	movs	r0, #0
 800b6d0:	bd70      	pop	{r4, r5, r6, pc}
 800b6d2:	f000 f87d 	bl	800b7d0 <__malloc_lock>
 800b6d6:	4a21      	ldr	r2, [pc, #132]	; (800b75c <_malloc_r+0xac>)
 800b6d8:	6814      	ldr	r4, [r2, #0]
 800b6da:	4621      	mov	r1, r4
 800b6dc:	b991      	cbnz	r1, 800b704 <_malloc_r+0x54>
 800b6de:	4c20      	ldr	r4, [pc, #128]	; (800b760 <_malloc_r+0xb0>)
 800b6e0:	6823      	ldr	r3, [r4, #0]
 800b6e2:	b91b      	cbnz	r3, 800b6ec <_malloc_r+0x3c>
 800b6e4:	4630      	mov	r0, r6
 800b6e6:	f000 f863 	bl	800b7b0 <_sbrk_r>
 800b6ea:	6020      	str	r0, [r4, #0]
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	f000 f85e 	bl	800b7b0 <_sbrk_r>
 800b6f4:	1c43      	adds	r3, r0, #1
 800b6f6:	d124      	bne.n	800b742 <_malloc_r+0x92>
 800b6f8:	230c      	movs	r3, #12
 800b6fa:	6033      	str	r3, [r6, #0]
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	f000 f868 	bl	800b7d2 <__malloc_unlock>
 800b702:	e7e4      	b.n	800b6ce <_malloc_r+0x1e>
 800b704:	680b      	ldr	r3, [r1, #0]
 800b706:	1b5b      	subs	r3, r3, r5
 800b708:	d418      	bmi.n	800b73c <_malloc_r+0x8c>
 800b70a:	2b0b      	cmp	r3, #11
 800b70c:	d90f      	bls.n	800b72e <_malloc_r+0x7e>
 800b70e:	600b      	str	r3, [r1, #0]
 800b710:	50cd      	str	r5, [r1, r3]
 800b712:	18cc      	adds	r4, r1, r3
 800b714:	4630      	mov	r0, r6
 800b716:	f000 f85c 	bl	800b7d2 <__malloc_unlock>
 800b71a:	f104 000b 	add.w	r0, r4, #11
 800b71e:	1d23      	adds	r3, r4, #4
 800b720:	f020 0007 	bic.w	r0, r0, #7
 800b724:	1ac3      	subs	r3, r0, r3
 800b726:	d0d3      	beq.n	800b6d0 <_malloc_r+0x20>
 800b728:	425a      	negs	r2, r3
 800b72a:	50e2      	str	r2, [r4, r3]
 800b72c:	e7d0      	b.n	800b6d0 <_malloc_r+0x20>
 800b72e:	428c      	cmp	r4, r1
 800b730:	684b      	ldr	r3, [r1, #4]
 800b732:	bf16      	itet	ne
 800b734:	6063      	strne	r3, [r4, #4]
 800b736:	6013      	streq	r3, [r2, #0]
 800b738:	460c      	movne	r4, r1
 800b73a:	e7eb      	b.n	800b714 <_malloc_r+0x64>
 800b73c:	460c      	mov	r4, r1
 800b73e:	6849      	ldr	r1, [r1, #4]
 800b740:	e7cc      	b.n	800b6dc <_malloc_r+0x2c>
 800b742:	1cc4      	adds	r4, r0, #3
 800b744:	f024 0403 	bic.w	r4, r4, #3
 800b748:	42a0      	cmp	r0, r4
 800b74a:	d005      	beq.n	800b758 <_malloc_r+0xa8>
 800b74c:	1a21      	subs	r1, r4, r0
 800b74e:	4630      	mov	r0, r6
 800b750:	f000 f82e 	bl	800b7b0 <_sbrk_r>
 800b754:	3001      	adds	r0, #1
 800b756:	d0cf      	beq.n	800b6f8 <_malloc_r+0x48>
 800b758:	6025      	str	r5, [r4, #0]
 800b75a:	e7db      	b.n	800b714 <_malloc_r+0x64>
 800b75c:	200000b4 	.word	0x200000b4
 800b760:	200000b8 	.word	0x200000b8

0800b764 <_realloc_r>:
 800b764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b766:	4607      	mov	r7, r0
 800b768:	4614      	mov	r4, r2
 800b76a:	460e      	mov	r6, r1
 800b76c:	b921      	cbnz	r1, 800b778 <_realloc_r+0x14>
 800b76e:	4611      	mov	r1, r2
 800b770:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b774:	f7ff bf9c 	b.w	800b6b0 <_malloc_r>
 800b778:	b922      	cbnz	r2, 800b784 <_realloc_r+0x20>
 800b77a:	f7ff ff4b 	bl	800b614 <_free_r>
 800b77e:	4625      	mov	r5, r4
 800b780:	4628      	mov	r0, r5
 800b782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b784:	f000 f826 	bl	800b7d4 <_malloc_usable_size_r>
 800b788:	42a0      	cmp	r0, r4
 800b78a:	d20f      	bcs.n	800b7ac <_realloc_r+0x48>
 800b78c:	4621      	mov	r1, r4
 800b78e:	4638      	mov	r0, r7
 800b790:	f7ff ff8e 	bl	800b6b0 <_malloc_r>
 800b794:	4605      	mov	r5, r0
 800b796:	2800      	cmp	r0, #0
 800b798:	d0f2      	beq.n	800b780 <_realloc_r+0x1c>
 800b79a:	4631      	mov	r1, r6
 800b79c:	4622      	mov	r2, r4
 800b79e:	f7ff ff15 	bl	800b5cc <memcpy>
 800b7a2:	4631      	mov	r1, r6
 800b7a4:	4638      	mov	r0, r7
 800b7a6:	f7ff ff35 	bl	800b614 <_free_r>
 800b7aa:	e7e9      	b.n	800b780 <_realloc_r+0x1c>
 800b7ac:	4635      	mov	r5, r6
 800b7ae:	e7e7      	b.n	800b780 <_realloc_r+0x1c>

0800b7b0 <_sbrk_r>:
 800b7b0:	b538      	push	{r3, r4, r5, lr}
 800b7b2:	4c06      	ldr	r4, [pc, #24]	; (800b7cc <_sbrk_r+0x1c>)
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	4605      	mov	r5, r0
 800b7b8:	4608      	mov	r0, r1
 800b7ba:	6023      	str	r3, [r4, #0]
 800b7bc:	f7ff fb38 	bl	800ae30 <_sbrk>
 800b7c0:	1c43      	adds	r3, r0, #1
 800b7c2:	d102      	bne.n	800b7ca <_sbrk_r+0x1a>
 800b7c4:	6823      	ldr	r3, [r4, #0]
 800b7c6:	b103      	cbz	r3, 800b7ca <_sbrk_r+0x1a>
 800b7c8:	602b      	str	r3, [r5, #0]
 800b7ca:	bd38      	pop	{r3, r4, r5, pc}
 800b7cc:	20000154 	.word	0x20000154

0800b7d0 <__malloc_lock>:
 800b7d0:	4770      	bx	lr

0800b7d2 <__malloc_unlock>:
 800b7d2:	4770      	bx	lr

0800b7d4 <_malloc_usable_size_r>:
 800b7d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7d8:	1f18      	subs	r0, r3, #4
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	bfbc      	itt	lt
 800b7de:	580b      	ldrlt	r3, [r1, r0]
 800b7e0:	18c0      	addlt	r0, r0, r3
 800b7e2:	4770      	bx	lr

0800b7e4 <_init>:
 800b7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e6:	bf00      	nop
 800b7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ea:	bc08      	pop	{r3}
 800b7ec:	469e      	mov	lr, r3
 800b7ee:	4770      	bx	lr

0800b7f0 <_fini>:
 800b7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f2:	bf00      	nop
 800b7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7f6:	bc08      	pop	{r3}
 800b7f8:	469e      	mov	lr, r3
 800b7fa:	4770      	bx	lr
